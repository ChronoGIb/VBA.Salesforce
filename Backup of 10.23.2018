'Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
Dim EmailTemplateMaster As New Collection
Public Function DownloadFile(URL As String, LocalFilename As String) As Boolean
Dim lngRetVal As Long
lngRetVal = URLDownloadToFile(0, URL, LocalFilename, 0, 0)
If lngRetVal = 0 Then
    If Dir(LocalFilename) <> vbNullString Then
        DownloadFile = True
    End If
End If
End Function
Sub a1ProccessUpdates()
Dim startcount As Integer
Dim endcount As Integer
Dim looking_for_end_of_document As Integer
startcount = 1
' endcount = InputBox("Enter final record number.", "Last record to be proccessed.", 50)
'find the first record
    Do While left(Range("A" & startcount), 4) <> "http" And startcount < 20000
    startcount = startcount + 1
    Loop
    ' Check to see if logged in yet
    CheckifLoggedin
  
looking_for_end_of_document = 0
Do While startcount < 9999 And looking_for_end_of_document < 4
    If Range("A" & startcount) = "" Or Len(Range("A" & startcount)) < 15 Then
    looking_for_end_of_document = looking_for_end_of_document + 1
    Else
    looking_for_end_of_document = 0
    Set URL = Range("A" & startcount)
   Range("D1").Value = startcount
    Range("C" & startcount) = Openclick1(URL, False)
    startcount = startcount + 1
    End If
Loop
'MsgBox "Task Completed Successfully:  " & startcount
End Sub
Function Openclick1(currentcell, showIE As Boolean)
    Dim i As Long
    Dim IE As Object
    Dim objElement As Object
    Dim objCollection As Object
    Dim URL As String
    Dim endcount As Integer
    Dim startcount As Integer
    Dim Results As String
    Dim checktitle As Object
    Dim currentrecordstatus As String
    Dim timeoutcounter As Integer
    Dim BrowseStatus As Boolean
  
    ' Create InternetExplorer Object
    Set IE = CreateObject("InternetExplorer.Application")
If showIE <> True Then
showIE = False
End If
URL = currentcell
 
'force block case re-assignment
If left(URL, 31) = "https://na68.salesforce.com/500" Or left(URL, 31) Like "https://????.salesforce.com/500" Then
    URL = URL & "&cas21=0"
End If
 
    IE.Visible = showIE
    BrowseStatus = opNAV(IE, "nav", URL)
  
    'write URL to log

 
    ' Wait while IE loading...
    Range("A1").Value = "saving... busy"
          
    BrowseStatus = HitSave(IE)
 
    Range("A1").Value = "title just saved"
timeoutcounter = 0
            currentrecordstatus = currentrecordstatus & IE.document.Title
       ' Clean up
    IE.Quit
    Set IE = Nothing
    Set objElement = Nothing
    Set objCollection = Nothing
    Set elementcol = Nothing
    Application.StatusBar = ""
    ' Openclick1 = results
    Openclick1 = currentrecordstatus
End Function
Private Sub CheckifLoggedin()
Dim logincheck As Object
Set logincheck = CreateObject("InternetExplorer.Application")
    logincheck.Navigate "https://na68.salesforce.com/home/home.jsp"
        Application.Wait (Now + #12:00:01 AM#)
        Do While logincheck.busy
        Loop
        If logincheck.document.Title = "Login | Salesforce" Then
            logincheck.Visible = True
            MsgBox "Press OK once you've logged into Salesforce with IE"
            logincheck.Visible = False
        Else
            logincheck.Quit
        End If
End Sub
Function Collect_Data(Source_Report As String, Current_Row As Integer, Instructions As String, Style As String) As Integer
Dim IE As Object
Dim page_info As Object
Dim page_tables As Object
Dim URL4Update As String
Dim CrawlInstruct As Variant
Dim Due_Date As String
Dim Previous_Value As String
Dim Length As Long
Dim FieldInfo As Object
Dim ScavangeIE As Object
Dim Georange(2, 2) As Double
Dim distance As Double
Dim matrix(11, 2) As String
Dim Values4Results(8) As String
Dim DataCollection As Collection
Dim LetterTemplate As String
Dim RegionResolution As Variant
Dim PAX As Variant
Dim EmailTemplate As Variant
Dim CollectedResults As Collection
Dim CollectionSubgroup As Collection
Dim TFconfirmation As Boolean
Dim PageUpdates As Collection
 
Range("A2").Value = "Currently proccessing: " & Instructions
'Dim tabledate As Object
CheckifLoggedin

Call opNAV(IE, "nav", Source_Report)

    If Style = "tabledata" Then
        Set page_info = IE.document.getelementsbytagname("td", "th")
        Else
       Set page_info = IE.document.getelementsbyclassname("even", "odd")
    End If
     
        For Each TableData In page_info
        
            Dim ID As String
            Dim Name As String
     
            tabledate = TableData.innerhtml
            'MsgBox tabledata, , "this is what the inner HTML looks like"
            If Len(tabledate) < 29 Then
            GoTo EndOfLoop
            End If
     
            Length = Len(tabledate)
            ID = Right(left(tabledate, 19), 15)
            
            Debug.Print "3A proccessing " & ID
            
            Name = Right(tabledate, Length - 28)
            Name = left(Name, Len(Name) - 5)
     
            If Instructions = "Ownership" Then
                If Len(Name) = 2 Then
                    If Name = "ME" Or Name = "VT" Or Name = "NH" Or Name = "MA" Or Name = "RI" Or Name = "CT" Then
                    Name = "Janice Fox"
                   End If
             
                    If Name = "NY" Or Name = "NJ" Or Name = "DE" Or Name = "PA" Or Name = "MD" Or Name = "DC" Or Name = "OH" Or Name = "WV" Or Name = "VA" Or Name = "NC" Or Name = "SC" Or Name = "GA" Or Name = "FL" Then
                    Name = "Jennifer Yildiz"
                    End If
             
                    If Name = "MT" Or Name = "WY" Or Name = "ND" Or Name = "SD" Or Name = "NE" Or Name = "KS" Or Name = "OK" Or Name = "TX" Or Name = "NM" Or Name = "AZ" Or Name = "MN" Or Name = "IA" Or Name = "MO" Or Name = "AR" Or Name = "LA" Or Name = "MI" Or Name = "WI" Or Name = "IL" Or Name = "IN" Or Name = "KY" Or Name = "TN" Or Name = "MS" Or Name = "AL" Then
                    Name = "Stacie Tollaksen"
                    End If
             
                    If Name = "WA" Or Name = "OR" Or Name = "ID" Or Name = "CA" Or Name = "NV" Or Name = "UT" Or Name = "CO" Or Name = "AK" Or Name = "HI" Then
                    Name = "Lalune Sip"
                    End If
     
                End If
                 
            URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=", "<ID>", ID) & Name
            End If
     
            
            
            If Instructions = "Practice HFA Creator" Then
                PAX = PAXbasicInfo(Name, ID, "", 4)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLbZe=", "<ID>", ID) & Name
            End If
     
            If Instructions = "Rename Match" Then
                URL4Update = RenameMatch(ID)
                URL4Update = ""
            End If
      
            If Instructions = "Housing Confirmed" Then
                Length = InStr(Name, " ")
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLbZe=", "<ID>", ID) & Name
            End If
     
            If Instructions = "Flag Match for Confirmation Email" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>00N1300000BLZQq=Confirm", "<ID>", ID)
            End If
      
            If Instructions = "Populate Accomodation Plan Accepted Date" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLbZe=1/1/2017", "<ID>", ID)
            End If
      
            If Instructions = "Clear Geotags for Re-Calc" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2eGd=", "<ID>", ID)
            End If
            
            If Instructions = "IsCurrent Accommodations for PAX not On Program" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BQr6R=0", "<ID>", ID)
            End If
     
            If Instructions = "Overdue Check Ins 99 - Check-In has been completed" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=Student is On-Program indicating Check-In Completion", "<ID>", ID)
            End If
      
            If Instructions = "Terminated PAX -> Terminated Account to avoid repeats" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N300000068N8x=Terminated", "<ID>", ID)
            End If
     
            If Instructions = "Cases tagged to a fake test match" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00Na000000B2eGi=&CF00Na000000B2eGi_lkid=&CF00N1300000BOWTk=&CF00N1300000BOWTk_lkid=", "<ID>", ID)
            End If
     
            If Instructions = "Close Overdue MC for PAX is no longer on program" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=PAX is no longer on program", "<ID>", ID) & left(Name, 45)
            End If
     
            If Instructions = "Close cases for Overdue Check-Ins that are now completed" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=", "<ID>", ID) & left(Name, 25) & " - Check in was complete at " & Format(Now(), "MM/DD/YYYY")
            End If
     
            If Instructions = "ReOpen Overdue Check-Ins that are not completed/confirmed" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Open", "<ID>", ID)
            End If
     
            If Instructions = "Hide Checkin and Overdue MCs from Fieldstaff" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Andrew Mey&newOwn_lkid=0051300000BT4mM", "<ID>", ID)
            End If
            
            If Instructions = "Sevis Error S2129" Then
                Call SEVIS_Errors_S2129(ID)
                URL4Update = ""
            End If
            
            If Instructions = "Sevis Error Too Many Boxes" Then
                Call SEVIS_Repair_2manyBoxes(SEVIS_CollectInfo(ID))
                URL4Update = ""
            End If
     
            If Instructions = "Silence Job Notification" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2KhX=Confirmed", "<ID>", ID)
            End If
            If Instructions = "Forward Overdue MCs to fieldstaff 08|09" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=09|PAX needs Dissmisal Notice from fieldstaff&cas7=New&cas8=High", "<ID>", Name)
                Call opNAV(ScavangeIE, "nav", URL4Update)
                Call HitSave(ScavangeIE)
                Call opNAV(ScavangeIE, "quit")
                URL4Update = ""
            End If
            
            If Instructions = "Make sure Overdue Monthly Contacts not in wait External are not assigned to Andrew" Then
                PAX = PAXbasicInfo(Name, ID, "", 4)
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/a?newOwn=Regional&newOwn_lkid=" & PAX(37, 1))
                Call HitSave(ScavangeIE)
                Call opNAV(ScavangeIE, "quit")
                URL4Update = ""
            End If
      
            If Instructions = "Sync Confirmed Housing" Then
               URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLnhg=1&00Na000000B369A=Thank you for submitting your housing, Intrax is now proccessing your housing information.&00Na000000B2KgF=Incomplete", "<ID>", ID)
            End If
            
            If Instructions = "PAHR/Xplorer/Xanterra Fix" Then
               URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLbZF=Housing&CF00N1300000BLbZF_lkid=a1p1B00000780eG", "<ID>", ID)
            End If
          
            If Instructions = "Check if PAX has submitted a unit number" Then
                Call CheckIn_Followup_on_missing_Unit_Number(ID, Name)
                URL4Update = ""
            End If
      
            
            If Instructions = "Sync Confirmed Housing Part 2" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLnhg=1&00Na000000B2KgF=Confirmed", "<ID>", ID)
            End If
      
            If Instructions = "Duplicate Housing Validations Part 1" Then
                Call MoveAssess2Forest(ID)
                URL4Update = ""
            End If
      
            If Instructions = "Duplicate Housing Validations Part 2 - Redirecting Sites" Then
                Name = Right(Name, 15)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N30000009ot87=SITE&CF00N30000009ot87_lkid=", "<ID>", ID) & Name
           End If
      
            If Instructions = "Duplicate Housing Validations Part 3 - Remove duplicate PAX links from validation assessment" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhS=&CF00N1300000BLnhS_lkid=&00N1300000BLnhO=0", "<ID>", ID)
            End If
      
            If Instructions = "Duplicate Housing Validations Part 4 - Moving Duplicate Assessments to the Forest of DUPs" Then
                Call MoveAssess2Forest(ID)
                URL4Update = ""
            End If
      
            If Instructions = "Duplicate Housing Validations Part 5 - Move Assessments from duplicate Landlord to primary landlord" Then
                Name = left(Right(Name, 19), 15)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhl=Landlord&CF00N1300000BLnhl_lkid=", "<ID>", ID) & Name
           End If
           
           If Instructions = "Duplicate Housing Validations Part 5b - Move Assessments from duplicate site to Prime Site" Then
                Name = Mid(Name, 11, 15)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhV=Site&CF00N1300000BLnhV_lkid=", "<ID>", ID) & Name
           End If
       
            If Instructions = "Duplicate Housing Validations Part 6 - Move Sites from duplicate landlord to primary landlord" Then
                Name = left(Right(Name, 19), 15)
               URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhG=Landlord&CF00N1300000BLnhG_lkid=", "<ID>", ID) & Name
            End If
            
            If Instructions = "PAX Record Integrity Check" Then
               Call Check_App_Opp_Eng(ID)
               URL4Update = ""
            End If
            
            If Instructions = "Fix SEVIS - 01 - Housing Site" Then
               Call SEVIS_Fix_AddressError(ID)
               URL4Update = ""
            End If
      
            If Instructions = "Duplicate Housing Validations Part 7 - Move PAX via Accommodation object to the one true Assessment" Then
                URL4Update = FindOneTrueValidation(ID)
                If URL4Update = "Error" Or Len(URL4Update) <> 15 Then
                    URL4Update = ""
                Else
                    'CrawlInstruct = AnalyeOvercrowding(URL4Update, False)
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhS=One True Assessment&CF00N1300000BLnhS_lkid=", "<ID>", ID) & URL4Update
                End If
            End If
            
            If Instructions = "Docusign 01 - Populate Operations Contact using Primary Contact" Then
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                CrawlInstruct = FetchField(ScavangeIE, "CF00Na0000009rUSE_lkid")
                    Set PageUpdates = New Collection
                        PageUpdates.Add Array("CF00N1B00000BLz5L_lkid", CrawlInstruct(0))
                    Call PushUpdates2Page(ScavangeIE, PageUpdates)
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                URL4Update = ""
            End If
      
            If Instructions = "Return Housing Plan to PAX for Completion every 5 days" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLbZG=&00Na000000B2KgF=Incomplete&00Na000000B369A=Please provide your housing information.", "<ID>", ID)
            End If
      
            If Instructions = "Check the Primary SOA box on Match" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2eHX=1", "<ID>", ID)
            End If
            
            If Instructions = "Delete SEVIS Record is Locked for Transaction/Has no updates" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2eH9=", "<ID>", ID)
            End If
         
            If Instructions = "Tag Incomming Apps" Then
                Previous_Value = GenerateJobTaggingReport(ID)
                URL4Update = ""
            End If
            
            If Instructions = "Applied Matches with Completed Docusigns" Then
                Call CompleteEnvelope_AppliedMatch(ID)
                URL4Update = ""
            End If
            
            If Instructions = "Priority Score Housing Validations" Then
                Call Housing_Overcrowding_and_Info(ID)
                URL4Update = ""
            End If
            
            If Instructions = "Send Apps back to Submitted if DOB is wrong" Then
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                Debug.Print "Applicattion Stage: " & FetchField(ScavangeIE, "00Na0000009qGpE")(0)
                CrawlInstruct = FetchField(ScavangeIE, "Name")
                    Set DataCollection = New Collection
                    DataCollection.Add Array("Name", left(CrawlInstruct(0) & " (PLEASE CHECK DATE OF BIRTH)", 80))
                    DataCollection.Add Array("00Na0000009qGpE", "Submitted")
                Call PushUpdates2Page(ScavangeIE, DataCollection)
                URL4Update = ""
            End If
            
            If Instructions = "New PAHR" Then
                If Len(ID) = 15 Then
                    Call PAHR_Master(ID)
                    URL4Update = ""
                End If
            End If
            
            If Instructions = "Populate missing Confirmed Dates on Check Ins" Then
                If Len(ID) = 15 Then
                    Call Fix_Missing_Confirmed_Date(ID)
                    URL4Update = ""
                End If
            End If
            
            If Instructions = "Offer Docusign Via Match" Then
                If Len(ID) = 15 Then
                    Call Docusign_SetupMatch(ID)
                    URL4Update = ""
                End If
            End If
            
            If Instructions = "CheckIns Missing Actual Arrival Date" Then
                If Len(ID) = 15 Then
                    Call CheckIn_Missing_Arrival_Date(ID)
                    URL4Update = ""
                End If
            End If
            
            If Instructions = "Fix Premium Matchs at IP HC" Then
                If Len(ID) = 15 Then
                    URL4Update = Replace("https://na68.salesforce.com/<ID>", "<ID>", ID)
                    Call opNAV(ScavangeIE, "nav", URL4Update)
                    CrawlInstruct = FetchField(ScavangeIE, "00Na000000B2SUq_ileinner")
                    Call opNAV(ScavangeIE, "nav", URL4Update & "/e")
                    Debug.Print "Change Match Service Lvl to Independent and then change Offer status back to : " & CrawlInstruct(0)
                        Set DataCollection = New Collection
                            DataCollection.Add Array("00Na000000B2SUq", "--None--")
                            DataCollection.Add Array("00Na000000B2xTf", "Independent")
                    Call PushUpdates2Page(ScavangeIE, DataCollection)
                    Call opNAV(ScavangeIE, "nav", URL4Update & "/e")
                        Set DataCollection = New Collection
                            DataCollection.Add Array("00Na000000B2SUq", CrawlInstruct(0))
                    Call PushUpdates2Page(ScavangeIE, DataCollection)
                    Call opNAV(ScavangeIE, "quit", "")
                    URL4Update = ""
                End If
            End If
            
            If Instructions = "New PAHR - HousingPlan Initiated" Then
                If Len(ID) = 15 Then
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID)
                    Call PAHR_Master((FetchField(ScavangeIE, "CF00Na000000B2Kf5_ileinner")(1)))
                    Call opNAV(ScavangeIE, "quit", "")
                    URL4Update = ""
                End If
            End If
            
           
            If Instructions = "Duplicate Housing Validations Part 11 - Fix Not Initiated Housing Plans" Then
                'URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2KhX=Not Started", "<ID>", ID)
                'Instead: Fix match on the Notificaiton and assessment before changing status back to not started.
                
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID)
                    
                PAX = PAXbasicInfo((FetchField(ScavangeIE, "CF00Na000000B2KhT_ileinner")(1)), "", "", 4)
                    'For i = 0 To UBound(PAX)
                     '   Debug.Print "+" & PAX(i, 0) & " = " & PAX(i, 1) & " | " & PAX(i, 2)
                    'Next i
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                    PAX(0, 1) = FetchField(ScavangeIE, "CF00Na000000B379K_lkid")(0)
                    Set DataCollection = New Collection
                        DataCollection.Add Array("00Na000000B2KhX", "Not Started")
                        Debug.Print "Assessment ID is " & PAX(0, 1)
                        DataCollection.Add Array("CF00Na0000009s14r_lkid", PAX(19, 2))
                    Call PushUpdates2Page(ScavangeIE, DataCollection)
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & PAX(0, 1) & "/e")
                    Set DataCollection = New Collection
                        DataCollection.Add Array("CF00Na000000B2KfU_lkid", PAX(29, 2))
                        DataCollection.Add Array("CF00Na000000B2Kfr_lkid", PAX(30, 2))
                        DataCollection.Add Array("CF00Na000000B2Kff_lkid", PAX(19, 2))
                    Call PushUpdates2Page(ScavangeIE, DataCollection)
                URL4Update = ""
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
            End If
          
            If Instructions = "Duplicate Housing Validations Part 15 - Housing Train Toot Toot" Then
                Call OmniHousing(ID)
                URL4Update = ""
            End If
          
            If Instructions = "Ask for Unit number after check-in Confirmation" Then
                Call Housing_InquireAboutApartment_Master(ID, Name)
                URL4Update = ""
            End If
            
            If Instructions = "Email PAX about uncooperative Landlord" Then
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                Call Housing_Email_PAX_about_Landlord_Followup((FetchField(ScavangeIE, "tsk3_lkid")(0)))
                Set DataCollection = New Collection
                    DataCollection.Add Array("tsk5", "PAX Emailed for Housing Followup")
                Debug.Print "Updating post email"
                Call PushUpdates2Page(ScavangeIE, DataCollection)
                URL4Update = ""
                
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
            End If
            
            If Instructions = "Recalculate All PAX on an Assessment" Then
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                Call Housing_Email_PAX_about_Landlord_Followup((FetchField(ScavangeIE, "tsk3_lkid")(0)))
                Set DataCollection = New Collection
                    DataCollection.Add Array("tsk5", "All PAX recalculated on " & Format(Now(), "mm/dd/yyyy  hh:nn"))
                Call PushUpdates2Page(ScavangeIE, DataCollection)
                URL4Update = ""
                
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
            End If
            
            
            If Instructions = "Critical Housing Plans - 00 Case Creation and 1st email" Then
                Set DataCollection = New Collection
                    DataCollection.Add Array("Account", "CF00Na0000009s148_ileinner")
                    DataCollection.Add Array("Placement Status", "00Na000000B2Fr2_ileinner")
                    DataCollection.Add Array("Cases", "_00Na000000B2eGh")
                PAX = Retrieve_Page_Info(ID, DataCollection)
                TFconfirmation = False 'should an email be sent?  No
                
                If PageInfoF(PAX, "Placement Status")(0) = "Not Placed" Then
                    Debug.Print "PAX has no Placement so doesn't need a PAHR case"
                Else
                    'find existing cases
                    CrawlInstruct = PageInfoF(PAX, "Cases")
                    Previous_Value = ""
                    If IsArray(CrawlInstruct(0)) Then
                        For i = 0 To UBound(CrawlInstruct)
                            If PageInfoF(CrawlInstruct(i), "Subject")(0) = "Pre-Arrival Housing (PAHR)" Then
                                Previous_Value = CrawlInstruct(i)(1)
                            End If
                        Next i
                    End If
                    
                    'setup pax info
                    PAX = Housing_Prep4PAX_Email(ID, Previous_Value, 14)
                    If Previous_Value = "" Then
                    'create a new case if one isn't found
                        TFconfirmation = True
                        Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh")
                        Set DataCollection = New Collection
                            DataCollection.Add Array("cas5", "Housing")
                            DataCollection.Add Array("cas11", "Email")
                            DataCollection.Add Array("cas7", "Closed")
                            DataCollection.Add Array("00N1300000BLavV", "00|Preparing to email 1st warning")
                            DataCollection.Add Array("cas14", "Pre-Arrival Housing (PAHR)")
                            DataCollection.Add Array("00N1300000BLavQ", Format(Now(), "mm/dd/yyyy"))
                            DataCollection.Add Array("cas21", "0")
                            DataCollection.Add Array("00Na000000B2eGd", "Program Cancellation Risk")
                            DataCollection.Add Array("CF00Na000000B2eGh_lkid", PAX(11, 2))
                            DataCollection.Add Array("CF00Na000000B2eGi_lkid", PAX(19, 2))
                            DataCollection.Add Array("CF00N1300000BOWTk_lkid", PAX(29, 2))
                            DataCollection.Add Array("cas3_lkid", PAX(20, 2))
                            DataCollection.Add Array("CF00Na000000B34SG_lkid", PAX(44, 2))
                        Previous_Value = Right(PushUpdates2Page(ScavangeIE, DataCollection), 15)
                        Debug.Print "case ID is " & Previous_Value
                        PAX(39, 2) = Previous_Value
                        PAX(39, 1) = Previous_Value
                    Else
                    'check to see if the email has already been sent
                    Set DataCollection = New Collection
                        DataCollection.Add Array("Reason Other", "00Na000000B2eGd")
                        DataCollection.Add Array("Next Step", "00N1300000BLavV")
                        DataCollection.Add Array("Activity History", "_RelatedHistoryList")
                    CrawlInstruct = Retrieve_Page_Info(Previous_Value, DataCollection)
                        If PageInfoF(CrawlInstruct, "Reason Other")(0) <> "Program Cancellation Risk" Then
                            TFconfirmation = True
                        Else
                            If PageInfoF(CrawlInstruct, "Next Step")(0) = "00|Preparing to email 1st warning" Then
                                TFconfirmation = True
                            End If
                        End If
                    End If
                    
                    If TFconfirmation Then
                        Set DataCollection = New Collection
                            DataCollection.Add Array("00N1300000BLavV", "02|Send Final Warning, CC Partner, Alert Fieldstaff")
                            DataCollection.Add Array("00N1300000BLavQ", PAX(40, 1))
                            DataCollection.Add Array("00Na000000B2eGd", "Program Cancellation Risk")
                        PAX = AddTemplate(PAX, FetchEmailTemplate("00X1B000001qahU"))
                        Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
                    Else
                    Debug.Print "Cancelation Risk email was not sent"
                    End If
                    Call opNAV(ScavangeIE, "quit", "")
                End If
                URL4Update = ""
            End If
            
            
            If Instructions = "Critical Housing Plans - 03 2nd Warning Email" Then
                If Len(Name) = 15 Then
                    Call PAHR_Master(ID)
                    
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & Name)
                    If left((FetchField(ScavangeIE, "00N1300000BLavV_ileinner")(0)), 3) = "02|" Then
                        'setup pax info
                        PAX = Housing_Prep4PAX_Email(ID, Name, 3)
    
                        Set DataCollection = New Collection
                            DataCollection.Add Array("00N1300000BLavV", "03|Transfer case to fieldstaff")
                            DataCollection.Add Array("00N1300000BLavQ", PAX(40, 1))
                        PAX = AddTemplate(PAX, FetchEmailTemplate("00X1B000001qahU"))
                        PAX(0, 1) = "<2Partner Email>"
                        PAX(1, 1) = "<2Account Manager>;"
                        
                        Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
                        
                        URL4Update = "https://na68.salesforce.com/" & Name & "/a?newOwn=Region&newOwn_lkid=" & PAX(37, 1)
                    End If
                Else
                Debug.Print "Case ID issue"
                URL4Update = ""
                End If
            End If
            
            If Instructions = "PAHR - Program Cancelation - Handoff cases to fieldstaff" Then
                Call PAHR_Master(ID)
                URL4Update = ""
                
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & Name)
                If left((FetchField(ScavangeIE, "00N1300000BLavV_ileinner")(0)), 3) = "03|" Then
                    
                    PAX = PAXbasicInfo(ID, Name, "", 4)
                    Set DataCollection = New Collection
                        DataCollection.Add Array("cas7", "Open")
                        DataCollection.Add Array("00N1300000BLavQ", PAX(5, 1))
                        DataCollection.Add Array("00N1300000BLavV", "05|PAX has not responded to warnings.")
                        DataCollection.Add Array("cas8", "High")
                        DataCollection.Add Array("cas7", "Open")
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & Name & "/e")
                    Call PushUpdates2Page(ScavangeIE, DataCollection)
                    Call opNAV(ScavangeIE, "quit", "")
                    URL4Update = "https://na68.salesforce.com/" & Name & "/a?newOwn=RegionalQueue&newOwn_lkid=" & PAX(37, 1)
                End If
            End If
            
          
            If Instructions = "Duplicate Housing Validations Part 13 - Rename Housing Validation Assessments to include year/season" Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
              
                CrawlInstruct = Array("00N1300000BLnhq", "00N1300000BLnhn")
                    For i = 0 To UBound(CrawlInstruct)
                        Set FieldInfo = Fetch_Fields(ScavangeIE, (CrawlInstruct(i)))
                        CrawlInstruct(i) = FieldInfo.Value
                    Next i
               
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&Name=WT Housing Validation - ", "<ID>", ID) & (CrawlInstruct(0)) & " " & (CrawlInstruct(1))
                ScavangeIE.Quit
               Set ScavangeIE = Nothing
            End If
          
            If Instructions = "Duplicate Housing Validations Part 14 - Hide Housing notifications for on program PAX" Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B379K_lkid")
                    Name = FieldInfo.Value
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2KgF=Complete&00Na000000B369A=PAX completed Check-In or is Cancelled", "<ID>", Name)
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                TFconfirmation = HitSave(ScavangeIE)
              
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2KhX=Not Initiated", "<ID>", ID)
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
            End If
          
            If Instructions = "Duplicate Housing Validations Part 12 - Add Landlord to Housing Assessment if missing" Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", Name)
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BLnhG_lkid")
                Previous_Value = FieldInfo.Value
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BLnhl=LandlordName&CF00N1300000BLnhl_lkid=", "<ID>", ID) & Previous_Value
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
            End If
       
            If Instructions = "Applications over Allocation Limit" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na0000009qGpE=Cancelled&00Na0000009rvXC=Failed requirements&00N1300000BR23h=Allocation Reached", "<ID>", ID)
            End If
            
            If Instructions = "Applications that have missed their deadline" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na0000009qGpE=Cancelled&00Na0000009rvXC=Failed requirements&00Na0000009rvXB=Missed deadline", "<ID>", ID)
            End If
       
            
            If Instructions = "Stamp Year/Season to Landlord Validation" Then
                Name = Replace(Name, "<td>", "", 1, -1, vbTextCompare)
                Name = Replace(Name, "</td>", "", 1, -1, vbTextCompare)
                Previous_Value = left(Name, 4)
                    If Previous_Value = "Test" Then
                        Previous_Value = "2015"
                    End If
                Name = Right(Name, Len(Name) - 4)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLnhn=", "<ID>", ID) & Previous_Value & "&00N1300000BLnhq=" & Name
            End If
     
        If Instructions = "Duplicate Housing Validations Part 10 - Remove duplicate sites from Landlord" Then
                Call MoveSite2Forest(ID)
                URL4Update = ""
            End If
          
    If Instructions = "RETIRED Overdue Check Ins 09 - TERMINATION" Then
           If Len(ID) = 15 Then
                PAX = PAXbasicInfo(Name, ID, "", 4)
                PAX(0, 1) = "<2RAM>; <2HC Service Lvl>; <2Partner Email>"
                PAX(1, 1) = "<2Fieldstaff>; eobregon@intraxinc.com; <2Account Manager>; "
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
         
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
         
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/50013000010icTo")
                Call Send_Email(PAX, False, False)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=New&cas15=&cas8=Critical&00N1300000BLavV=13|PAX should be terminated in SEVIS on duedate&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", ID)
                URL4Update = Openclick1(URL4Update, False)
                URL4Update = "https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Regional Queue&newOwn_lkid=" & PAX(37, 1)
                URL4Update = Replace(URL4Update, "<ID>", ID)
            End If
    End If
   
        If Instructions = "Overdue Check Ins 09 - TERMINATION" Then
           If Len(ID) = 15 Then
                PAX = PAXbasicInfo(Name, ID, "", 4)
               
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
          
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
               
                EmailTemplate = FetchEmailTemplate("00X1B000001qZac")
                PAX = AddTemplate(PAX, EmailTemplate)
                
                Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavQ", PAX(40, 1))
                    DataCollection.Add Array("cas7", "New")
                    DataCollection.Add Array("cas8", "Critical")
                    DataCollection.Add Array("00N1300000BLavV", "13|PAX should be terminated in SEVIS on duedate")
                    DataCollection.Add Array("cas7", "New")
         
                Call Send_HTMLEmail(PAX, "IWTSupport", DataCollection)
         
                URL4Update = "https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Regional Queue&newOwn_lkid=" & PAX(37, 1)
                URL4Update = Replace(URL4Update, "<ID>", ID)
            End If
        End If
        
        If Instructions = "Request Housing for Confirmed not yet filled out Housing Plans" Then
           If Len(ID) = 15 Then
                PAX = Housing_Prep4PAX_Email(ID, Name, 5)

                PAX = AddTemplate(PAX, FetchEmailTemplate("00X1B000001qaHq"))
                
                Set DataCollection = New Collection
                    DataCollection.Add Array("00Na000000B369A", "Reminder sent on:" & Format(Now(), "mm/dd/yyyy"))
                
                If Len(PAX(44, 2)) = 15 Then
                Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
                Else
                MsgBox "PAX missing Housing Plan Assessment", , "Error"
                End If
         
                URL4Update = ""
            End If
        End If
        
        If Instructions = "RETIRED Cancellation Risk due to lack of Housing Plan" Then
            If Len(ID) = 15 Then
                PAX = Housing_Prep4PAX_Email(ID, "", 21)
                
                'Find exising PAHR Case
                Set DataCollection = Pull_Master_Child(ID, "CF00Na000000B2eGh", "500")
                URL4Update = ""
                    If UBound(DataCollection(2)(1)) > 0 Then
                        For i = 2 To DataCollection.count
                            If DataCollection(i)(3)(0) = "Pre-Arrival Housing (PAHR)" Then
                                URL4Update = DataCollection(i)(3)(1)
                            End If
                        Next i
                    End If
            If Len(PAX(44, 2)) = 15 Then
                If URL4Update = "" Then
                'create new PAHR case
                    Set DataCollection = New Collection
                        DataCollection.Add Array("cas5", "Housing")
                        DataCollection.Add Array("cas11", "Email")
                        DataCollection.Add Array("cas7", "Closed")
                        DataCollection.Add Array("cas14", "Pre-Arrival Housing (PAHR)")
                        DataCollection.Add Array("cas21", "0")
                        DataCollection.Add Array("CF00Na000000B2eGh_lkid", PAX(11, 2))
                        DataCollection.Add Array("CF00Na000000B2eGi_lkid", PAX(19, 2))
                        DataCollection.Add Array("CF00N1300000BOWTk_lkid", PAX(29, 2))
                        DataCollection.Add Array("cas3_lkid", PAX(20, 2))
                        DataCollection.Add Array("CF00Na000000B34SG_lkid", PAX(44, 2))
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh")
                    URL4Update = Right(PushUpdates2Page(ScavangeIE, DataCollection), 15)
                    Call opNAV(ScavangeIE, "Quit", "")
                End If
                
                PAX(39, 2) = URL4Update
                PAX = AddTemplate(PAX, FetchEmailTemplate("00X1B000001qaWM"))
                
                Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavQ", PAX(40, 1))
                    DataCollection.Add Array("cas7", "Wait External")
                    DataCollection.Add Array("00N1300000BLavV", "Housing Plan is PASSED DUE")
            
                Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
            End If
                URL4Update = ""
            End If
        End If
        
        
        
        
    If Instructions = "Create Housing Plan PAHR Case" Then
           If Len(ID) = 15 Then
                'ID = Right(ID, 15)
                'MsgBox ID & " | | " & name, , "input"
                PAX = PAXbasicInfo(ID, "", "", 4)
                'fetch list of cases
                Set DataCollection = FindRecordDetails(Pull_Master_Child(ID, "CF00Na000000B2eGh", "500"))
                'check for PAHR case existance
   
                For i = 2 To DataCollection.count
                    If DataCollection(i).count > 2 Then
                        If DataCollection(i)(3)(0) = "Pre-Arrival Housing (PAHR)" Then
                            PAX(39, 1) = DataCollection(i)(3)(1)
                        End If
                        'return the case ID which is like row(3)(1)
                    End If
                Next i
       
                
                Set DataCollection = FindRecordDetails(Pull_Master_Child(ID, "00Na000000B2Kf5", "a1l"))
                'get list of Assessments
                For i = 2 To DataCollection.count
                    If DataCollection(i).count > 2 Then
                        If DataCollection(i)(3)(0) = "WT PT Housing Plan" Then
                            PAX(45, 1) = DataCollection(i)(2)(1)
                        End If
                    
                        'If DataCollection(i)(3)(0) = "WT Housing Validation" Then
                         '   PAX(45, 2) = DataCollection(i)(2)(1)
                        'End If
                    End If
                        'check again for WT PT Housing Plan and assume it found validations first
                Next i
            
               ' MsgBox PAX(45, 1) & " | " & PAX(45, 2)
                'if no PAHR case we'll need the PAXInfo to Create one
                'Let's presume a case ID means there's a case and if blank we need to make one
                    If PAX(39, 1) = "" Then
                        'create new case
                        Previous_Value = ""
                        If PAX(45, 1) <> "" Then
                        Previous_Value = PAX(45, 2)
                        End If
                   
                        If Previous_Value <> "" Then
                            'make sure there's any sort of housing plan
                            Previous_Value = "&CF00Na000000B34SG=A&CF00Na000000B34SG_lkid=" & Previous_Value
                        Else
                            Previous_Value = "&cas15=Housing Notification could not be found"
                        End If
                        URL4Update = "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh&cas5=Housing&00Na000000B3Ieg=Landlord&cas11=Web&cas14=Pre-Arrival Housing (PAHR)&cas3=C&cas3_lkid=" & PAX(20, 2) & "&CF00Na000000B2eGh=E&CF00Na000000B2eGh_lkid=" & PAX(11, 2) & Previous_Value
                        If PAX(19, 2) <> "" Then
                            'make sure there's a match
                            URL4Update = URL4Update & "&CF00Na000000B2eGi=M&CF00Na000000B2eGi_lkid=" & PAX(19, 2)
                        End If
                    End If
            End If
    End If
    If Instructions = "Assign Housing Plan PAHR Case back to Andrew" Then
        If Len(ID) = 15 Then
            URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=NewOwner&newOwn_lkid=0051300000BT4mM", "<ID>", ID)
        End If
    End If
    
    If Instructions = "Proccess CheckIns - Confirmed" Then
        If Len(ID) = 15 Then
            Call Proccess_CheckIn(ID)
            URL4Update = ""
        End If
    End If
    
    If Instructions = "Disable Japan's Housing Plans" Then
        If Len(ID) = 15 Then
            Call PAHR_Fix_Japan_Housing_Plans(ID)
            URL4Update = ""
        End If
    End If
    
    
    If Instructions = "Screen IsCurrent housing" Then
        If Len(ID) = 15 Then
            Call Proccess_IsCurrent_Address(ID)
            URL4Update = ""
        End If
    End If
    
    If Instructions = "Re-assign PAHR cases to Fieldstaff 05|" Then
        If Len(ID) = 15 Then
            PAX = PAXbasicInfo(ID, Name, "", 4)
            URL4Update = "https://na68.salesforce.com/" & Name & "/a?newOwn=RegionalQueue&newOwn_lkid=" & PAX(37, 1)
        End If
    End If
 

    If Instructions = "De-Dup Blacklisted landlords" Then
        If Len(ID) = 15 Then
       
            Set ScavangeIE = CreateObject("InternetExplorer.Application")
            ScavangeIE.Visible = False
            'Street, street2, city, state, postal code, address comments, landlord name
            CrawlInstruct = Get_Site_Details(ScavangeIE, ID)
       
            EmailTemplate = AddressParse((CrawlInstruct(0)), (CrawlInstruct(1)), (CrawlInstruct(2)), (CrawlInstruct(3)), (CrawlInstruct(4)))
            'this takes the address parsing results and picks out the components I want to search
           Previous_Value = EmailTemplate(0) & "%20" & EmailTemplate(2) & "%20" & EmailTemplate(3) & "*%20" & "%20" & EmailTemplate(7) & "%20" & EmailTemplate(8)
            Set CollectedResults = SFDC_Search_Table(Previous_Value, "a0c")
            'MsgBox CollectedResults.Count & " matches found", , "Debugging"
            Set DataCollection = New Collection
            URL4Update = CollectedResults.count
            If CollectedResults.count > 1 Then
                For i = 2 To CollectedResults.count
                    URL4Update = CollectedResults(i)(2)(0)
                    CrawlInstruct = Get_Site_Details(ScavangeIE, (CollectedResults(i)(2)(1)))
                    EmailTemplate = AddressParse((CrawlInstruct(0)), (CrawlInstruct(1)), (CrawlInstruct(2)), (CrawlInstruct(3)), (CrawlInstruct(4)))
                    'skip if the address comments isn't blank
                   Range("F" & Current_Row).Value = "|" & CrawlInstruct(5) & "|"
                    If CollectedResults(i)(2)(1) = ID Then
                        'MsgBox CrawlInstruct(4) & "|" & CrawlInstruct(5) & "|" & CrawlInstruct(6), , "Blacklisted comment"
                    End If
                    If CrawlInstruct(6) <> "" Then
                        'MsgBox "landlord is " & CrawlInstruct(6), , "Debugging"
                    End If
                    If CrawlInstruct(5) = "" Then
                        'MsgBox CollectedResults(i)(2)(1) & " | " & CrawlInstruct(5), , "ID of current housing"
                        DataCollection.Add Array(CollectedResults(i)(2)(1), EmailTemplate)
                    End If
                Next i
            End If
            'HouseNumber, Quadrant,StreetName,StreetDesignation,CardinalDirection,Unit#,UnitDesignation,City, State, ZIP, ISRoute?, IsMilemarker, IsPOBOX
            '     0          1         2            3                    4           5           6       7       8    9     10          11          12
       
            Previous_Value = EmailTemplate(0) & EmailTemplate(2) & EmailTemplate(3) & EmailTemplate(4) & EmailTemplate(7) & EmailTemplate(8)
            'MsgBox "starting saving", , "Debugging"
            For Each AddressResult In DataCollection
                Due_Date = AddressResult(1)(0) & AddressResult(1)(2) & AddressResult(1)(3) & AddressResult(1)(4) & AddressResult(1)(7) & AddressResult(1)(8)
                'MsgBox Due_Date & " vs " & Previous_Value, , "Debugging address found"
                If Previous_Value = Due_Date Then
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", AddressResult(0)) & "&00N1300000BLnh3=Redirect: " & ID
                    URL4Update = Openclick1(URL4Update, False)
                End If
            Next AddressResult
       
            URL4Update = ""
            ScavangeIE.Quit
            Set ScavangeIE = Nothing
        End If
    End If
    If Instructions = "Update Housing Status on PAHR Case" Then
        If Len(ID) = 15 Then
            If InStr(1, Name, "Not Yet Started</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Plan is not yet started."
            End If
        
            If InStr(1, Name, "Complete</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Plan is submitted and awaiting review."
            End If
       
            If InStr(1, Name, "Incomplete</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Plan is started but incomplete."
            End If
            If InStr(1, Name, "Confirmed</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Plan is confirmed and awaiting landlord validation phase."
            End If
       
            Georange(1, 1) = InStr(1, Name, "<td>", vbTextCompare) + 3
            Georange(1, 2) = InStr(Georange(1, 1), Name, "</td>", vbTextCompare)
       
            If Georange(1, 2) - Georange(1, 1) > 10 Then
                Previous_Value = Previous_Value & "  PAX indicated " & Mid(Name, Georange(1, 1) + 1, Georange(1, 2) - Georange(1, 1) - 1)
            End If
       
            If InStr(1, Name, "Confirmed</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Plan is confirmed and awaiting landlord validation phase."
            End If
       
            URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas15=", "<ID>", ID) & Previous_Value
        End If
    End If
    If Instructions = "Update Housing Status on PAHR Case v2 The Validation" Then
        If Len(ID) = 15 Then
   
            If InStr(1, Name, "Not Yet Started</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Validation awaiting interview with landlord."
            End If
            If InStr(1, Name, "Complete</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Validation has been completed but not yet approved."
            End If
       
            If InStr(1, Name, "Incomplete</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing Validation is in progress but not yet complete."
            End If
            If InStr(1, Name, "Confirmed</td><td>Positive</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing has been approved."
            End If
            If InStr(1, Name, "Confirmed</td><td>Rejected</td>", vbTextCompare) > 0 Then
                Previous_Value = "Housing has been rejected."
            End If
       
            
            Georange(1, 0) = InStr(1, Name, "<td>", vbTextCompare) + 3
            Georange(1, 1) = InStr(Georange(1, 0), Name, "<td>", vbTextCompare) + 3
            Georange(1, 2) = InStr(Georange(1, 1), Name, "<td>", vbTextCompare) + 3
            Georange(0, 0) = InStr(Georange(1, 2), Name, "<td>", vbTextCompare) + 3
            Georange(0, 1) = Len(Name)
       
            If Georange(0, 0) - Georange(1, 2) > 10 Then
                Previous_Value = Previous_Value & "  Validation Performed by: " & Mid(Name, Georange(1, 2) + 1, Georange(0, 0) - Georange(1, 2) - 9)
            End If
       
            If Georange(0, 1) - Georange(0, 0) > 4 Then
                Previous_Value = Previous_Value & "  Validation Notes: " & Mid(Name, Georange(0, 0) + 1, Georange(0, 1) - Georange(0, 0))
            End If
       
            URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas15=", "<ID>", ID) & Previous_Value
        End If
    End If
    If Instructions = "Find Housing Plan for Cases Missing them" Then
    Set DataCollection = FindRecordDetails(Pull_Master_Child(ID, "00Na000000B2Kf5", "a1l"))
                'get list of Assessments
                Previous_Value = ""
                For i = 2 To DataCollection.count
                    If DataCollection(i).count > 2 Then
                        If DataCollection(i)(3)(0) = "WT PT Housing Plan" Then
                            Previous_Value = DataCollection(i)(2)(1)
                        End If
                    End If
                Next i
            If Len(Previous_Value) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00Na000000B34SG=HousingPlan&CF00Na000000B34SG_lkid=", "<ID>", Name) & Previous_Value
            Else
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas15=Housing Notification could not be found", "<ID>", Name)
            End If
    End If
  
    If Instructions = "Upgrade PAHR Case to Housing Validation" Then
        If Len(ID) = 15 Then
         'get accomodations
         URL4Update = ""
   
         Set DataCollection = FindRecordDetails(Pull_Master_Child(Name, "CF00Na000000B2kKt", "a0T"))
   
         For i = 2 To DataCollection.count
         'Get the ID of the correct accomodation
             If DataCollection(i).count > 2 Then
                 If DataCollection(i)(5)(0) = "CHECKED" Then
                     URL4Update = DataCollection(i)(2)(1)
                 End If
             End If
         Next i
        
         If URL4Update <> "" Then
              Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & URL4Update)
              Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BLnhS_ileinner")
        
              URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                 If Len(URL4Update) = 15 Then
                      URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00Na000000B34SG=HousingValidation&CF00Na000000B34SG_lkid=", "<ID>", ID) & URL4Update
                  Else
                      URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas15=Housing Plan is Confirmed but Landlord Validation not found/does not exist", "<ID>", ID)
                  End If
              ScavangeIE.Quit
              Set ScavangeIE = Nothing
         End If
        End If
    End If
 
    'Unapproved Termination Email for Overdue MC
    If Instructions = "Overdue Monthly Contact 10 - TERMINATION" Then
           If Len(ID) = 15 Then
                PAX = PAXbasicInfo(Name, ID, "", 4)
                PAX(0, 1) = "<2RAM>; <2HC Service Lvl>; <2Partner Email>"
                PAX(1, 1) = "<2Fieldstaff>; eobregon@intraxinc.com; <2Account Manager>; "
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
         
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
         
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/5001B000011nbF8")
                Call Send_Email(PAX, False, False)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=New&cas15=&cas8=Critical&00N1300000BLavV=13|PAX should be terminated in SEVIS on duedate&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", ID)
           End If
    End If
 
        If Instructions = "Followup Apartment Number Emails" Then
           If Len(ID) = 15 Then
                PAX = PAXbasicInfo(Name, ID, "", 2)
          
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/50013000010mGhm")
                Call Send_Email(PAX, True, True)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=New&cas15=&cas8=Critical&00N1300000BLavV=02|Await Followup&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", ID)
            End If
    End If
     
            
    If Instructions = "Retired - Overdue Check Ins 09 - TERMINATION" Then
        PAX = PAXbasicInfo(Name, ID, "", 4)
 
        Set ScavangeIE = CreateObject("InternetExplorer.Application")
        ScavangeIE.Visible = False
 
        URL4Update = "https://na68.salesforce.com/" & ID
        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
        Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2eGi_ileinner")
            If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                PAX(19, 2) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
            Else
                PAX(19, 2) = FieldInfo.innerhtml
            End If
        'URL4Update = URL4Update & "/e?retURL=" & ID & "&00N1300000BLavV=10|Preparing for Termination email"
 
        
                                        'This case contains the specific template for the letter
                                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/50013000010js8n")
                                        ScavangeIE.Visible = False
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "cas15_ileinner")
                                                LetterTemplate = Replace(FieldInfo.innerhtml, "<br>", "")
                                        'PAX(3, 1) = "<br><br><br>" & PAX_InfoGrid((PAX(8, 1)), (PAX(4, 1)), (PAX(11, 2)), ID, (PAX(17, 1)), (PAX(10, 1)), (PAX(29, 1)), (PAX(9, 1)), (PAX(6, 1)), (PAX(6, 1)))
                                        'MsgBox PAX(3, 1), , "pax info"
                                        PAX(3, 1) = LetterTemplate & PAX(3, 2)
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "cas14_ileinner")
                                                PAX(2, 1) = FieldInfo.innerhtml
                                                  
                                        PAX(3, 1) = FixHTML((PAX(3, 1)))
                                        PAX(2, 1) = FixHTML((PAX(2, 1)))
                                 
 
                                        URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=09|The below email will be sent on the duedate", "<ID>", ID)
                                 
                                        LetterTemplate = "To: <1Contact ID> (<2Contact ID>)<br>CC: <2Partner Email>; <2HC Service Lvl><br>BCC: eobregon@intraxinc.com; <2Account Manager>; <2RAM>; <2Fieldstaff><br>Subject: " & PAX(2, 1) & "<br>Body:<br>" & PAX(3, 1)
                                        LetterTemplate = Replace(LetterTemplate, "<br>", Chr(13), 1, -1, vbTextCompare)
                                   
                                        For i = 0 To 38
                                            Previous_Value = "<1" & PAX(i, 0) & ">"
                                            LetterTemplate = Replace(LetterTemplate, Previous_Value, PAX(i, 1), 1, , vbTextCompare)
                                            Previous_Value = "<2" & PAX(i, 0) & ">"
                                            LetterTemplate = Replace(LetterTemplate, Previous_Value, PAX(i, 2), 1, , vbTextCompare)
                                        Next i
                                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                        Set FieldInfo = ScavangeIE.document.getelementsbytagname("textarea")
                                    For Each Result In FieldInfo
                                            If Result.ID = "cas15" Then
                                                Result.Value = LetterTemplate
                                            End If
                                    Next Result
                                            'ScavangeIE.Visible = True
                                            'MsgBox "This should update the case", , "Stop"
                                            ScavangeIE.Visible = False
                                            Set FieldInfo = ScavangeIE.document.getelementsbyclassname("btn")
                                     
                                            'For Each Item In fieldINFO
                                            FieldInfo.Item(0).Click
                                            'GoTo SaveTerminationSampleCase
                                            'Next Item
                                            Application.Wait (Now + #12:00:01 AM#)
                                            Do While ScavangeIE.busy
                                            Loop
                               
                                            LetterTemplate = ""
                                            PAX = Array("")
                                            ScavangeIE.Quit
                                            Set ScavangeIE = Nothing
    End If
     
            
            If Instructions = "Overdue Check Ins 03 - Set duedate" Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
         
                URL4Update = ID
         
                'match, Position, Opp, contact, email
                CrawlInstruct = Array("CF00Na000000B2eGi_ileinner", "CF00N30000008REJy_ileinner", "CF00N30000008RES7_ileinner", "CF00Na0000009rUSE_ileinner", "con15_ileinner")
                distance = 0
                For Each Field In CrawlInstruct
                    URL4Update = "https://na68.salesforce.com/" & URL4Update
                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                    Set FieldInfo = Fetch_Fields(ScavangeIE, (Field))
                    URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                    matrix(distance, 0) = FieldInfo.innerhtml
                    distance = distance + 1
                    If Field = "CF00N30000008REJy_ileinner" Then
                        'date
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na0000009qRci_ileinner")
                        matrix(0, 1) = FieldInfo.innerhtml
                        'HC name
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BOCaF_ileinner")
                        Previous_Value = FieldInfo.innerhtml
                        Length = InStr(1, Previous_Value, ">", vbTextCompare) + 1
                        matrix(1, 1) = Mid(Previous_Value, Length, InStr(1, Previous_Value, "</a>", vbTextCompare) - Length)
                    End If
             
                    If Field = "CF00N30000008RES7_ileinner" Then
                        'State
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00N30000008RCsv_ileinner")
                        matrix(11, 0) = FieldInfo.innerhtml
                    End If
             
                    If Field = "CF00Na0000009rUSE_ileinner" Then
                        'HC Service level on Opp
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00N30000007CyH2_ileinner")
                        matrix(2, 1) = FieldInfo.innerhtml
                    End If
             
                Next Field
                Length = InStr(1, matrix(4, 0), ">", vbTextCompare) + 1
                matrix(3, 1) = Mid(matrix(4, 0), Length, Len(matrix(4, 0)) - Length - 3)
                Due_Date = DateAdd("d", 15, matrix(0, 1))
                'URL4Update = "04|On " & Due_Date & " the " & matrix(2, 1) & " HC," & matrix(1, 1) & ", will be email at " & matrix(3, 1)
                    If matrix(2, 1) <> "Independent" Then
                    'this will set the email to the RAM instead of the HC manager based on the state we got from the position
                    URL4Update = matrix(11, 0)
                    RegionResolution = LoadRAMtable()
                        For i = 0 To 50
                            If matrix(11, 0) = RegionResolution(i, 0) Then
                            'MsgBox "State: " & matrix(11, 0) & " - " & i & " - email: " & RegionResolution(i, 0)
                            Previous_Value = RegionResolution(i, 2)
                            End If
                        Next i
                    Else
                    Previous_Value = matrix(3, 1)
                    End If
         
                URL4Update = "04|On the due date the below email will be sent to the PAX and to the " & matrix(2, 1) & " HC at " & Previous_Value
                URL4Update = Clean_Text4URL(URL4Update)
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=", "<ID>", ID) & URL4Update & "&00N1300000BLavQ=" & Due_Date
          
                'Build the email
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/" & ID)
                Set FieldInfo = Fetch_Fields(ScavangeIE, "cas3_ileinner")
                'Contact ID for Student
                    matrix(4, 1) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                    Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                'PAX's Name
                    matrix(5, 1) = WorksheetFunction.Proper(Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length))
             
                 Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BOWTl_ileinner")
                 Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                'Partner Name
                    matrix(7, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
              
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/" & Name)
                Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2Kgi_ileinner")
                'Gender
                    matrix(8, 1) = FieldInfo.innerhtml
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2eH2_ileinner")
                'SEVIS ID
                    matrix(9, 1) = FieldInfo.innerhtml
                'Intrad ID
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2kL8_ileinner")
                    matrix(10, 1) = FieldInfo.innerhtml
                'PAX's Service level
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2tGX_ileinner")
                    matrix(11, 1) = FieldInfo.innerhtml
             
                    
                    
                'Open edit screen with updates and write letter to description
         
                'This case contains the specific template for the letter
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/50013000010iN56")
                ScavangeIE.Visible = False
         
                LetterTemplate = "=====" & matrix(10, 1) & "==============================================="
                LetterTemplate = LetterTemplate & Chr(13) & matrix(5, 1) & ": https://na68.salesforce.com/" & Name & Chr(13) & "Case: https://na68.salesforce.com/" & ID & Chr(13) & "Service Level: " & matrix(11, 1) & Chr(13) & "SEVIS Id: " & matrix(9, 1)
                LetterTemplate = LetterTemplate & Chr(13) & "Employer: " & matrix(1, 1) & Chr(13) & "Partner: " & matrix(7, 1) & Chr(13) & "============================================================="
         
                Set FieldInfo = Fetch_Fields(ScavangeIE, "cas15_ileinner")
                        LetterTemplate = FieldInfo.innerhtml & Chr(13) & Chr(13) & LetterTemplate
                Set FieldInfo = Fetch_Fields(ScavangeIE, "cas14_ileinner")
                        matrix(6, 1) = FieldInfo.innerhtml
          
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
         
                Set FieldInfo = ScavangeIE.document.getelementsbytagname("textarea")
                    For Each Result In FieldInfo
                    LetterTemplate = Replace(LetterTemplate, "&lt;PAX&gt;", matrix(5, 1))
                    matrix(6, 1) = Replace(matrix(6, 1), "&lt;PARTNER&gt;", matrix(7, 1))
                    matrix(6, 1) = Replace(matrix(6, 1), "&lt;HC&gt;", matrix(1, 1))
                    LetterTemplate = Replace(LetterTemplate, "<br>", "")
              
                    Result.Value = "To: " & matrix(4, 1) & Chr(13) & "CC: " & Previous_Value & Chr(13) & "Subject: " & matrix(6, 1) & Chr(13) & "Body: " & Chr(13) & LetterTemplate
                    Next Result
         
                Set FieldInfo = ScavangeIE.document.getelementsbyclassname("btn")
                FieldInfo.Item(0).Click
                'wait for save
         
                    Do While ScavangeIE.busy
                    Loop
         
                ScavangeIE.Quit
               Set ScavangeIE = Nothing
            End If
     
            
                                
                                If Instructions = "Overdue Check Ins 04 - Send Email" Then
                                    Set ScavangeIE = CreateObject("InternetExplorer.Application")
                                    ScavangeIE.Visible = False
                                
                                    RegionResolution = LoadRAMtable()
                                    URL4Update = ID
                              
                                    'match, Position, Opp, contact, email
                                   CrawlInstruct = Array("CF00Na000000B2eGi_ileinner", "CF00N30000008REJy_ileinner", "CF00N30000008RES7_ileinner", "CF00Na0000009rUSE_ileinner", "con15_ileinner")
                                    distance = 0
                                    For Each Field In CrawlInstruct
                                        URL4Update = "https://na68.salesforce.com/" & URL4Update
                                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, (Field))
                                        URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                                        matrix(distance, 0) = FieldInfo.innerhtml
                                        distance = distance + 1
                                        If Field = "CF00N30000008REJy_ileinner" Then
                                            'date
                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na0000009qRci_ileinner")
                                            matrix(0, 1) = FieldInfo.innerhtml
                                            'HC name
                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BOCaF_ileinner")
                                            Previous_Value = FieldInfo.innerhtml
                                            Length = InStr(1, Previous_Value, ">", vbTextCompare) + 1
                                            matrix(1, 1) = Mid(Previous_Value, Length, InStr(1, Previous_Value, "</a>", vbTextCompare) - Length)
                                        End If
                                   
                                        If Field = "CF00N30000008RES7_ileinner" Then
                                            'State
                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "00N30000008RCsv_ileinner")
                                           matrix(11, 0) = FieldInfo.innerhtml
                                        End If
                                 
                                        If Field = "CF00Na0000009rUSE_ileinner" Then
                                            'HC Service level on Opp
                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "00N30000007CyH2_ileinner")
                                            matrix(2, 1) = FieldInfo.innerhtml
                                       End If
                                  
                                    Next Field
                                    Length = InStr(1, matrix(4, 0), ">", vbTextCompare) + 1
                                    matrix(3, 1) = Mid(matrix(4, 0), Length, Len(matrix(4, 0)) - Length - 3)
                                    Due_Date = DateAdd("d", 15, matrix(0, 1))
                                    'URL4Update = "04|On " & Due_Date & " the " & matrix(2, 1) & " HC," & matrix(1, 1) & ", will be email at " & matrix(3, 1)
                                        If matrix(2, 1) <> "Independent" Then
                                        'this will set the email to the RAM instead of the HC manager based on the state we got from the position
                                        URL4Update = matrix(11, 0)
                                 
                                            For i = 0 To 50
                                                If matrix(11, 0) = RegionResolution(i, 0) Then
                                                Previous_Value = RegionResolution(i, 2)
                                                End If
                                            Next i
                                        Else
                                        Previous_Value = matrix(3, 1)
                                        End If
                             
                                    URL4Update = "04|On the due date the below email will be sent to the PAX and to the " & matrix(2, 1) & " HC at " & Previous_Value
                                    URL4Update = Clean_Text4URL(URL4Update)
              
                                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=05|Sending+Email...", "<ID>", ID)
                                    URL4Update = Openclick1(URL4Update, False)
                              
                                    'Build the email
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/" & ID)
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "cas3_ileinner")
                                   'Contact ID for Student
                                        matrix(4, 1) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                                        Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                                    'PAX's Name
                                        matrix(5, 1) = WorksheetFunction.Proper(Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length))
                                   
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00N1300000BLavQ_ileinner")
                                        'Current Due Date
                                        matrix(0, 1) = FieldInfo.innerhtml
                                    
                                     Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BOWTl_ileinner")
                                     Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                                    'Partner Name
                                        matrix(7, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
                                  
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/" & Name)
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2Kgi_ileinner")
                                    'Gender
                                        matrix(8, 1) = FieldInfo.innerhtml
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2eH2_ileinner")
                                    'SEVIS ID
                                        matrix(9, 1) = FieldInfo.innerhtml
                                    'Intrad ID
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2kL8_ileinner")
                                        matrix(10, 1) = FieldInfo.innerhtml
                                    'PAX's Service level
                                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2tGX_ileinner")
                                        matrix(11, 1) = FieldInfo.innerhtml
                                    
                                    'Open edit screen with updates and write letter to description
                             
                                    'This case contains the specific template for the letter
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/50013000010iN56")
                                    ScavangeIE.Visible = False
                             
                                    LetterTemplate = PAX_InfoGrid(matrix(10, 1), matrix(5, 1), Name, ID, matrix(11, 1), matrix(9, 1), matrix(1, 1), matrix(7, 1), "", "")
                             
 
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "cas15_ileinner")
                                            LetterTemplate = FieldInfo.innerhtml & Chr(13) & Chr(13) & LetterTemplate
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "cas14_ileinner")
                                            matrix(6, 1) = FieldInfo.innerhtml
                             
                                    URL4Update = Replace("https://na68.salesforce.com/_ui/core/email/author/EmailAuthor?p2_lkid=" & matrix(4, 1) & "&rtype=003&p3_lkid=<ID>&retURL=<ID>&p7=AOMC_Unique&p26=""Work Travel Notification Support"" <iwtsupport@intraxinc.com>&p24=", "<ID>", ID) & Previous_Value
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                             
                                    Set FieldInfo = ScavangeIE.document.getelementsbytagname("textarea")
                             
                                        LetterTemplate = Replace(LetterTemplate, "&lt;PAX&gt;", matrix(5, 1))
                                        matrix(6, 1) = Replace(matrix(6, 1), "&lt;PARTNER&gt;", matrix(7, 1))
                                        matrix(6, 1) = Replace(matrix(6, 1), "&lt;HC&gt;", matrix(1, 1))
                                        LetterTemplate = Replace(LetterTemplate, "<br>", "")
                                 
                                        For Each Result In FieldInfo
                                 
                                        If Result.ID = "p7" Then
                                        'MsgBox result.ID, , "Page body things"
                                        Result.Value = LetterTemplate
                                        End If
                                        Next Result
                                   
                                    Set FieldInfo = ScavangeIE.document.getelementsbytagname("input")
                             
                                        For Each Result In FieldInfo
                                            If Result.ID = "p6" Then
                                            Result.Value = matrix(6, 1)
                                            End If
                                        Next Result
                                    ScavangeIE.Visible = True
                                    MsgBox "Verify and Send email.  Once completed press OK.  To cancel procedure lost the window and press ok.", , "Test Stop"
                                    'Set fieldINFO = ScavangeIE.document.getelementsbyclassname("btn")
                                    'fieldINFO.Item(0).Click
                                    'wait for save
                               
                                        Do While ScavangeIE.busy
                                        Loop
                                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=07|Email Confirmed", "<ID>", ID)
                                    URL4Update = Openclick1(URL4Update, False)
                                                                                              
                                    'This case contains the specific template for the letter
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/50013000010icTo")
                                    ScavangeIE.Visible = False
                               
                                    LetterTemplate = PAX_InfoGrid(matrix(10, 1), matrix(5, 1), Name, ID, matrix(11, 1), matrix(9, 1), matrix(1, 1), matrix(7, 1), "", "")
                             
 
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "cas15_ileinner")
                                            LetterTemplate = FieldInfo.innerhtml & Chr(13) & Chr(13) & LetterTemplate
                                    Set FieldInfo = Fetch_Fields(ScavangeIE, "cas14_ileinner")
                                            matrix(6, 1) = FieldInfo.innerhtml
                               
 
                                       
                                    URL4Update = "09|On the due date the below TERMINATION will be sent to the PAX and to the " & matrix(2, 1) & " HC at " & Previous_Value & " Plus the RAM,FS,AM, Partner and E."
                                    URL4Update = Clean_Text4URL(URL4Update)
                                    matrix(0, 1) = DateAdd("d", 10, matrix(0, 1))
                                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Wait+External&00N1300000BLavV=", "<ID>", ID) & URL4Update & "&00N1300000BLavQ=" & matrix(0, 1)
                             
                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                    Set FieldInfo = ScavangeIE.document.getelementsbytagname("textarea")
                             
                                        LetterTemplate = Replace(LetterTemplate, "&lt;PAX&gt;", matrix(5, 1))
                                        LetterTemplate = Replace(LetterTemplate, "<br>", "")
                                        matrix(6, 1) = Replace(matrix(6, 1), "&lt;PARTNER&gt;", matrix(7, 1))
                                        matrix(6, 1) = Replace(matrix(6, 1), "&lt;HC&gt;", matrix(1, 1))
                                   
                                        FieldInfo(0).Value = "To: " & matrix(4, 1) & Chr(13) & "CC: " & Previous_Value & Chr(13) & "Subject: " & matrix(6, 1) & Chr(13) & "Body: " & Chr(13) & LetterTemplate
                                   
                                        'save the update
                                        Set FieldInfo = ScavangeIE.document.getelementsbyclassname("btn")
                                        FieldInfo.Item(0).Click
                                        'wait for save
                                            Do While ScavangeIE.busy
                                            Loop
                                                          
                                    'and now change case owner to
                                            For i = 0 To 50
                                                If matrix(11, 0) = RegionResolution(i, 0) Then
                                                Previous_Value = (RegionResolution(i, 3))
                                                End If
                                            Next i
                                        URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Queue&newOwn_lkid=", "<ID>", ID) & Previous_Value
                                                           
                                    ScavangeIE.Quit
                                    Set ScavangeIE = Nothing
                                End If
                         
            If Instructions = "Revised Overdue Check Ins 04 - Send Email" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(Name, ID, "", 4)
                    PAX(0, 1) = "<2HC Service Lvl>"
              
                    Due_Date = Format(Now(), "MM/DD/YYYY")
                    Due_Date = DateAdd("d", 5, Due_Date)
             
                    PAX(40, 1) = Due_Date
                    PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
             
                    EmailTemplate = FetchEmailTemplate("00X13000002Fga5")
                    PAX = AddTemplate(PAX, EmailTemplate)
                   
                    Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavQ", PAX(40, 1))
                    DataCollection.Add Array("00N1300000BLavV", "09|PAX will recieve TERMINATION email on duedate")
                   
                    Call Send_HTMLEmail(PAX, "NoReply", DataCollection, False)
   
                    URL4Update = ""
                End If
            End If
     
            If Instructions = "Send Job Confirmation Email" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, "", Name, 4)
                    'PAX(0, 1) = "<2HC Service Lvl>"
                    Due_Date = Format(Now(), "MM/DD/YYYY")
             
                    EmailTemplate = FetchEmailTemplate("00X1B000001qY25")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    'Tricks it into attaching the email to the match
                    PAX(39, 2) = Name
                   
                    Set DataCollection = New Collection
                    Call Send_HTMLEmail(PAX, "IWTsupport", DataCollection)
                   
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLZQq=Email Sent " & Due_Date
                    URL4Update = Replace(URL4Update, "<ID>", Name)
                End If
            End If
           
            If Instructions = "Send Job Confirmation Email and CC Manager" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, "", Name, 4)
                    Due_Date = Format(Now(), "MM/DD/YYYY")
             
                    EmailTemplate = FetchEmailTemplate("00X1B000001qY25")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    
                    PAX(0, 1) = "<2HC Service Lvl>"
                    'Tricks it into attaching the email to the match
                    PAX(39, 2) = Name
                   
                    Set DataCollection = New Collection
                    Debug.Print PAX(33, 2)
                    Call Send_HTMLEmail(PAX, "IWTsupport", DataCollection, False)
                    
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLZQq=Email Sent " & Due_Date
                    URL4Update = Replace(URL4Update, "<ID>", Name)
                End If
            End If
            
            
            If Instructions = "Housing Notification Fixed" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, "", Name, 4)
             
                    EmailTemplate = FetchEmailTemplate("00X1B000001qaP1")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    'Tricks it into attaching the email to the match
                   
                    Set DataCollection = New Collection
                    Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
                    
                    URL4Update = ""
                End If
            End If
      
            If Instructions = "Send Job Confirmation Email Under Construction" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, "", Name, 4)
                    Due_Date = Format(Now(), "MM/DD/YYYY")
                    
                    EmailTemplate = FetchEmailTemplate("00X1B000001qY25")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    RegionResolution = Array("9/1/2017", "Test error")
                    Call Send_HTMLEmail(PAX, "IWTSupport", DataCollection)
              
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLZQq=Email Sent " & Due_Date
                    URL4Update = Replace(URL4Update, "<ID>", Name)
                End If
            End If
      
            If Instructions = "Confirm Password Reset" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, Name, "", 4)
                    Due_Date = Format(Now(), "MM/DD/YYYY")
                    
                    EmailTemplate = FetchEmailTemplate("00X1B000001qZzD")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    'PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/5001B000012Tt8u")
                    
                    Set DataCollection = New Collection
                        DataCollection.Add Array("00Na000000B2eGd", "PW reset email sent " & Due_Date)
                    Call Send_HTMLEmail(PAX, "IWTSupport", DataCollection)
                    URL4Update = ""
                End If
            End If
     
            If Instructions = "Insurance Extension Confirmation Email" Then
                If Len(ID) = 15 Then
                    PAX = PAXbasicInfo(ID, Name, "", 4)
                    'PAX(0, 1) = "<2HC Service Lvl>"
                    Due_Date = Format(Now(), "MM/DD/YYYY")
             
                    PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/5001B000012UA6X")
                    Call Send_Email(PAX, True, False)
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=Confirmation Sent on " & Due_Date
                    URL4Update = Replace(URL4Update, "<ID>", Name)
                End If
            End If
     
            If Instructions = "Close Overdue MC cases that are completed" Then
                If Len(ID) = 15 Then
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=MC is set to Complete.  Last step: " & left(Name, 25)
                    URL4Update = Replace(URL4Update, "<ID>", ID)
                End If
            End If
     
            
            If Instructions = "Add Match to Case" Then
'Find a valid match and attach it to case
                
                PAX = PAHR_CollectInfo(ID, "Case")
                
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & Name)
                RegionResolution = FetchField(ScavangeIE, "cas1_ileinner")
                Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & Name & "/e")
                
                Set DataCollection = New Collection
                    If left((FetchField(ScavangeIE, "cas3_lkid")(0)), 3) <> "003" Then
                        URL4Update = PageInfoS(PAX, "Opportunity.Primary Contact")(1)
                        If left(URL4Update, 3) = "003" Then
                            DataCollection.Add Array("cas3_lkid", URL4Update)
                        End If
                    End If

                    URL4Update = FetchField(ScavangeIE, "CF00Na000000B2eGi_lkid")(0)
                    If left(URL4Update, 3) <> "a0R" Then
                        CrawlInstruct = PageInfoF(PAX, "Primary Match")
                        DataCollection.Add Array("CF00Na000000B2eGi_lkid", CrawlInstruct(1))
                        DataCollection.Add Array("CF00N1300000BOWTk_lkid", PageInfoF(CrawlInstruct, "Host Account")(1))
                    Else
                        Call opNAV(page_info, "nav", "https://na68.salesforce.com/" & URL4Update)
                        DataCollection.Add Array("CF00N1300000BOWTk_lkid", FetchField(page_info, "CF00N1300000BOCaF_ileinner")(1))
                        Call opNAV(page_info, "quit", "")
                    End If
                    
                Call PushUpdates2Page(ScavangeIE, DataCollection)
                Call opNAV(ScavangeIE, "nav", Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Name&newOwn_lkid=", "<ID>", Name) & RegionResolution(1))
                Call HitSave(ScavangeIE)
                
                Call opNAV(ScavangeIE, "quit", "")
                Set DataCollection = New Collection
                URL4Update = ""
            End If
     
            
            If Instructions = "AddIPtoMatch" Then
                URL4Update = "https://na68.salesforce.com/" & ID
                Length = Len(Name)
                Name = Replace(Right(Name, Length - 27), "</a>", "")
                Name = Replace(Name, "-WT2018", "")
                Name = Replace(Name, "Summer-2018", "Sum18")
                Name = Replace(Name, "The Track Family Recreation Center ( Destin, FL)", "Track Fam Rec Center(Destin, FL)")
         
                Name = "IP-" & Name
          
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas21=0&Name=", "<ID>", ID) & Name
            End If
     
            If Instructions = "Contact4Case" Then
                If Len(ID) = 15 Then
                    'find and set Contact
                                                'Engagement                     'Opp                        'Contact
                    CrawlInstruct = Array("CF00Na000000B2eGh_ileinner", "CF00Na0000009s14M_ileinner", "CF00Na0000009rUSE_ileinner")
                    URL4Update = ID
                    
                    For i = 0 To UBound(CrawlInstruct)
                        Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & URL4Update)
                        URL4Update = FetchField(ScavangeIE, (CrawlInstruct(i)))(1)
                        If i = 0 Then
                            Name = FetchField(ScavangeIE, "cas1_ileinner")(1)
                        End If
                    Next i
                    
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e?cas3=Name&cas3_lkid=" & URL4Update)
                    Call HitSave(ScavangeIE)
                    Call opNAV(ScavangeIE, "nav", Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Name&newOwn_lkid=", "<ID>", ID) & Name)
                    Call HitSave(ScavangeIE)
                    
                    URL4Update = ""
                    
                    Call opNAV(ScavangeIE, "quit", "")
                    'Previous_Value = Openclick1(URL4Update, False)
                End If
            End If
     
            If Instructions = "Use Case Match to populate Case HC Account" Then
                If Len(ID) = 15 Then
                    'Goto Match
                    Set ScavangeIE = CreateObject("InternetExplorer.Application")
                    ScavangeIE.Visible = False
                    URL4Update = ID
              
                    'the first ID is the Match from the case, the next ID is the HC account from the match
                    CrawlInstruct = Array("CF00Na000000B2eGi_ileinner", "CF00N1300000BOCaF_ileinner")
                    For Each Item In CrawlInstruct
                        URL4Update = "https://na68.salesforce.com/" & URL4Update
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                        Set FieldInfo = Fetch_Fields(ScavangeIE, (Item))
                        URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                        'MsgBox "the id of the next record is " & URL4Update, , "Nothing"
                    Next Item
             
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas21=0&CF00N1300000BOWTk=HC&CF00N1300000BOWTk_lkid=", "<ID>", ID) & URL4Update
                    ScavangeIE.Quit
                    Set ScavangeIE = Nothing
                End If
            End If
      
            If Instructions = "Release Match from Case" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00Na000000B2eGi=&CF00Na000000B2eGi_lkid=&00Na000000B2eGd=", "<ID>", ID)
                Else
                End If
            End If
            
            If Instructions = "Fill in positions missing hours" Then
                If Len(ID) = 15 Then
                    Call Docusign_Hours_Per_Week_Backfiller(ID)
                Else
                End If
            End If
     
            If Instructions = "Close Case" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=AutoClosed+-+Housing+Provided", "<ID>", ID)
                Else
               End If
            End If
     
            If Instructions = "Close Case Geography" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=AutoClosed+-+No+Restriction", "<ID>", ID)
                Else
                End If
            End If
     
            
            If Instructions = "Housing Info Submission Required" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=Housing Info Submission Required", "<ID>", ID)
              Else
                End If
            End If
     
            If Instructions = "Ops is still reviewing Job Offer" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=Ops is still reviewing Job Offer", "<ID>", ID)
              Else
                End If
            End If
     
            If Instructions = "Reset Validation Status" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=", "<ID>", ID)
                Else
                End If
            End If
     
            If Instructions = "IP to Premium or Cancelled" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=PAX is Premium or Cancelled", "<ID>", ID)
                Else
                End If
            End If
            
            If Instructions = "Send Housing Plan Link" Then
                If Len(ID) = 15 Then
                Call Housing_Send_Link_2update_housing_plan(ID, Name)
                Else
                End If
                URL4Update = ""
            End If
            
            If Instructions = "Send Housing Plan Link2" Then
                If Len(ID) = 15 Then
                Call Housing_Send_Link_2update_housing_plan(ID, Name, "00X1B000001qaHq")
                Else
                End If
                URL4Update = ""
            End If
            
            If Instructions = "Fix Matches on Housing Plans" Then
                If Len(ID) = 15 Then
                    Call Housing_Fix_Match_links(ID)
                End If
                URL4Update = ""
            End If
            
            If Instructions = "Issue HC Roster" Then
                If Len(ID) = 15 Then
                    Call HC_Roster_Request_Proccessing(ID)
                End If
                URL4Update = ""
            End If
            
            If Instructions = "Position_Infos Missing Work Travel in Intrax Programs" Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BQpYs=Work Travel", "<ID>", ID, 1, , vbTextCompare)
            End If
     
            
            If Instructions = "Tag JO IPU to Case" Then
                If Len(ID) = 15 Then
         
Check_For_Case_on_Engagement:
                URL4Update = "https://na68.salesforce.com/" & ID
         
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                Set page_info = ScavangeIE.document.getelementsbytagname("a")
         
                For Each Link In page_info
                    'MsgBox link.href, , "THis is the ID of the next Page"
                    previousvalue = Link.innerhtml
                    If previousvalue = "Pre-Arrival Housing Required" Then
                    URL4Update = Link.HREF
                    'MsgBox URL4Update, , "THis is the ID of the next Page"
                    End If
                Next Link
                    
                URL4Update = Replace(URL4Update, "https://na68.salesforce.com/", "")
                  If left(URL4Update, 3) = "500" Then
                      Else
                      previousvalue = "https://na68.salesforce.com/500/e?&CF00N1300000BOWTk_lkid=0011300001ukRnjAAE&CF00Na000000B2eGh=Engagement&CF00Na000000B2eGh_lkid=<ID>&ent=Case&RecordType=012a0000001NbNh&retURL=<ID>&cas5=Housing&00Na000000B3Ieg=Need+help+to+find+housing&cas11=Email&00Na000000B3Ief=Participant&cas14=Pre-Arrival+Housing+Required"
                      URL4Update = Replace(previousvalue, "<ID>", ID)
                      previousvalue = Openclick1(URL4Update, True)
                      GoTo Check_For_Case_on_Engagement:
                  End If
                  URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00N1300000BQpYo=Case&CF00N1300000BQpYo_lkid=" & URL4Update, "<ID>", Name)
         
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
     
            
            If Instructions = "RETIRED Generate Overdue CheckIn Cases" Then
                If Len(ID) = 15 Then
          
                URL4Update = "https://na68.salesforce.com/" & ID
         
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
          
                Set page_info = ScavangeIE.document.getelementsbytagname("a")
                For Each Link In page_info
                    'MsgBox link.href, , "THis is the ID of the next Page"
                    previousvalue = Link.innerhtml
                    If previousvalue = "Overdue CheckIn (Do Not Rename)" Then
                        URL4Update = Link.HREF
                        'MsgBox URL4Update, , "THis is the ID of the next Page"
                    End If
                Next Link
                    
                URL4Update = Replace(URL4Update, "https://na68.salesforce.com/", "")
                  If left(URL4Update, 3) = "500" Then
                        URL4Update = ""
                     Else
                      CrawlInstruct = Array("006", "003")
                      TableData = WebCrawl(ID, CrawlInstruct)
                
                      previousvalue = "https://na68.salesforce.com/500/e?&CF00N1300000BOWTk_lkid=0011300001ukRnjAAE&CF00Na000000B2eGh=Engagement&CF00Na000000B2eGh_lkid=<ID>&ent=Case&RecordType=012a0000001NbNh&retURL=<ID>&cas5=Administrative&00Na000000B3Ieg=Check-in&cas11=Email&00N1300000BLavV=00|Case+Prep&cas14=Overdue CheckIn (Do Not Rename)&cas3=Contact&cas3_lkid=" & TableData
                      URL4Update = Replace(previousvalue, "<ID>", ID) & "&CF00Na000000B34SG=A&CF00Na000000B34SG_lkid=" & Name
                      'previousvalue = Openclick1(URL4Update, True)
                  End If
          
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
     
           If Instructions = "Once Housing Plan is Confirmed, read back status to PAHR case and look for a Landlord validation" Then
                If Len(ID) = 15 Then
                'Get accommodations from engagement
                Set DataCollection = Pull_Master_Child(ID, "CF00Na000000B2kKt", "a0T")
           
                'find the accommodation that is planned
                For i = 2 To DataCollection.count
                    If DataCollection(i)(5)(0) = "CHECKED" Then
                        Previous_Value = DataCollection(i)(2)(1)
                    End If
                Next i
          
                'check if planned accommodation has a validation sheet
                URL4Update = "https://na68.salesforce.com/" & Previous_Value
          
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                Set page_info = Fetch_Fields(ScavangeIE, "CF00N1300000BLnhS_ileinner")
                Previous_Value = Get_HREF_from_Anchor(page_info.innerhtml)
           
                'if there's a validation sheet attach it to the case and update status
                If Len(Previous_Value) = 15 Then
                    'get validation info from assessment
                    'update case
                End If
           
                Else
                End If
          
            ScavangeIE.Quit
            Set ScavangeIE = Nothing
            End If
     
           
            If Instructions = "Generate Overdue CheckIn Cases" Then
                If Len(ID) = 15 Then
         
                URL4Update = "https://na68.salesforce.com/" & ID
         
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                Set page_info = ScavangeIE.document.getelementsbytagname("a")
         
                URL4Update = ""
                LetterTemplate = "Overdue CheckIn (Do Not Rename)"
         
                For Each Link In page_info
                    'MsgBox link.href, , "THis is the ID of the next Page"
                    previousvalue = Link.innerhtml
                    If previousvalue = LetterTemplate Then
                        URL4Update = Link.HREF
                    'MsgBox URL4Update, , "THis is the ID of the next Page"
                    End If
                Next Link
                    
                If URL4Update = "" Then
                    PAX = PAXbasicInfo(ID, "", "", 4)
                    PAX(2, 1) = LetterTemplate
                    PAX(40, 1) = Format(Now(), "mm/dd/yyyy")
         
                    previousvalue = "https://na68.salesforce.com/500/e?&CF00N1300000BOWTk_lkid=0011300001ukRnjAAE&CF00Na000000B2eGh=Engagement&CF00Na000000B2eGh_lkid=<ID>&ent=Case&RecordType=012a0000001NbNh&retURL=<ID>&cas5=Administrative&00Na000000B3Ieg=Check-in&cas11=Email&00N1300000BLavV=00|Case+Prep&cas14=Overdue CheckIn (Do Not Rename)&cas3=Contact&cas3_lkid=" & PAX(20, 2)
                     URL4Update = Replace(previousvalue, "<ID>", PAX(11, 2)) & "&CF00Na000000B34SG=A&CF00Na000000B34SG_lkid=" & left(Name, 15) & "&CF00Na000000B2eGi=Match&CF00Na000000B2eGi_lkid=" & PAX(19, 2)
                      'previousvalue = Openclick1(URL4Update, True)
                    Else
                    URL4Update = ""
                  End If
         
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
     
'Overdue Monthly Contact Script
'Overdue Monthly Contact Script
'Overdue Monthly Contact Script
            If Instructions = "Generate Overdue Monthly Contact Cases 00|" Then
                If Len(ID) = 15 Then
          
                URL4Update = "https://na68.salesforce.com/" & Name
         
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
               ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                Set page_info = ScavangeIE.document.getelementsbytagname("a")
         
                URL4Update = ""
                LetterTemplate = "Overdue Monthly Contact"
         
                For Each Link In page_info
                    'MsgBox link.href, , "THis is the ID of the next Page"
                    previousvalue = Link.innerhtml
                    If previousvalue = LetterTemplate Then
                        URL4Update = Link.HREF
                    'MsgBox URL4Update, , "THis is the ID of the next Page"
                   End If
                Next Link
          
                
                'MsgBox URL4Update, , "update"
                If URL4Update = "" Then
                    PAX = PAXbasicInfo(ID, "", "", 4)
                    PAX(2, 1) = LetterTemplate
                    PAX(40, 1) = Format(Now(), "mm/dd/yyyy")
                      previousvalue = "https://na68.salesforce.com/500/e?&CF00N1300000BOWTk_lkid=0011300001ukRnjAAE&CF00Na000000B2eGh=Engagement&CF00Na000000B2eGh_lkid=<ID>&ent=Case&RecordType=012a0000001NbNh&retURL=<ID>&cas5=Administrative&00Na000000B3Ieg=Check-in&cas11=Email&00N1300000BLavV=00|Case+Prep&cas14=" & PAX(2, 1) & "&cas3=Contact&cas3_lkid=" & PAX(20, 2)
               
                      If PAX(19, 2) = "" Then
                        Else
                        previousvalue = previousvalue & "&CF00Na000000B2eGi=Match&CF00Na000000B2eGi_lkid=" & PAX(19, 2)
                      End If
               
                      URL4Update = Replace(previousvalue, "<ID>", (PAX(11, 2))) & "&cas7=Wait External&cas21=0&CF00Na000000B34SG=A&CF00Na000000B34SG_lkid=" & Name & "&00N1300000BLavQ=" & PAX(40, 1)
                Else
                URL4Update = ""
                End If
          
                'template https://na68.salesforce.com/50013000010kAv9
         
                
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
     
            
            
 
            If Instructions = "Send Overdue MC Warning Email 00|04 OLD" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
                PAX(0, 1) = ""
                'PAX(39, 2) = Name
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
          
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
                'MsgBox "duedate: " & PAX(40, 1) & "   Sentence: " & PAX(40, 2)
          
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/50013000010kAv9")
                Call Send_Email(PAX, True, False)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=04|Send 2nd dismissal warning on duedate&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", Name)
          
                End If
            End If
      
            
            If Instructions = "Send Overdue MC Warning Email 00|04" Then
                If Len(ID) = 15 Then
                    Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavV", "04|Send 2nd dismissal warning on duedate", "Next Step")
                    Call SendEmail_UpdateCase(ID, Name, "", "00X1B000001qY1R", "IWTSupport", DataCollection, 5)
                    URL4Update = ""
                End If
            End If
     
            If Instructions = "Close Overdue MC cases that are confirmed and email PAX" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 2)
                
                    EmailTemplate = FetchEmailTemplate("00X1B000001qY1M")
                    PAX = AddTemplate(PAX, EmailTemplate)
              
                    Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavV", "MC has been confirmed and PAX was emailed", "Next Step")
                    DataCollection.Add Array("cas7", "Closed", "Close Case")
              
                    'Set PAX(44, 1) = DataCollection
                    Call Send_HTMLEmail(PAX, "NoReply", DataCollection)

                'URL4Update =
                URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Region&newOwn_lkid=" & PAX(37, 1), "<ID>", Name)
                End If
            End If
  
            If Instructions = "Send Survey Email" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 2)
              
                    EmailTemplate = FetchEmailTemplate("00X1B000001qYKO")
                   PAX = AddTemplate(PAX, EmailTemplate)
               
                        Set ScavangeIE = CreateObject("InternetExplorer.Application")
                        ScavangeIE.Visible = False
                        URL4Update = "https://na68.salesforce.com/" & Name
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                        Set page_info = Fetch_Fields(ScavangeIE, "00Na000000B2eGd_ileinner")
                        PAX(2, 2) = page_info.innerhtml
                        ScavangeIE.Quit
                        Set ScavangeIE = Nothing
                
                    Set DataCollection = New Collection
                    DataCollection.Add Array("00N1300000BLavV", "02|Reminder Sent", "Next Step")
                    'DataCollection.Add Array("cas7", "Closed", "Close Case")
                    Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
              
 
              
                'URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas7=Closed&00N1300000BLavV=MC has been confirmed and PAX was emailed"
                'URL4Update = Replace(URL4Update, "<ID>", Name)
                URL4Update = ""
                End If
            End If
      
            
            If Instructions = "Send a Template via Task" Then
                If Len(ID) = 15 Then
                Name = Get_HREF_from_Anchor(Name)
               'fetch task details
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                                ScavangeIE.Visible = False
                URL4Update = "https://na68.salesforce.com/" & ID
                                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                Set FieldInfo = Fetch_Fields(ScavangeIE, "tsk3_ileinner")
                               URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                                Set FieldInfo = Fetch_Fields(ScavangeIE, "tsk5_ileinner")
                                Name = FieldInfo.innerhtml
                                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, "https://na68.salesforce.com/" & URL4Update)
                                Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2eGh_ileinner")
                                Previous_Value = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                                Previous_Value = Right(Previous_Value, 15)
                          
               'prep and send email
                PAX = PAXbasicInfo(Previous_Value, URL4Update, "", 4)
              
                    EmailTemplate = FetchEmailTemplate(Name)
                    PAX = AddTemplate(PAX, EmailTemplate)
                    RegionResolution = Array("9/1/2017", "Test error")
                    Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
         
                Due_Date = Format(Now(), "MM/DD/YYYY - HH:MM")
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&tsk12=Completed&tsk6=Email sent on: " & Due_Date
                URL4Update = Replace(URL4Update, "<ID>", ID)
          
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                End If
            End If
     
            ' Send 2nd warning 04|09
            If Instructions = "Send Overdue MC Warning 24 hour notice email 04|09 OLD" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
                PAX(0, 1) = "<2HC Service Lvl>"
                   If PAX(33, 1) = "Independent" Then
                        'PAX(0, 1) = PAX(0, 1) & "; <2RAM>"
                    End If
         
                'PAX(39, 2) = Name
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 1, Due_Date)
         
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
                'MsgBox "duedate: " & PAX(40, 1) & "   Sentence: " & PAX(40, 2)
         
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/50013000010lyYD")
                'Set today field in email template to today's date
                PAX(3, 1) = Replace(PAX(3, 1), "<TODAY>", Format(Now(), "dddd mmmm dd, yyyy"))
                Call Send_Email(PAX, True, False)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=08| Waiting 24 hours before moving to fieldstaff for dismissal notice|&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", Name)
         
                End If
            End If
            
            If Instructions = "Overdue MC in Wait External Assign to Andrew" Then
                If Len(ID) = 15 Then
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/a?newOwn=Andrew&newOwn_lkid=0051300000BT4mM")
                    Call HitSave(ScavangeIE)
                    Call opNAV(ScavangeIE, "quit")
                    URL4Update = ""
                End If
            End If
      
            If Instructions = "Send Overdue MC Warning 24 hour notice email 04|09" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 2, Due_Date)
         
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
           
                EmailTemplate = FetchEmailTemplate("00X1B000001qY1b")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    RegionResolution = Array(PAX(40, 1), "Test error")
                    Set DataCollection = New Collection
                    Call Send_HTMLEmail(PAX, "IWTSupport", DataCollection)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=08| Waiting 24 hours before moving to fieldstaff for dismissal notice|&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", Name)
          
                End If
            End If
     
            
            If Instructions = "Check for IP HCs and move to stage 10| for termination email" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
         
                    If PAX(33, 1) = "Independent" Or PAX(29, 1) = "No placements currently confirmed" Then
                        URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=10| HC is IP so dismissal for overdue MC is automatic"
                        URL4Update = Replace(URL4Update, "<ID>", Name)
                    Else
                        URL4Update = ""
                    End If
                End If
            End If
            
            If Instructions = "RAM approved overdue MC Dissmissal Notice: 10| for termination email" Then
                If Len(ID) = 15 Then
                    URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=10| RAM approved Dissmissal Notice"
                End If
            End If
     
            If Instructions = "Send Overdue MC Termination Email 10|13 OLD" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
                PAX(0, 1) = "<2HC Service Lvl>; <2RAM>; <2Partner Email>"
                PAX(1, 1) = "<2Fieldstaff>; eobregon@intraxinc.com; <2Account Manager>; "
                'PAX(39, 2) = Name
           
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
          
                PAX(40, 1) = Due_Date
                PAX(40, 2) = Format(Due_Date, "dddd mmmm d, yyyy")
                'MsgBox "duedate: " & PAX(40, 1) & "   Sentence: " & PAX(40, 2)
         
                PAX = Obtain_Template4Email(PAX, "https://na68.salesforce.com/5001B000011nbF8")
                'Set today field in email template to today's date
                PAX(3, 1) = Replace(PAX(3, 1), "<TODAY>", Format(Now(), "dddd mmmm dd, yyyy"))
                Call Send_Email(PAX, True, False)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=13| SEVIS Termination&00N1300000BLavQ=" & PAX(40, 1)
                URL4Update = Replace(URL4Update, "<ID>", Name)
         
                End If
            End If
      
            If Instructions = "Send Overdue MC Termination Email 10|13" Then
                If Len(ID) = 15 Then
         
                PAX = PAXbasicInfo(ID, Name, "", 4)
                PAX(0, 1) = "<2HC Service Lvl>; <2RAM>; <2Partner Email>"
               PAX(1, 1) = "<2Fieldstaff>; eobregon@intraxinc.com; <2Account Manager>; "
                'PAX(39, 2) = Name
          
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 5, Due_Date)
          
                EmailTemplate = FetchEmailTemplate("00X1B000001qY1g")
                    PAX = AddTemplate(PAX, EmailTemplate)
                    Set DataCollection = New Collection
                        DataCollection.Add Array("00N1300000BLavV", "13| SEVIS Termination")
                        DataCollection.Add Array("00N1300000BLavQ", Due_Date)
                    Call Send_HTMLEmail(PAX, "IWTSupport", DataCollection)
         
                'URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=13| SEVIS Termination&00N1300000BLavQ=" & PAX(40, 1)
                'URL4Update = Replace(URL4Update, "<ID>", Name)
                URL4Update = ""
         
                End If
            End If
     
            
            
            
            
            
            If Instructions = "Make sure cases stay open till MC is confirmed" Then
                If Len(ID) = 15 Then
         
                Due_Date = Format(Now(), "MM/DD/YYYY")
                Due_Date = DateAdd("d", 3, Due_Date)
         
                URL4Update = "https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=00|Send Warning&cas7=Wait External&00N1300000BLavQ=" & Due_Date
                URL4Update = Replace(URL4Update, "<ID>", Name)
         
                End If
            End If
            
            If Instructions = "PAHR/PC Closes cases for no longer pending Engagements" Then
                If Len(ID) = 15 Then
                    Set PageUpdates = New Collection
                        PageUpdates.Add Array("cas7", "Closed")
                        PageUpdates.Add Array("00N1300000BLavV", "Case ended because Engagement is: " & Name)
                    Call opNAV(ScavangeIE, "nav", "https://na68.salesforce.com/" & ID & "/e")
                    Call PushUpdates2Page(ScavangeIE, PageUpdates)
                    Call opNAV(ScavangeIE, "quit", "")
                End If
            End If
     
            
            
            If Instructions = "Re-Assign Pre-Arrival Queue Cases" Then
                If Len(ID) = 15 Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                URL4Update = ID
            'this will find the match ID, naviate there, find the position id, navigate there, find the state and then exit loop
                CrawlInstruct = Array("CF00Na000000B2eGi_ileinner", "CF00N30000008REJy_ileinner", "00N30000008RCsv_ileinner")
             For Each Item In CrawlInstruct
                    URL4Update = "https://na68.salesforce.com/" & URL4Update
                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                    Set FieldInfo = Fetch_Fields(ScavangeIE, (Item))
                    URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                Next Item
                'MsgBox URL4Update, , "this is the state"
         
                CrawlInstruct = LoadRAMtable()
                For i = 0 To UBound(CrawlInstruct)
                    If URL4Update = CrawlInstruct(i, 0) Then
                    Previous_Value = CrawlInstruct(i, 3)
                    End If
                Next i
                URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Name&newOwn_lkid=", "<ID>", ID) & Previous_Value
          
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
            
           If Instructions = "Fix Engagment Region Info" Then
                PAX = PAXbasicInfo(ID, "", "", 4)
                Debug.Print "ID = " & ID & " | Region = " & PAX(37, 2)
                URL4Update = ID & "/e?CF00N1300000BOZMj=Region&CF00N1300000BOZMj_lkid=" & PAX(37, 2)
               Debug.Print "Engagement region fix = " & URL4Update
           End If
           
           If Instructions = "Fix Engagement Region Info" Then
                PAX = PAHR_CollectInfo(ID, "Case")
            If IsArray(PageInfoF(PAX, "Region")) Then
                Debug.Print "ID = " & ID & " | Region = " & PageInfoF(PAX, "Region")(1)
                URL4Update = "https://na68.salesforce.com/" & ID & "/e?CF00N1300000BOZMj=Region&CF00N1300000BOZMj_lkid=" & PageInfoF(PAX, "Region")(1)
               Debug.Print "Engagement region fix = " & URL4Update
            End If
           End If
     
        If Instructions = "Make sure fieldstaff own cases that are theirs" Then
                If Len(ID) = 15 Then
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                URL4Update = ID
         
            'this will find the match ID, naviate there, find the position id, navigate there, find the state and then exit loop
                CrawlInstruct = Array("CF00Na000000B2eGi_ileinner", "CF00N30000008REJy_ileinner", "00N30000008RCsv_ileinner")
               On Error Resume Next
                For Each Item In CrawlInstruct
                    URL4Update = "https://na68.salesforce.com/" & URL4Update
                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                   Set FieldInfo = Fetch_Fields(ScavangeIE, (Item))
                    URL4Update = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                Next Item
               'MsgBox URL4Update, , "this is the state"
         
                CrawlInstruct = LoadRAMtable()
                'this checks to see if the state didn't return correctly and then fetches the state from the engagement's Current Accomodation State instead.
                    If Len(URL4Update) > 2 Then
                        url4udpate = "https://na68.salesforce.com/" & Name
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                        URL4Update = (Fetch_Fields(ScavangeIE, "00Na000000B3Ieh_ileinner"))
                    End If
         
                For i = 0 To 50
                    If URL4Update = CrawlInstruct(i, 0) Then
                    Previous_Value = CrawlInstruct(i, 3)
                    End If
                Next i
                URL4Update = Replace("https://na68.salesforce.com/<ID>/a?retURL=<ID>&newOwn=Name&newOwn_lkid=", "<ID>", ID) & Previous_Value
         
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
     
            
    If Instructions = "Attach Housing Notif Assessment to PAHR Case" Then
                If Len(ID) = 15 Then
         
                URL4Update = "https://na68.salesforce.com/" & Name
           
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = False
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
         
                'get all the anchors on page
               Set page_info = ScavangeIE.document.getelementsbytagname("a")
                'see if any of the anchors are labeleed as the housing plan assessment
                For Each Link In page_info
                    previousvalue = Link.innerhtml
                        If previousvalue = "Pre-Arrival Housing Plan" Then
                        URL4Update = Link.HREF
                        End If
                Next Link
                    
                URL4Update = Replace(URL4Update, "https://na68.salesforce.com/", "")
                  If left(URL4Update, 3) = "a1l" Then
                  URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&CF00Na000000B34SG=PAHP&CF00Na000000B34SG_lkid=" & URL4Update, "<ID>", ID)
                  Else
                  URL4Update = ""
                  End If
         
                ScavangeIE.Quit
                Set ScavangeIE = Nothing
                Else
                End If
            End If
    If Instructions = "PAHR Catalogue Transfer" Then
                        If Len(ID) = 15 And Name <> "" Then
                    
            URL4Update = "https://na68.salesforce.com/" & Name
 
                                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                                ScavangeIE.Visible = False
                                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                
                                    'find and navigate to accommodation site
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2kKu_ileinner")
                                'MsgBox fieldINFO.innerhtml, , "accomodation site inner html"
                                Previous_Value = FieldInfo.innerhtml
                         
                                
                                
            Length = InStr(1, Previous_Value, "href=", vbTextCompare)
                    If Length < 22 Then
                   URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Site", "<ID>", ID)
                    GoTo PAHRTransfer
                    End If
            URL4Update = Mid(Previous_Value, Length, 22)
      
            
            URL4Update = Right(URL4Update, 15)
            URL4Update = "https://na68.salesforce.com/" & URL4Update
            'MsgBox URL4Update, , "Accomodation Site Address"
            Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
 
        ' pull street, city, state, zip
        CrawlInstruct = Array("00N30000009ot82_ileinner", "00N30000009ot7d_ileinner", "00N30000009ot7x_ileinner", "00N30000009ot7s_ileinner")
 
        Length = 0
 
            For Each fieldIneed In CrawlInstruct
                Set FieldInfo = Fetch_Fields(ScavangeIE, (fieldIneed))
                Values4Results(Length) = FieldInfo.innerhtml
                Length = Length + 1
            Next fieldIneed
     
            
            ' Find and Pull housing validation sheet
                  
            
            'get contact ID
            Set FieldInfo = ScavangeIE.document.getelementsbytagname("a")
     
            URL4Update = ""
            'if this is still blank, then no contact was found
            For Each anchor In FieldInfo
                If Len(anchor.innerhtml) > 22 Then
             
                    If left(anchor.innerhtml, 21) = "Housing Validation - " Then
                                URL4Update = anchor.HREF
                                'MsgBox URL4Update, , "This is the URL of the validation sheet"
                                Exit For
                    End If
                End If
            Next anchor
     
                    If URL4Update = "" Then
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Validation Sheet", "<ID>", ID)
                    GoTo PAHRTransfer
                    End If
 
        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
 
        'now navigate to the contact from the validation sheet
  
                    Set FieldInfo = Fetch_Fields(ScavangeIE, "tsk2_ileinner")
                                'MsgBox fieldINFO.innerhtml, , "accomodation site inner html"
                                Previous_Value = FieldInfo.innerhtml
                          
                                
                                
            Length = InStr(1, Previous_Value, "href=", vbTextCompare)
                    If Length < 22 Then
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Contact", "<ID>", ID)
                    GoTo PAHRTransfer
                    End If
            URL4Update = Mid(Previous_Value, Length, 22)
     
            
            URL4Update = Right(URL4Update, 15)
            URL4Update = "https://na68.salesforce.com/" & URL4Update & "/e?"
            'MsgBox URL4Update, , "contact URL"
            Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
 
        'from the contact object collect contact info
 
        
        CrawlInstruct = Array("name_firstcon2", "name_lastcon2", "con10", "con15")
        Length = 4
        'Name
            For Each fieldIneed In CrawlInstruct
                Set FieldInfo = Fetch_Fields(ScavangeIE, (fieldIneed))
                Values4Results(Length) = FieldInfo.Value
                Length = Length + 1
            Next fieldIneed
     
        
        matrix(11, 0) = "00Na000000B3Hku"
        matrix(11, 1) = "1"
        matrix(10, 0) = "00N1300000BLbZG"
        matrix(10, 1) = "Permanent housing secured - Self arranged"
        matrix(0, 0) = "00Na000000B34SF"
        matrix(0, 1) = Values4Results(0)
        matrix(1, 0) = "00Na000000B34SE"
        matrix(1, 1) = ""
        matrix(2, 0) = "00Na000000B34S5"
        matrix(2, 1) = Values4Results(1)
        matrix(3, 0) = "00Na000000B34SD"
        matrix(3, 1) = Values4Results(2)
        matrix(4, 0) = "00Na000000B34S6"
        matrix(4, 1) = "United States"
        matrix(5, 0) = "00Na000000B34SC"
        matrix(5, 1) = Values4Results(3)
        matrix(6, 0) = "00N1300000BLbZK"
        matrix(6, 1) = Values4Results(4) & " " & Values4Results(5)
        matrix(7, 0) = "00N1300000BLbZJ"
        matrix(7, 1) = Values4Results(6)
        matrix(8, 0) = "00N1300000BLbZI"
        matrix(8, 1) = Values4Results(7)
        matrix(9, 0) = "00N1300000BLnhg"
        matrix(9, 1) = 1
  
        
        URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code03-Catalogue+Transfer+V2&00N1300000BLnhg=1&00Na000000B3Hku=1", "<ID>", ID)
        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
  
        ScavangeIE.Visible = True
 
        Set FieldInfo = ScavangeIE.document.getelementsbytagname("input")
 
            For Each inliner In FieldInfo
                For i = 0 To 11
                    If matrix(i, 0) = inliner.ID Then
                        inliner.Value = matrix(i, 1)
                    End If
                Next i
            Next inliner
       
            Set FieldInfo = ScavangeIE.document.getelementsbytagname("select")
 
            For Each inliner In FieldInfo
                For i = 0 To 11
                    If matrix(i, 0) = inliner.ID Then
                        inliner.Value = matrix(i, 1)
                    End If
                Next i
            Next inliner
     
            'MsgBox "about to save page", , "bam!"
     
        Set FieldInfo = ScavangeIE.document.getelementsbyclassname("btn")
        FieldInfo.Item(0).Click
        Do While ScavangeIE.busy
        Loop
     
        'URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
        'URL4Update = URL4Update & "&00Na000000B34SF=" & Due_Date(0) & "&00Na000000B34SE=&00Na000000B34S5=" & Due_Date(1) & "&00Na000000B34SD=" & Due_Date(2) & "&00Na000000B34SD=" & Due_Date(3) & "&00Na000000B34S6=United States&00N1300000BLbZK=" & Due_Date(4) & Due_Date(5) & "&00N1300000BLbZJ=" & Due_Date(6) & "&00N1300000BLbZI=" & Due_Date(7) & "&00N1300000BLnhg=1&00N1300000BLbZG=Permanent housing secured - Self arranged"
  
        
        
            End If
     
PAHRTransfer:
ScavangeIE.Quit
Set ScavangeIE = Nothing
        End If
  
        
                                                
                                                    If Instructions = "USTAGE - PAHR Catalogue Transfer" Then
                                                                If Len(ID) = 15 And Name <> "" Then
                                                             
                                                    URL4Update = "https://cs71.salesforce.com/" & Name
                                          
                                                                        Set ScavangeIE = CreateObject("InternetExplorer.Application")
                                                                        ScavangeIE.Visible = False
                                                                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                                                       
                                                                            'find and navigate to accommodation site
                                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2kKu_ileinner")
                                                                        'MsgBox fieldINFO.innerhtml, , "accomodation site inner html"
                                                                        Previous_Value = FieldInfo.innerhtml
                                                                   
                                                                        
                                                                        
                                                    Length = InStr(1, Previous_Value, "href=", vbTextCompare)
                                                            If Length < 22 Then
                                                            URL4Update = Replace("https://cs71.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Site", "<ID>", ID)
                                                            GoTo USTAGEPAHRTransfer
                                                            End If
                                                    URL4Update = Mid(Previous_Value, Length, 22)
                                             
                                                    
                                                    URL4Update = Right(URL4Update, 15)
                                                    URL4Update = "https://cs71.salesforce.com/" & URL4Update
                                                    'MsgBox URL4Update, , "Accomodation Site Address"
                                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                         
                                                ' pull street, city, state, zip
                                                CrawlInstruct = Array("00N30000009ot82_ileinner", "00N30000009ot7d_ileinner", "00N30000009ot7x_ileinner", "00N30000009ot7s_ileinner")
                                         
                                                Length = 0
                                         
                                                    For Each fieldIneed In CrawlInstruct
                                                        Set FieldInfo = Fetch_Fields(ScavangeIE, (fieldIneed))
                                                        Values4Results(Length) = FieldInfo.innerhtml
                                                        Length = Length + 1
                                                    Next fieldIneed
                                              
                                                    
                                                    ' Find and Pull housing validation sheet
                                                          
                                                    
                                                    'get contact ID
                                                    Set FieldInfo = ScavangeIE.document.getelementsbytagname("a")
                                              
                                                    URL4Update = ""
                                                    'if this is still blank, then no contact was found
                                                    For Each anchor In FieldInfo
                                                        If Len(anchor.innerhtml) > 22 Then
                                                        
                                                            If left(anchor.innerhtml, 21) = "Housing Validation - " Then
                                                                        URL4Update = anchor.HREF
                                                                        'MsgBox URL4Update, , "This is the URL of the validation sheet"
                                                                        Exit For
                                                            End If
                                                        End If
                                                    Next anchor
                                             
                                                            If URL4Update = "" Then
                                                            URL4Update = Replace("https://cs71.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Validation Sheet", "<ID>", ID)
                                                            GoTo USTAGEPAHRTransfer
                                                            End If
                                         
                                                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                         
                                                'now navigate to the contact from the validation sheet
                                           
                                                            Set FieldInfo = Fetch_Fields(ScavangeIE, "tsk2_ileinner")
                                                                        'MsgBox fieldINFO.innerhtml, , "accomodation site inner html"
                                                                        Previous_Value = FieldInfo.innerhtml
                                                                   
                                                                        
                                                                        
                                                    Length = InStr(1, Previous_Value, "href=", vbTextCompare)
                                                            If Length < 22 Then
                                                            URL4Update = Replace("https://cs71.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code02-Fetch Failed Contact", "<ID>", ID)
                                                            GoTo USTAGEPAHRTransfer
                                                            End If
                                                    URL4Update = Mid(Previous_Value, Length, 22)
                                             
                                                    
                                                    URL4Update = Right(URL4Update, 15)
                                                    URL4Update = "https://cs71.salesforce.com/" & URL4Update & "/e?"
                                                    'MsgBox URL4Update, , "contact URL"
                                                    Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                         
                                                'from the contact object collect contact info
                                          
                                                
                                                CrawlInstruct = Array("name_firstcon2", "name_lastcon2", "con10", "con15")
                                                Length = 4
                                                'Name
                                                    For Each fieldIneed In CrawlInstruct
                                                        Set FieldInfo = Fetch_Fields(ScavangeIE, (fieldIneed))
                                                        Values4Results(Length) = FieldInfo.Value
                                                        Length = Length + 1
                                                    Next fieldIneed
                                              
                                                
                                                matrix(11, 0) = "00Na000000B3Hku"
                                                matrix(11, 1) = "1"
                                                matrix(10, 0) = "00N1300000BLbZG"
                                                matrix(10, 1) = "Permanent housing secured - Self arranged"
                                                matrix(0, 0) = "00Na000000B34SF"
                                                matrix(0, 1) = Values4Results(0)
                                                matrix(1, 0) = "00Na000000B34SE"
                                                matrix(1, 1) = ""
                                                matrix(2, 0) = "00Na000000B34S5"
                                                matrix(2, 1) = Values4Results(1)
                                                matrix(3, 0) = "00Na000000B34SD"
                                                matrix(3, 1) = Values4Results(2)
                                                matrix(4, 0) = "00Na000000B34S6"
                                                matrix(4, 1) = "United States"
                                                matrix(5, 0) = "00Na000000B34SC"
                                                matrix(5, 1) = Values4Results(3)
                                                matrix(6, 0) = "00N1300000BLbZK"
                                                matrix(6, 1) = Values4Results(4) & " " & Values4Results(5)
                                                matrix(7, 0) = "00N1300000BLbZJ"
                                                matrix(7, 1) = Values4Results(6)
                                                matrix(8, 0) = "00N1300000BLbZI"
                                                matrix(8, 1) = Values4Results(7)
                                                matrix(9, 0) = "00N1300000BLnhg"
                                                matrix(9, 1) = 1
                                  
                                                
                                                
                                                URL4Update = Replace("https://cs71.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B369A=Code03-Catalogue+Transfer+V2&00N1300000BLnhg=1&00Na000000B3Hku=1", "<ID>", ID)
                                                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                                         
                                                ScavangeIE.Visible = True
                                         
                                                        Values4Results(0) = "# " & WorksheetFunction.RandBetween(100, 999)
                                                        Values4Results(1) = "Apt B"
                                                        Values4Results(2) = "Room" & WorksheetFunction.RandBetween(1, 25)
                                                        Values4Results(3) = "Basement"
                                                        Values4Results(4) = "Unit " & WorksheetFunction.RandBetween(1, 10)
                                                        Values4Results(5) = WorksheetFunction.RandBetween(1, 4) & "Floor"
                                                        Values4Results(6) = "Unit " & WorksheetFunction.RandBetween(1, 25)
                                                        Values4Results(7) = "Appartment" & WorksheetFunction.RandBetween(1, 25)
                                                        Values4Results(8) = WorksheetFunction.RandBetween(1, 25) & "-" & WorksheetFunction.RandBetween(99, 999)
                                            
                                                
                                                
                                                
                                                Set FieldInfo = ScavangeIE.document.getelementsbytagname("input")
                                         
                                                    For Each inliner In FieldInfo
                                                        For i = 0 To 11
                                                            If matrix(i, 0) = inliner.ID Then
                                                                inliner.Value = matrix(i, 1)
                                                            End If
                                                                If inliner.ID = "00Na000000B34SE" Then
                                                                inliner.Value = Values4Results(WorksheetFunction.RandBetween(0, 8))
                                                                End If
                                                        Next i
                                                 
                                                    Next inliner
                                              
                                                    Set FieldInfo = ScavangeIE.document.getelementsbytagname("select")
                                          
                                                    For Each inliner In FieldInfo
                                                        For i = 0 To 11
                                                            If matrix(i, 0) = inliner.ID Then
                                                                inliner.Value = matrix(i, 1)
                                                            End If
                                                        Next i
                                                    Next inliner
                                             
                                                    'MsgBox "about to save page", , "bam!"
                                             
                                                Set FieldInfo = ScavangeIE.document.getelementsbyclassname("btn")
                                                FieldInfo.Item(0).Click
                                                Do While ScavangeIE.busy
                                                Loop
                                      
                                                
                                                'URL4Update = Replace("https://cs71.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                                                'URL4Update = URL4Update & "&00Na000000B34SF=" & Due_Date(0) & "&00Na000000B34SE=&00Na000000B34S5=" & Due_Date(1) & "&00Na000000B34SD=" & Due_Date(2) & "&00Na000000B34SD=" & Due_Date(3) & "&00Na000000B34S6=United States&00N1300000BLbZK=" & Due_Date(4) & Due_Date(5) & "&00N1300000BLbZJ=" & Due_Date(6) & "&00N1300000BLbZI=" & Due_Date(7) & "&00N1300000BLnhg=1&00N1300000BLbZG=Permanent housing secured - Self arranged"
                                    
                                                
                                                
                                                
                                                    End If
                                                
USTAGEPAHRTransfer:
                                        ScavangeIE.Quit
                                        Set ScavangeIE = Nothing
                                                End If
      
            
            
            
            
          If Instructions = "Get Housing Validation Status" Then
            'IE.Visible = False
                If Len(ID) = 15 And Name <> "" Then
                    CrawlInstruct = Array("a0c", "00T")
                    'MsgBox name, , "Verify correct page"
                    URL4Update = Replace(Name, "https://na68.salesforce.com/", "")
                    'MsgBox URL4Update, , "Verify correct page"
                    URL4Update = WebCrawl(URL4Update, CrawlInstruct)
                    If URL4Update <> "" Then
                 
                        URL4Update = "https://na68.salesforce.com/" & URL4Update
                        'Set IE = navigate2page_wait2load(IE, URL4Update)
                        'MsgBox URL4Update, , "Verify correct page"
                 
                        Set ScavangeIE = CreateObject("InternetExplorer.Application")
                        ScavangeIE.Visible = False
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                  
                        ScavangeIE.Visible = False
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "tsk6_ileinner")
                        Previous_Value = FieldInfo.innerhtml
                        'Previous_Value = "valuevalue<br>valuevalue"
                 
                        
                        
                        Length = InStr(1, Previous_Value, "<br>", vbTextCompare)
                        If Length < 3 Then
                            Previous_Value = "An Error Happened"
                            Else
                            Previous_Value = left(Previous_Value, Length - 2)
                        End If
                 
                        URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=", "<ID>", ID) & Previous_Value
                 
    
                        'tabledata = name
                 
                        ScavangeIE.Quit
                        Set ScavangeIE = Nothing
                    Else
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=", "<ID>", ID) & "Status could not be retrieved"
                    End If
                  'tabledata = Openclick1(URL4Update)
             
                Else
                TableData = "fail"
                End If
         
 
           End If
 
    If Instructions = "Get Housing Geotag Location" Then
            'IE.Visible = False
                If Len(ID) = 15 And Name <> "" Then
                    URL4Update = Name
                    'MsgBox URL4Update, , "Verify correct page"
             
                    
                        Set ScavangeIE = CreateObject("InternetExplorer.Application")
                        ScavangeIE.Visible = False
                 
                        Range("A1").Value = "Navigating to Housing"
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                 
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2kKu_ileinner")
                        Previous_Value = FieldInfo.innerhtml
                 
 
                            If Len(Previous_Value) < 25 Then
                            URL4Update = "Option has no site"
                            GoTo NoGeo
                            End If
                  
                        URL4Update = "https://na68.salesforce.com/" & Mid(Previous_Value, InStr(1, Previous_Value, "href=", vbTextCompare) + 7, 15)
                        'Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                  
                        Previous_Value = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">iGeoLocate Name</th>"
                        Set FieldInfo = Get_Proccess_a_Table(URL4Update, Previous_Value)
                     
                        Previous_Value = "Error"
                 
                            If FieldInfo Is Nothing Then
                            URL4Update = "Accomodation Link is invalid"
                            GoTo NoGeo
                            End If
                 
                        
                        For Each irow In FieldInfo
                            If InStr(1, irow, "href", vbTextCompare) > 1 Then
                                Previous_Value = Mid(irow, InStr(1, irow, "href", vbTextCompare) + 7, 15)
                                'MsgBox Previous_Value, , "Geotag full URL"
                            End If
                        Next irow
                  
                            If Previous_Value = "Error" Then
                            URL4Update = "Site has no Geotag"
                            GoTo NoGeo
                            End If
                 
                        URL4Update = "https://na68.salesforce.com/" & Previous_Value
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                 
                        'Collect the Geotag for the Housing
                       Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2eIJ_ileinner")
                        Range("A1").Value = "Obtaining Housing Geo-location"
                        Previous_Value = FieldInfo.innerhtml
                        'MsgBox Previous_Value, , "should be housing geocordinates"
                  
                        Length = InStr(1, FieldInfo.innerhtml, " ", 1)
                            If Length < 5 Then
                            MsgBox "couldn't find space  " & FieldInfo.innerhtml, , "Verify correct page"
                            End If
                     
                        Georange(1, 1) = left(FieldInfo.innerhtml, Length - 1)
                        Georange(1, 2) = Right(FieldInfo.innerhtml, Len(FieldInfo.innerhtml) - Length)
                 
                        'Previous_Value = "valuevalue<br>valuevalue"
                 
                        
                        'go back to the case
                 
                        Range("A1").Value = "Navigating to Employer"
                  
                        URL4Update = "https://na68.salesforce.com/" & ID
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                       Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00Na000000B2eGi_ileinner")
                        Previous_Value = FieldInfo.innerhtml
                  
                            If Len(Previous_Value) < 25 Then
                            URL4Update = "Case has no match"
                            GoTo NoGeo
                           End If
                 
                        URL4Update = Mid(Previous_Value, InStr(1, Previous_Value, "href=", vbTextCompare) + 7, 15)
                        URL4Update = "https://na68.salesforce.com/" & URL4Update
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                 
                        
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "CF00N1300000BOCaF_ileinner")
                        Previous_Value = FieldInfo.innerhtml
                 
                            If Len(Previous_Value) < 25 Then
                            URL4Update = "match has no HC"
                           GoTo NoGeo
                            End If
                 
                        URL4Update = Mid(Previous_Value, InStr(1, Previous_Value, "href=", vbTextCompare) + 7, 15)
                        URL4Update = "https://na68.salesforce.com/" & URL4Update
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                 
                        Range("A1").Value = "Obtaining Employer Geo-location"
                        'find the geotag page
                        Previous_Value = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">iGeoLocate Name</th>"
                        Set FieldInfo = Get_Proccess_a_Table(URL4Update, Previous_Value)
                 
                        Previous_Value = "Error"
                        For Each irow In FieldInfo
                            If InStr(1, irow, "href", vbTextCompare) > 1 Then
                                Previous_Value = "https://na68.salesforce.com/" & Mid(irow, InStr(1, irow, "href", vbTextCompare) + 7, 15)
                                'MsgBox Previous_Value, , "Geotag full URL"
                            End If
                        Next irow
                 
                            If Previous_Value = "Error" Then
                            URL4Update = "HC has not geotag"
                            GoTo NoGeo
                            End If
                  
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, Previous_Value)
                 
                        'Collect the Geotag for the Housing
                        Set FieldInfo = Fetch_Fields(ScavangeIE, "00Na000000B2eIJ_ileinner")
                        Range("A1").Value = "Obtaining Housing Geo-location"
                        Previous_Value = FieldInfo.innerhtml
                 
                        Length = InStr(1, FieldInfo.innerhtml, " ", 1)
                            If Length < 5 Then
                            'MsgBox "couldn't find space  " & fieldINFO.innerhtml, , "Verify correct page"
                            URL4Update = "couldn't read geo address"
                            GoTo NoGeo
                            End If
                   
                        Georange(2, 1) = left(FieldInfo.innerhtml, Length - 1)
                        Georange(2, 2) = Right(FieldInfo.innerhtml, Len(FieldInfo.innerhtml) - Length)
                  
                        Previous_Value = Georange(2, 1) & "," & Georange(2, 2) & "|" & Georange(1, 1) & "," & Georange(1, 2)
                  
                        distance = Round(Sqr((Georange(1, 1) - Georange(2, 1)) ^ 2 + (Georange(1, 2) - Georange(2, 2)) ^ 2) * 68.7, 2)
                 
                        If distance > 22 Then
                        Previous_Value = "Over: " & Previous_Value
                        End If
                   
                        Previous_Value = Previous_Value & " Distance= " & distance & " miles"
                        URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2eGd=", "<ID>", ID) & Previous_Value
                         Previous_Value = Openclick1(URL4Update, False)
                        'tabledata = name
                    Else
NoGeo:
                    URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00Na000000B2eGd=", "<ID>", ID) & URL4Update
                    End If
                    'tabledata = Openclick1(URL4Update)
        ScavangeIE.Quit
        Set ScavangeIE = Nothing
                End If
                 
                        
                        
        If Instructions = "Lookup an accommodation Object" Then
            If Len(Name) = 15 Then
                Length = InStr(Name, " ")
                Set ScavangeIE = CreateObject("InternetExplorer.Application")
                ScavangeIE.Visible = True
                URL4Update = "https://na68.salesforce.com/" & Name
                        Previous_Value = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">Accommodation: Accommodation Name"
                        Set DataCollection = Get_Proccess_a_Table(URL4Update, Previous_Value)
                        DataCollection.Remove (1)
                 
                        For Each Row In DataCollection
                        MsgBox Row, , "this is the accomodation row"
                            Set FieldInfo = ParseHTML((Row), "<td", "</td>")
                         
                                For Each tdELEMENT In FieldInfo
                                    MsgBox tdELEMENT, , "here's what I found"
                                Next tdELEMENT
                                Set Row = FieldInfo
                        Next Row
                          
                        URL = "https://na68.salesforce.com/" & Name
                        Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
         
                        
                
                Set FieldInfo = ScavangeIE.document.getelementsbyclassname(" dataCell")
         
                    For Each Frame In FieldInfo
                        URL4Update = Get_HREF_from_Anchor(Frame.innerhtml)
                        If left(URL4Update, 3) = "aoc" Then
                            'length = InStr(1, Frame.innerhtml, ">", vbTextCompare)
                            'URL4Update = Mid(Frame.innerhtml, length + 1, InStr(length, Frame.innerhtml, "</a", vbTextCompare) - length)
                            MsgBox "found ID or accomodation " & URL4Update, , "Found link"
                            GoTo FoundHousing
                        End If
                    Next Frame
FoundHousing:
                URL4Update = "https://na68.salesforce.com/" & URL4Update
                Set ScavangeIE = navigate2page_wait2load(ScavangeIE, URL4Update)
                CrawlInstruct = Array("CreatedBy_ileinner", "CF00N30000009ot87_ileinner")
         
                For i = 0 To 1
                    Set FieldInfo = Fetch_Fields(ScavangeIE, (CrawlInstruct(i)))
                    'Check to see if field is a link containt an anchor and get the ID
                        If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                            Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                            matrix(i, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
                            matrix(i, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                            Length = Len(FieldInfo.innerhtml)
                            matrix(i, 0) = Mid(FieldInfo.innerhtml, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) + 4, Length - InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - 4)
                        Else
                            matrix(i, 1) = FieldInfo.innerhtml
                        End If
             
                Next i
          
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&00N1300000BLavV=", "<ID>", ID) & matrix(0, 0) & " address was updated to " & matrix(1, 1)
        End If
        End If
      
            
            If Instructions = "Prepare for Culture" Then
                If Len(ID) = 15 Then
                 CrawlInstruct = Array("001")
                 URL4Update = WebCrawl(ID, CrawlInstruct)
                 URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                 IE = navigate2page_wait2load(IE, URL4Update)
                 CrawlInstruct = Array("acc17city", "acc17state")
                ' CrawlInstruct = Fetch_Fields(IE, CrawlInstruct)
                 For Each REturnedvalue In CrawlInstruct
                     URL4Update = URL4Update & " " & REturnedvalue
                     Next REturnedvalue
         
                Else
                End If
            End If
     
                If Instructions = "Investigate MC" Then
                URL4Update = "nothing"
                            If Len(ID) = 15 Then
                 
                                If Len(Name) < 15 Then
                                CrawlInstruct = Array("a0d")
                                TableData = WebCrawl(ID, CrawlInstruct)
                                IE.Visible = True
                                URL4Update = "https://na68.salesforce.com/a0d1300000RpDoW"
                                Set IE = navigate2page_wait2load(IE, URL4Update)
                                Set page_tables = Fetch_Fields(IE, "tr")
                          
                                    Previous_Value = 0
                                    For Each Element In page_tables
                                    If Previous_Value <> 0 Then
                                    tabledate = Element.innerhtml
                                    Else
                                     Previous_Value = InStr(1, Element.innerhtml, "Match Name", vbTextCompare)
                                    End If
                              
                                    Next Element
                           
                                URL4Update = "https://na68.salesforce.com/500/e?&retURL=%F2a0d1300000NtyWi&RecordType=012a0000001NbNh&ent=Case&00Na000000B3Ief=Participant&cas11=Email&cas14=Overdue+Monthly+Contact&cas5=Administrative&00Na000000B3Ieg=Monthly+Contact&CF00Na000000B2eGh=ENAME&CF00Na000000B2eGh_lkid=<ENGAGEMENTID>&CF00Na000000B34SG=AName&CF00Na000000B34SG_lkid=<ID>&cas21=0&cas7=Wait+External&00N1300000BLavQ=<DUE>&00N1300000BLavV=WOE"
                                URL4Update = Replace(URL4Update, "<ID>", ID)
                                URL4Update = Replace(URL4Update, "<ENGAGEMENTID>", TableData)
                                Due_Date = Format(Now(), "dd/MM/yyyy")
                                Due_Date = DateAdd("d", 5, Due_Date)
                                URL4Update = Replace(URL4Update, "<DUE>", Due_Date)
                                Else
                                GoTo EndOfLoop
                                End If
                'CrawlInstruct = Array("a0d")
               ' tabledata = WebCrawl(ID, CrawlInstruct)
                'URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>&cas3=Name&cas3_lkid=", "<ID>", ID) & tabledata
                'tabledata = "sandwich"
               ' Else
               ' tabledata = "fail"
               End If
            End If
     
            'This is for QA Testing Only
            'This is for QA Testing Only
            If Instructions = "Transfer Student to QA" Then
                If Len(ID) = 15 Then
                URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                Set IE = navigate2page_wait2load(IE, URL4Update)
         
                
                Else
                End If
            End If
            'This is for QA Testing Only
            'This is for QA Testing Only
     
            
 
           
            
            
            'End of Loop for proccessing Entries
     
            
                       
                    Range("A" & Current_Row).Value = URL4Update
                    'On Error Resume Next
             
                    Range("B" & Current_Row).Value = TableData
             
                    Range("C" & Current_Row).Value = ID
                    Range("D" & Current_Row).Value = Name
                    Range("E" & Current_Row).Value = Instructions
             
                    
            Current_Row = Current_Row + 1
                    'If the link comes back blank, go ahead and just skip logging it.
                    If URL4Update = "" Then
                    Current_Row = Current_Row - 1
                    End If
EndOfLoop:
       Next TableData
 
       Range("A2").Value = "Hoping the next leap is the leap home...."
Collect_Data = Current_Row
       ' Clean up
    IE.Quit
    Set IE = Nothing
    'If ScavangeIE <> "" Then
    'ScavangeIE.Quit
   'End If
    'Set ScavangeIE = Nothing
    Set page_info = Nothing
    Set page_tables = Nothing
 
End Function
Sub QuantomLeap()
Dim resulting_row As Integer
Dim listofreports As Object
' Set listofreports = ["https://na68.salesforce.com/00O130000091CvG","https://na68.salesforce.com/00O130000091Cxv"]
resulting_row = 4
New_Sheet_Creator
Range("A2").Value = "Stuffing Dr. Sam Beckett into the Quantum Accelerator"
'For Each report In listofreports


'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095jga", resulting_row, "Sevis Error S2129", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095g74", resulting_row, "CheckIns Missing Actual Arrival Date", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095UAG", resulting_row, "Disable Japan's Housing Plans", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099TXq", resulting_row, "Housing Plans with Withdrawn Matches", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Rau", resulting_row, "Re-assign PAHR cases to Fieldstaff 05|", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095cXX", resulting_row, "Fix Premium Matchs at IP HC", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095mjc", resulting_row, "Fill in positions missing hours", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095g7O", resulting_row, "Delete SEVIS Record is Locked for Transaction/Has no updates", "reg")

'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091GvU", resulting_row, "Pull HRAs")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091IPu", resulting_row, "Prepare for Culture", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091NrA", resulting_row, "Investigate MC", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091W2G", resulting_row, "Get Housing Geotag Location", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098RB7", resulting_row, "Clear Geotags for Re-Calc", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091W2G", resulting_row, "Get Housing Geotag Location", "reg")
'resulting_row = Collect_Data("https://cs71.salesforce.com/00O4D000000OTR6", resulting_row, "USTAGE - PAHR Catalogue Transfer", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ylv", resulting_row, "Lookup an accommodation Object", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000929Nl", resulting_row, "Create Housing Plan PAHR Case", "reg")

'resulting_row = Collect_Data("", resulting_row, "Verify App-Eng-Opp Integrity", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095RDC", resulting_row, "Recalculate All PAX on an Assessment", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SBy", resulting_row, "Email PAX about uncooperative Landlord", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099V6D", resulting_row, "PAHR/PC Closes cases for no longer pending Engagements", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092YNv", resulting_row, "Applied Matches with Completed Docusigns", "reg")
'##### Application Season Only ##########
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092SlN", resulting_row, "Applications over Allocation Limit", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092SjR", resulting_row, "Applications that have missed their deadline", "reg")


resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095X67", resulting_row, "Issue HC Roster", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000009266r", resulting_row, "Rename Match", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000923OY", resulting_row, "Confirm Password Reset", "reg")
'send housing link to the PAX that requested them via the activity on the engagement
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092TF8", resulting_row, "Send Housing Plan Link", "reg")


resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092NZH", resulting_row, "Docusign 01 - Populate Operations Contact using Primary Contact", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098f3l", resulting_row, "Send Job Confirmation Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092JUm", resulting_row, "Check if PAX has submitted a unit number", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Iy7", resulting_row, "Ask for Unit number after check-in Confirmation", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092CRR", resulting_row, "Tag Incomming Apps", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ISk", resulting_row, "Tag Incomming Apps", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092OoN", resulting_row, "Send Apps back to Submitted if DOB is wrong", "reg")
 
If False Then
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092IXG", resulting_row, "Duplicate Housing Validations Part 15 - Housing Train Toot Toot", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095kai", resulting_row, "PAHR/Xplorer/Xanterra Fix", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092F88", resulting_row, "Duplicate Housing Validations Part 10 - Remove duplicate sites from Landlord", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092HZL", resulting_row, "Duplicate Housing Validations Part 11 - Fix Not Initiated Housing Plans", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092HbC", resulting_row, "Duplicate Housing Validations Part 12 - Add Landlord to Housing Assessment if missing", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Hce", resulting_row, "Duplicate Housing Validations Part 14 - Hide Housing notifications for on program PAX", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092HcF", resulting_row, "Duplicate Housing Validations Part 13 - Rename Housing Validation Assessments to include year/season", "reg")
     
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A04", resulting_row, "Assign Housing Plan PAHR Case back to Andrew", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Pwo", resulting_row, "PAHR - Program Cancelation - Handoff cases to fieldstaff", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099V8O", resulting_row, "Critical Housing Plans - 03 2nd Warning Email", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ACF", resulting_row, "Find Housing Plan for Cases Missing them", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A17", resulting_row, "Update Housing Status on PAHR Case", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A0s", resulting_row, "Upgrade PAHR Case to Housing Validation", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A0n", resulting_row, "Update Housing Status on PAHR Case v2 The Validation", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092UoJ", resulting_row, "Duplicate Housing Validations Part 1", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928DG", resulting_row, "Duplicate Housing Validations Part 2 - Redirecting Sites", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928EE", resulting_row, "Duplicate Housing Validations Part 3 - Remove duplicate PAX links from validation assessment", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928H3", resulting_row, "Duplicate Housing Validations Part 4 - Moving Duplicate Assessments to the Forest of DUPs", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928N6", resulting_row, "Duplicate Housing Validations Part 5 - Move Assessments from duplicate Landlord to primary landlord", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092NWc", resulting_row, "Duplicate Housing Validations Part 5b - Move Assessments from duplicate site to Prime Site", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928NB", resulting_row, "Duplicate Housing Validations Part 6 - Move Sites from duplicate landlord to primary landlord", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928cz", resulting_row, "Return Housing Plan to PAX for Completion every 5 days", "reg")
End If
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092YvT", resulting_row, "Request Housing for Confirmed not yet filled out Housing Plans", "reg")

'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928Nf", resulting_row, "Duplicate Housing Validations Part 7 - Move PAX via Accommodation object to the one true Assessment", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000929a1", resulting_row, "Check the Primary SOA box on Match", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000927SF", resulting_row, "Send Survey Email", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000927xD", resulting_row, "Request More Housing Info", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000927wy", resulting_row, "Sync Confirmed Housing", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000927x3", resulting_row, "Sync Confirmed Housing Part 2", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000927v7", resulting_row, "Stamp Year/Season to Landlord Validation", "reg")
 
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000925oi", resulting_row, "Send a Template via Task", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000923u0", resulting_row, "Insurance Extension Confirmation Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ueg", resulting_row, "Re-Assign Pre-Arrival Queue Cases", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cl94", resulting_row, "Cases tagged to a fake test match", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098fYF", resulting_row, "Close Overdue MC cases that are completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cjtA", resulting_row, "Close Overdue MC cases that are confirmed and email PAX", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bvK", resulting_row, "Close Overdue MC for PAX is no longer on program", "reg")
 
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098imA", resulting_row, "Send Job Confirmation Email and CC Manager", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bt9", resulting_row, "Send Overdue MC Warning Email 00|04", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008civK", resulting_row, "Send Overdue MC Warning 24 hour notice email 04|09", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cjDs", resulting_row, "Check for IP HCs and move to stage 10| for termination email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cjDn", resulting_row, "Send Overdue MC Termination Email 10|13", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cj71", resulting_row, "Use Case Match to populate Case HC Account", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098gEG", resulting_row, "Make sure fieldstaff own cases that are theirs", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098i9c", resulting_row, "Close cases for Overdue Check-Ins that are now completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098i9r", resulting_row, "ReOpen Overdue Check-Ins that are not completed/confirmed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098cRL", resulting_row, "Make sure cases stay open till MC is confirmed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cj6X", resulting_row, "Forward Overdue MCs to fieldstaff 08|09", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095hC0", resulting_row, "Make sure Overdue Monthly Contacts not in wait External are not assigned to Andrew", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098ZHw", resulting_row, "Overdue Check Ins 09 - TERMINATION", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098VsP", resulting_row, "Overdue Check Ins 99 - Check-In has been completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098U07", resulting_row, "Add Match to Case", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ukt", resulting_row, "Overdue Check Ins 03 - Set duedate", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098W1v", resulting_row, "Overdue Check Ins 04 - Send Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095h8m", resulting_row, "Overdue MC in Wait External Assign to Andrew", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095kb2", resulting_row, "RAM approved overdue MC Dissmissal Notice: 10| for termination email", "reg")


resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ueg", resulting_row, "Re-Assign Pre-Arrival Queue Cases", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091G5n", resulting_row, "Release Match from Case", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Rqy", resulting_row, "Add Match Start Date as Due Date for Overdue CheckIn Cases", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091UAI", resulting_row, "IP to Premium or Cancelled", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091Ei9", resulting_row, "Contact4Case", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Nrn", resulting_row, "Populate Accomodation Plan Accepted Date", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091eit", resulting_row, "Tag JO IPU to Case", "reg") 'retired JO IPU transparency
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091SbW", resulting_row, "Close Case Geography", "reg") 'retired 2017 PAHR
'MsgBox "Stacie's Done!", , "Status"
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091LBC", resulting_row, "Close Case Geography", "reg") 'retired 2017 PAHR
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091I1O", resulting_row, "Close Case", "reg") 'retired 2017 PAHR


'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091EHI", resulting_row, "AddIPtoMatch", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091EHI", resulting_row, "Rename Match", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cj6I", resulting_row, "Silence Job Notification", "reg")
Application.Wait (Now + #12:00:01 AM#)
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091Cxv", resulting_row, "Ownership", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091CvG", resulting_row, "Ownership", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091EI6", resulting_row, "Ownership", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091U2Y", resulting_row, "Reset Validation Status", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091U2E", resulting_row, "Ops is still reviewing Job Offer", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091U0h", resulting_row, "Housing Info Submission Required", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Q4F", resulting_row, "Attach Housing Notif Assessment to PAHR Case", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091SSo", resulting_row, "Get Housing Validation Status", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091W2G", resulting_row, "Get Housing Geotag Location", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098NEb", resulting_row, "PAHR Catalogue Transfer", "reg")
'resulting_row = Collect_Data("https://cs71.salesforce.com/00O4D000000OTR6", resulting_row, "USTAGE - PAHR Catalogue Transfer", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098dB4", resulting_row, "Hide Checkin and Overdue MCs from Fieldstaff", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098fj8", resulting_row, "Followup Apartment Number Emails", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098RjJ", resulting_row, "Generate Overdue CheckIn Cases", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bSS", resulting_row, "Generate Overdue Monthly Contact Cases 00|", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000925q5", resulting_row, "Terminated PAX -> Terminated Account to avoid repeats", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091DSA", resulting_row, "Housing Confirmed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092TQG", resulting_row, "IsCurrent Accommodations for PAX not On Program", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Rdj", resulting_row, "Fix Engagement Region Info", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092YNv", resulting_row, "Applied Matches with Completed Docusigns", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098P9E", resulting_row, "Populate missing Confirmed Dates on Check Ins", "reg")


a1ProccessUpdates
New_Sheet_Creator

'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Wir", resulting_row, "Proccess CheckIns - Confirmed", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095eV4", resulting_row, "Offer Docusign Via Match", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095h7j", resulting_row, "Position_Infos Missing Work Travel in Intrax Programs", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099Vdb", resulting_row, "New PAHR - HousingPlan Initiated", "reg")

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SOY", resulting_row, "Critical Housing Plans - 00 Case Creation and 1st email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099RrF", resulting_row, "Screen IsCurrent housing", "reg") 'this one takes forever
'Next report
    ' post updates
   a1ProccessUpdates
'MsgBox "Operation Complete", , "Status"
End Sub
Function WebCrawl(CaseID As String, NextPageTag As Variant) As String
Dim Spider As Object
'Dim page_info_crawl As Object
Dim page_tables As Object
Dim URL4Update As String
Dim Source_Report As String
Dim Current_Row As Integer
Dim next_page_target As String
Dim turn2string As String
'checkifloggedin
Set Spider = CreateObject("InternetExplorer.Application")
Spider.Visible = False
next_page_target = CaseID
'Source_Report = "https://na68.salesforce.com/" & caseID
    For Each Record In NextPageTag
        turn2string = Record
        'MsgBox turn2string, , "type of record to look for"
        Source_Report = "https://na68.salesforce.com/" & next_page_target
        Set Spider = navigate2page_wait2load(Spider, Source_Report)
        next_page_target = GetNextPageID(Spider, "a", 1, turn2string)
        'Application.Wait (Now + #12:00:02 AM#)
 
    Next Record
    'MsgBox next_page_target, , "contact ID?"
'Set Source_Report = Nothing
'Source_Report = "https://na68.salesforce.com/5001300000xbwHO"
'MsgBox Source_Report, , "SOS"
'open case
'get engagement ID
'go back to case and update contact
Source_Report = next_page_target
WebCrawl = Source_Report
Spider.Quit
End Function
Function GetNextPageID(IE As Object, Tag2lookfor As String, Current_Row As Integer, record_type As String) As String
Dim Engagement As String
Dim pag_info As Object
Set page_info = IE.document.getelementsbytagname(Tag2lookfor)
For Each valuefound In page_info
    'For Each bit In valuefound
        'Range("D" & current_row).Value = valuefound
           On Error GoTo err
        'Range("C" & current_row).Value = valuefound.innerhtml
        'Range("E" & current_row).Value = valuefound.name
        If Len(valuefound) = 43 Then
            valuefound = Right(valuefound, 15)
                If left(valuefound, 3) = record_type Then
                Engagement = valuefound
              ' Range("E" & current_row).Value = engagement
                End If
        End If
err:
      Current_Row = 1 + Current_Row
    'Next bit
Next valuefound
GetNextPageID = Engagement
'IE.Quit
End Function
Function navigate2page_wait2load(IE2 As Object, URL As String) As Object
Dim Counter As Integer
If URL = "" Then
Else
'MsgBox url, , "this is the next page"
IE2.Navigate URL
    ' Wait while IE loading...
    Do While IE2.busy
    Application.Wait (Now + #12:00:01 AM#)
    Loop
    Counter = 0
    Do While IE2.document.Title = "" And Counter < 10
    Counter = Counter + 1
    Loop
 
    Do While IE2.readystate <> 4
    Application.Wait (Now + #12:00:01 AM#)
    Loop
    'Application.Wait (Now + #12:00:10 AM#)
End If
Set navigate2page_wait2load = IE2
End Function
Function Test_Collect_Data(Source_Report As String, Current_Row As Integer, Instructions As String, Style As String) As Integer
Dim IE As Object
Dim page_info As Object
Dim page_tables As Object
Dim URL4Update As String
Dim CrawlInstruct As Variant
Dim FetchResults As Object
'Dim Current_Row As Integer
CheckifLoggedin
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = False
Set IE = navigate2page_wait2load(IE, Source_Report)
Set FetchResults = IE.document.getelementsbytagname("input", "label", "select")
'Current_Row = 3
For Each Data In FetchResults
    'If Data.Name = "" Then
    'Data.Name = "BLANK"
    'End If
    'If Data.Value = "" Then
    'Data.Value = "BLANK"
    'End If
    'If Data.ID = "" Then
    'Data.ID = "BLANK"
    'End If
    If Data.innerhtml = "" Then
    Data.ID = "BLANK"
    End If
'Range("B" & Current_Row).Value = Data.ID
'Range("C" & Current_Row).Value = Data.Name
Range("D" & Current_Row).Value = Data.innerhtml
'Range("E" & Current_Row).Value = Data.Value
Current_Row = Current_Row + 1
Next Data
 
 
 
MsgBox "test complete", , "testing"
    If Style = "tabledata" Then
        Set page_info = IE.document.getelementsbytagname("tr")
        Else
        Set page_info = IE.document.getelementsbyclassname("even", "odd")
    End If
     
        For Each tabledata2 In page_info
            Dim Length As Integer
            Dim ID As String
            Dim Name As String
     
EndOfLoop:
        Next tabledata2
     
            'MsgBox tabledata.innerhtml, , "this is what the inner HTML looks like"
            'tabledate = tabledata.innerhtml
      
 
              Range("A2").Value = "Testing Subroutine executed"
                'CrawlInstruct = Array("001")
                    'URL4Update = WebCrawl(ID, CrawlInstruct)
                    'URL4Update = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", ID)
                    'IE = navigate2page_wait2load(IE, URL4Update)
                    CrawlInstruct = Array("acc17city", "acc17state")
              
                    For Each Field In CrawlInstruct
                    URL4Update = Field
                    Set FetchResults = Fetch_Fields(IE, URL4Update)
                    Range("B" & Current_Row).Value = FetchResults(0).Value
                    Range("C" & Current_Row).Value = FetchResults
                    Current_Row = Current_Row + 1
                    Next Field
             
                    
                    
                    
                   ' For Each REturnedvalue In FetchResultst
                   '     Range("E" & current_row).Value = REturnedvalue
                        'Range("F" & current_row).Value = FetchResultst(1)
                     '   current_row = current_row + 1
                     '   Next REturnedvalue
                  
                    
                   ' Range("B" & current_row).Value = tabledata
                   ' Range("C" & current_row).Value = tabledata.innerhtml
             
                    
                    
            Current_Row = Current_Row + 1
     
 
       
Test_Collect_Data = Current_Row
       ' Clean up
    IE.Quit
    Set IE = Nothing
    Set page_info = Nothing
    Set page_tables = Nothing
 
End Function
Function Fetch_Fields_OLD(IE As Object, Field_IDs As Variant) As Variant
Dim Field_Values As varient
Dim ScrapeResults As Object
Dim arr As Variant
Dim Counter As Integer
Dim valueASstring As String
Dim number_of_Results As Integer
Dim arraysize As Integer
Counter = 1
number_of_Results = 0
For Each Field In Field_IDs
valueASstring = "sandwich"
    Range("J" & Counter).Value = valueASstring
    Range("L" & Counter).Value = IE.document.Title
    valueASstring = Field
 
    Set ScrapeResults = IE.document.GetElementsByName(Field)
        For Each Result In ScrapeResults
        number_of_Results = number_of_Results + 1
        Next Result
        For Each Result In ScrapeResults
            'Field_Values.Add result.innerhtml
            Range("K" & Counter).Value = Result
            Range("M" & Counter).Value = Result.Name
            Range("N" & Counter).Value = Result.Value
            ReDim Preserve arr(1 To Counter)
            arr(Counter) = Result.Value
            Counter = Counter + 1
        Next Result
Next Field
ReDim Preserve arr(1 To Counter)
For i = 1 To Counter
End
Fetch_Fields = arr
End Function
Function toArray(col As Variant) As Variant
  Dim arr() As Variant
  ReDim arr(1 To col.count) As Variant
  For i = 1 To col.count
      arr(i) = col(i)
  Next
  toArray = arr
End Function
Function Fetch_Fields(IE As Object, Field_ID As String) As Object
Dim URL As String
Dim ScrapeResults As Object
    'Range("J" & cOunter2).Value = Field_ID
    'Range("L" & cOunter2).Value = IE.Document.Title
On Error GoTo 0
    URL = IE.LocationURL
    If left(URL, 32) <> "https://na68.salesforce.com/home" Then
        Set ScrapeResults = IE.document.getelementbyid(Field_ID)
   End If
'
'If ScrapeResults Is Nothing Then
'MsgBox ScrapeResults(0).ID, , "fetch field results"
'End If
Set Fetch_Fields = ScrapeResults
0:
End Function
Public Function Calculate_GeoDistance(Lat_A As Double, Long_A As Double, Lat_B As Double, Long_B As Double) As Double
Dim R As Double
Dim var1 As Double
Dim var2 As Double
Dim delta_lat As Double
Dim delta_long As Double
Dim a As Double
Dim c As Double
R = 3959
'var1 = Application.WorksheetFunction.Radians(Lat_A)
'var2 = Application.WorksheetFunction.Radians(Lat_B)
'delta_lat = Application.WorksheetFunction.Radians(Lat_B - Lat_A)
'delta_long = Application.WorksheetFunction.Radians(Long_B - Long_A)
'a = Sin(delta_lat / 2) ^ 2 + Cos(var1) * Cos(var2) * Sin(delta_long / 2) ^ 2
'c = 2 * Application.WorksheetFunction.Atan2(Sqr(a), Sqr(1 - a))
var1 = Application.WorksheetFunction.Acos(Cos(Application.WorksheetFunction.Radians(90 - Lat_A)) * Cos(Application.WorksheetFunction.Radians(90 - Long_A)) + Sin(Application.WorksheetFunction.Radians(90 - Lat_A)) * Sin(Application.WorksheetFunction.Radians(90 - Long_A)) * Cos(Application.WorksheetFunction.Radians(Lat_B - Long_B))) * R
Calculate_GeoDistance = var1
End Function
Function TestingApp(Start_URL As String, Current_Row As Integer, Instructions As String) As Integer
Dim IE As Object
Dim page_info As Object
Dim page_tables As Object
Dim URL4Update As String
Dim CrawlInstruct As Variant
Dim Due_Date As String
Dim Previous_Value As String
Dim Length As Long
Dim FieldInfo As Object
Dim ScavangeIE As Object
Dim distance As Double
Dim Email As String
Dim UnitsOfTime As String
Dim ReadyToClick As Object
Dim convert2object As Object
Range("A2").Value = Instructions
'Dim tabledate As Object
CheckifLoggedin
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = True
Set IE = navigate2page_wait2load(IE, Start_URL)
Range("B2").Value = "Ding Fries are done"
Set FieldInfo = Fetch_Fields(IE, "Registration:SiteTemplate:RegForm:email")
Email = FieldInfo.Value
Set FieldInfo = IE.document.getelementsbytagname("select")
For Each Result In FieldInfo
    If Result.Name = "Registration:SiteTemplate:RegForm:lc" Then
        Result.Value = "en_US"
    End If
    If Result.Name = "Registration:SiteTemplate:RegForm:timezone" Then
        Result.Value = "Pacific/Enderbury"
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
        If Result.Name = "Registration:SiteTemplate:RegForm:ConfEmail" Then
            Result.Value = Email
        End If
        If Result.Name = "Registration:SiteTemplate:RegForm:password" Then
            Result.Value = "Intrax1234"
        End If
        If Result.Name = "Registration:SiteTemplate:RegForm:confirmPassword" Then
        Result.Value = "Intrax1234"
        End If
 
        If Result.Name = "Registration:SiteTemplate:RegForm:j_id922" Then
                Set ReadyToClick = Result
        End If
Next Result
  '      Set ReadyToClick = result
   ' current_row = ReportProgress(current_row, convert2object)
ReadyToClick.Click
Range("E" & Current_Row).Value = DieWarteschleife(IE)
Current_Row = Current_Row + 1
Application.Wait (Now + #12:00:05 AM#)
Do While IE.busy
Loop
Set FieldInfo = IE.document.getelementsbytagname("input")
'fieldINFO(0).Click
 
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Home:SiteTemplate:form:j_id121" Then
Set ReadyToClick = Result
    End If
    'Set ReadyToClick = result
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("select")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Program_Preferences:SiteTemplate:form:College" Then
        Result.Value = "Bulgaria"
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
'UnitsOfTime = Format(DateAdd("Month", 1, Now), "mm/dd/yyyy")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Program_Preferences:SiteTemplate:form:Engagement_Start" Then
        UnitsOfTime = "06/01/2017"
        Result.Value = UnitsOfTime
    End If
    If Result.Name = "Participant_PreApp_Program_Preferences:SiteTemplate:form:Engagement_End" Then
        UnitsOfTime = "08/01/2017"
        Result.Value = UnitsOfTime
    End If
    If Result.Name = "Participant_PreApp_Program_Preferences:SiteTemplate:form:j_id158" Then
 
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:Date_of_Birth" Then
        UnitsOfTime = "06/01/2017"
        Result.Value = UnitsOfTime
    End If
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:Birth_City" Then
        Result.Value = "Cirth Bity"
    End If
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:j_id126" Then
        Set ReadyToClick = Result
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("select")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:Gender" Then
        Result.Value = "Male"
    End If
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:Citizenship" Then
        Result.Value = "Bulgaria"
    End If
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:BirthCountry" Then
        Result.Value = "Bulgaria"
    End If
    If Result.Name = "Participant_PreApp_Biographical_Details:SiteTemplate:form:Country_of_Residence" Then
        Result.Value = "Bulgaria"
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
   Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
Next Result
Set FieldInfo = IE.document.getelementsbytagname("a")
    For Each Result In FieldInfo
    If Result.ID = "Participant_PreApp_Biographical_Documents:SiteTemplate:form:ContinueBtn" Then
    Set ReadyToClick = Result
    End If
    Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
 
        
        MsgBox "Click ok once you've added a picture", , "Need photo"
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:Home_Street_1" Then
        Result.Value = "123 Fake St"
    End If
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:Home_City" Then
        Result.Value = "NonExistantville"
    End If
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:Home_Postal_Code" Then
        Result.Value = "94128"
    End If
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:Phone" Then
        Result.Value = "1111111111"
    End If
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:j_id127" Then
        Set ReadyToClick = Result
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("select")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Contact_Details:SiteTemplate:form:Home_Country" Then
        Result.Value = "Bulgaria"
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Emergency_Contact:SiteTemplate:form:j_id121" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
Application.Wait (Now + #12:01:00 AM#)
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:First_Name" Then
        Result.Value = "Mommy Test"
    End If
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:Last_Name" Then
        Result.Value = "Oreo Cookie"
    End If
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:Mobile" Then
        Result.Value = "94128-21367"
    End If
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:Email" Then
        Result.Value = "noreply@intraxinc.com"
    End If
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:Role_Other" Then
        Result.Value = "Root Cause of Testing"
    End If
    If Result.Name = "Participant_PreApp_Emergency_Contact_New:SiteTemplate:form:j_id115" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Emergency_Contact:SiteTemplate:form:j_id128" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Education_Details:SiteTemplate:form:thePageBlockReq:School_Name" Then
        Result.Value = "Testing U."
    End If
    If Result.Name = "Participant_PreApp_Education_Details:SiteTemplate:form:thePageBlockReqMajor:Major" Then
        Result.Value = "Doing tests for Science!"
    End If
    If Result.Name = "Participant_PreApp_Education_Details:SiteTemplate:form:j_id128" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("select")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Language_Skills:SiteTemplate:form:Language_1_Proficiency" Then
        Result.Value = "Intermediate"
    End If
    If Result.Name = "Participant_PreApp_Language_Skills:SiteTemplate:form:Language_2" Then
        Result.Value = "Bulgarian"
    End If
    If Result.Name = "Participant_PreApp_Language_Skills:SiteTemplate:form:secondLangLevel:Language_2_Proficiency" Then
        Result.Value = "Intermediate"
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Language_Skills:SiteTemplate:form:j_id136" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
   Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
     
    If Result.ID = "Participant_PreApp_Experience:SiteTemplate:form:Prior_Exchange_Experience:1" Then
        Result.Value = "Yes"
        'result.Value = "No"
    End If
        If Result.Name = "Participant_PreApp_Experience:SiteTemplate:form:NoExperience" Then
        Result.Value = "Yes"
    End If
    If Result.Name = "Participant_PreApp_Experience:SiteTemplate:form:j_id175" Then
        Set ReadyToClick = Result
   End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
MsgBox "press ok when expereince screen is done", , "make sure page finishes"
Set FieldInfo = IE.document.getelementsbytagname("a")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essays:SiteTemplate:j_id98:essayBlock:essayTable:0:startLink" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("textarea")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essay_Details:SiteTemplate:j_id98:Narrative" Then
        Result.Value = "I have many skills that let me work hard."
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essay_Details:SiteTemplate:j_id98:j_id118" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("a")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essays:SiteTemplate:j_id98:essayBlock:essayTable:1:startLink" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("textarea")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essay_Details:SiteTemplate:j_id98:Narrative" Then
        Result.Value = "I have many hobbies that let me culture a lot."
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essay_Details:SiteTemplate:j_id98:j_id118" Then
        Set ReadyToClick = Result
    End If
Next Result
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_Preapp_Essays:SiteTemplate:j_id98:j_id120" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Home:SiteTemplate:form:j_id235" Then
        Set ReadyToClick = Result
    End If
Next Result
ReadyToClick.Click
    Range("E" & Current_Row).Value = DieWarteschleife(IE)
    Current_Row = Current_Row + 1
 
URL4Update = IE.document.Title
URL4Update = Right(URL4Update, 15)
URL4Update = "https://cs23.salesforce.com/" & URL4Update
On Error GoTo noButton
noButton:
End Function
Sub Test_QA_App()
Dim URL4Update As String
Dim Counter As Integer
Dim newUserEmail As String
Dim InviteURL As String
Dim FormatName As String
InviteURL = "https://ustage-intraxinc.cs71.force.com/intraxappengine/AppEngine_SiteRegister?LN=<last name>&FN=<first name>&isInvitation=true&partnerId=I-0384831&uIn=WTPT&email=<EMAIL>&slevel=Premium"
'InviteURL = "https://qa-intraxinc.cs23.force.com/intraxappengine/AppEngine_SiteRegister?LN=<last name>&FN=<first name>&isInvitation=true&partnerId=I-0384831&uIn=WTPT&email=<EMAIL>&slevel=Premium"
' "ThursdayTEST4vonMar3517%40mailinator.com"
FormatName = Format(Now, "HMS-mm-dd")
newUserEmail = FormatName & "@mailinator.com"
URL4Update = Replace(InviteURL, "<EMAIL>", newUserEmail)
URL4Update = Replace(URL4Update, "<first name>", FormatName)
FormatName = Format(Now, "dddd")
URL4Update = Replace(URL4Update, "<last name>", FormatName)
URL4Update = Replace(URL4Update, "@", "%40")
'URL4Update = "https://qa-intraxinc.cs23.force.com/intraxappengine/AppEngine_SiteRegister?LN=TEST4%20von%20Mar3417&FN=Thursday&isInvitation=true&partnerId=I-0384831&uIn=WTPT&email=ThursdayTEST4vonMar3517%40mailinator.com&slevel=Premium"
Counter = TestingApp(URL4Update, 4, "Create New Premium")
End Sub
Private Sub Get_and_Set_Application(Browser As Object, tagNames As String, Fields As String)
Dim FieldInfo As Object
Set FieldInfo = IE.document.getelementsbytagname(tagNames)
For Each Result In FieldInfo
    If Result.Name = "Participant_PreApp_Home:SiteTemplate:form:j_id121" Then
    Result.Click
    Result.Click
       GoTo first_click
    End If
    Range("a" & Current_Row).Value = Result.Name
    Range("B" & Current_Row).Value = Result.Value
    Current_Row = Current_Row + 1
Next Result
first_click:
End Sub
Function ReportProgress(Row2Use As Integer, ItemOfInterest As Object) As Integer
    Range("a" & Row2Use).Value = ItemOfInterest.Name
    Range("B" & Row2Use).Value = ItemOfInterest.Value
    Row2Use = Row2Use + 1
ReportProgress = Row2Use
Set ItemOfInterest = Nothing
Set Row2Use = Nothing
End Function
Private Sub QA_Test_Setup()
Dim resulting_row As Integer
Dim listofreports As Object
listofreports = Test_Collect_Data("https://na68.salesforce.com/a0U1300000FdhEh/e?retURL=%2Fa0U1300000FdhEh", 4, "Transfer Student to QA", "reg")
'resulting_row = 4
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091cKu", resulting_row, "Transfer Student to QA", "reg")
'MsgBox "Operation Complete", , "Status"
End Sub
Private Sub New_Sheet_Creator()
Dim TimeStamp As String
    sheets.Add after:=sheets(sheets.count)
    TimeStamp = Format(Now(), "dd-mm|HH.MM.s")
    sheets(ActiveSheet.Name).Name = TimeStamp
    Columns("A:A").columnwidth = 155
End Sub
Private Sub FindMatches()
Dim IE As Object
Dim HTMLparts As Object
Dim Current_Row As Integer
Dim HTMLdata As String
Dim TextA As String
Dim TextB As String
Dim RelevantResults As Collection
Dim r3lavancY As Boolean
New_Sheet_Creator
Set RelevantResults = New Collection
Current_Row = 4
r3lavancY = False
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = False
Set IE = navigate2page_wait2load(IE, "https://na68.salesforce.com/a0d1300000Rp8aa")
Set HTMLparts = IE.document.getelementsbytagname("tr")
    For Each tbody In HTMLparts
        Range("B" & Current_Row).Value = tbody.innerhtml
        HTMLdata = tbody.innerhtml
        TextA = InStr(1, tbody.innerhtml, "Match Name")
        Range("A" & Current_Row).Value = TextA
            If TextA = "" Then
            TextA = "0"
            End If
     
            If TextA = "0" Then
            Else
            r3lavancY = True
            End If
     
            If r3lavancY = True Then
            'RelevantResults.Add(HTMLdata, Current_Row)
            End If
     
        Current_Row = Current_Row + 1
        TextB = InStr(1, tbody.innerhtml, "pbTitle")
            If TextB = "0" Then
            r3lavancY = False
            End If
    Next tbody
    For Each Item In RelevantResults
        Range("C" & Current_Row).Value = Item
        Current_Row = Current_Row + 1
    Next Item
 
End Sub
Function Build_ValidationSHeet(A_Option As String) As String
Dim IE As Object
Dim HTMLparts As Object
Dim Current_Row As Integer
Dim C_Name As String
Dim C_ID As String
Dim Site_Name As String
Dim Site_ID As String
Dim Loc_Start As Double
Dim Loc_End As Double
Dim link_URL As String
Dim link_URL2 As Variant
Dim newobjectfortesting As Object
New_Sheet_Creator
Current_Row = 4
r3lavancY = False
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = True
Set IE = navigate2page_wait2load(IE, A_Option)
'Application.Wait (Now + #12:00:03 AM#)
'Set HTMLparts = Fetch_Fields(IE, "Name_ileinner")
Set HTMLparts = IE.document.getelementsbytagname("td")
For Each Result In HTMLparts
On Error Resume Next
    Loc_Start = InStr(1, Result.innerhtml, "{") + 1
        If Loc_Start < 2 Then
        Else
        Loc_End = InStr(Loc_Start, Result.innerhtml, "}")
        Loc_End = Loc_End - Loc_Start
        C_Name = Mid(Result.innerhtml, Loc_Start, Loc_End)
        End If
Next Result
    If Len(C_Name) > 5 Then
  
        Set HTMLparts = Fetch_Fields(IE, "CF00Na000000B2kKu_ilecell")
        'Site_Name = HTMLparts(0).innerhtml
        Set link_URL2 = Cleanup_SFDC_Lookup_Field(HTMLparts)
        Site_ID = link_URL2(0)
        Site_ID = Right(Site_ID, 15)
        Site_Name = link_URL2(1)
 
        link_URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=003&str=landlord+" & C_Name
        Set IE = navigate2page_wait2load(IE, link_URL)
        'MsgBox C_Name, , "Name of Contact being searched"
        C_ID = Get_Link_By_Reading_Page(IE, C_Name)
        C_ID = Right(C_ID, 15)
        'MsgBox C_ID, , "record ID of Contact being searched"
 
        link_URL = "https://na68.salesforce.com/00T/e?title=Call&what_id=<SITE ID>&followup=1&RecordType=01230000000seeI&ent=Task&tsk2_lkid=<CONTACT ID>&tsk10=Other&tsk6=Status: Needs Google%0DProgram: Summer - 2017%0DGoogle Results: %0DGoogle Notes:%0D%0D&tsk5=Housing Validation - <SITE NAME>&tsk2=name&tsk3_lkid=<SITE ID>"
        link_URL = Replace(link_URL, "<SITE ID>", Site_ID)
        link_URL = Replace(link_URL, "<CONTACT ID>", C_ID)
        link_URL = Replace(link_URL, "<SITE NAME>", Site_Name)
        Build_ValidationSHeet = link_URL
    Else
    Build_ValidationSHeet = ""
    End If
End Function
Function Get_Link_By_Reading_Page(ScavangeIE As Object, Item_Name As String) As String
Dim page_info As Object
Dim Value_of_Link As String
Set page_info = ScavangeIE.document.getelementsbytagname("a")
         
                For Each Link In page_info
                    Value_of_Link = Link.innerhtml
                        If Value_of_Link = Item_Name Then
                        'MsgBox Value_of_Link, , "inner text of link"
                        Get_Link_By_Reading_Page = Link.HREF
                        'MsgBox Get_Link_By_Reading_Page, , "contact object ID from search"
                        Get_Link_By_Reading_Page = left(Get_Link_By_Reading_Page, 43)
                        'MsgBox Get_Link_By_Reading_Page, , "contact object ID from search"
                        End If
                Next Link
End Function
Function Cleanup_SFDC_Lookup_Field(Atag As Object) As Object
Dim TagInfo(0 To 1) As Object
Dim iLength As Double
Dim nStart As Double
Dim reverse As String
nStart = InStr(1, Atag(0).innerhtml, "href=")
TagInfo(0) = Mid(Atag(0).innerhtml, nStart + 7, 15)
iLength = Len(Atag(0).innerhtml)
reverse = StrReverse(Atag(0).innerhtml)
nStart = InStr(3, Atag(0).innerhtml, ">") - 1
TagInfo(1) = left(Atag(0).innerhtml, nStart)
rTagInfo(1) = StrReverse(TagInfo(1))
TagInfo(1) = Replace(TagInfo(1), "</a>", "")
Cleanup_SFDC_Lookup_Field = TagInfo
End Function

Function ParseHTML(rHTML As String, TagStart As String, TagEnd As String) As Object
Dim RowStart As Long
Dim RowEnd As Long
Dim FullLength As Long
Dim Answers As New Collection
Dim CurrentRowNum As Integer
Dim parsestart As Long
Dim answer_String As String
Dim final_result As Object
Dim E_Counter As Integer
Dim Item_Key As String
Dim cHeaders As Variant
cHeaders = Array("Edit", "Match", "Position", "Stage", "Offer Status", "eStart", "eEnd", "Last Mod", "City?")
E_Counter = 0
parsestart = 1
FullLength = Len(rHTML)
RowStart = 1
CurrentRowNum = 0
    Do While RowEnd <> FullLength
        RowStart = InStr(parsestart, rHTML, TagStart, vbTextCompare)
            If RowStart = 0 Then
                GoTo EndLoop
            End If
            RowStart = InStr(RowStart, rHTML, ">", vbTextCompare) + 1
     
        RowEnd = InStr(RowStart, rHTML, TagEnd, vbTextCompare)
        parsestart = RowEnd
            If RowEnd = 0 Then
                GoTo EndLoop
            End If
      
            answer_String = Mid(rHTML, RowStart, RowEnd - RowStart)
     
            If E_Counter > 8 Then
            Item_Key = "Header " & E_Counter
            Else
            Item_Key = cHeaders(E_Counter)
            End If
            Answers.Add answer_String, Item_Key
            'MsgBox RowStart & " - " & RowEnd & " ** " & answer_string, , "length of block vs last character)"
            'MsgBox Answers(E_Counter), , "THis is the value stored"
            E_Counter = E_Counter + 1
    Loop
EndLoop:
'ReDim Preserve answers(CurrentRowNum)
'answer_String = Answers.Item(1)
'MsgBox answer_String, , "item number 2"
Set final_result = Answers
Set ParseHTML = final_result
End Function
Function Parse_Match_Table(URL As String) As Collection
Dim RResults As Object
Dim rAwhtml As String
Dim HeaderTitles As Object
Dim Desired_Box As String
Dim TempString As String
Dim ListOFMatches As New Collection
'MsgBox URL, , "this is the url"
Desired_Box = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">Match Name</th><th c"
URL = "https://na68.salesforce.com/" & URL
Set RResults = Get_Proccess_a_Table(URL, Desired_Box)
For Each irow In RResults
    If irow <> "" Then
    TempString = irow
    Set irow = ParseHTML(TempString, "<td", "</td>")
    On Error Resume Next
        If irow(4) <> "Withdrawn" Then
        'MsgBox "match is " & irow(4), , "match status"
        ListOFMatches.Add irow
        End If
    End If
Next irow
Set Parse_Match_Table = ListOFMatches
'Set HeaderTitles = ParseHTML(RResults(0), "<th", "</th>")
End Function
Function Get_Proccess_a_Table(URL As String, Desired_Box As String) As Object
Dim IE As Object
Dim html_content As Object
Dim rAwhtml As String
Dim parsestart As Integer
Dim RResults As Object
Dim Counter As Integer
Dim BoxLength As Long
'MsgBox URL, , "url of page we're trying to get table from"
Counter = 5
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = False
Set IE = navigate2page_wait2load(IE, URL)
Set html_content = IE.document.getelementsbyclassname("list")
BoxLength = Len(Desired_Box)
    For Each div In html_content
        rAwhtml = div.innerhtml
        parsestart = 1
        'MsgBox left(rawhtml, 138), , "Each row?"
        'Range("B" & counter).Value = left(rAwhtml, 138)
        Counter = Counter + 1
        If Desired_Box = left(rAwhtml, BoxLength) Then
            Set Get_Proccess_a_Table = ParseHTML(rAwhtml, "<tr", "</tr>")
        End If
    Next div
    IE.Quit
    Set IE = Nothing
End Function
Function Match_Rank(ListOmatches As Collection) As Collection
Dim BestOfMatches As New Collection
Dim TableColumnForRank As Integer
Dim BoxIsChecked As String
BoxIsChecked = "<img src=""/img/checkbox_checked.gif"" alt=""Checked"" class=""checkImg"" title=""Checked"" width=""21"" height=""16"">"
TableColumnForRank = 6
On Error Resume Next
    For i = 0 To ListOmatches.count
    'MsgBox ListOmatches(i).Item(TableColumnForRank), , "Troubleshooting"
        'If ListOmatches(i).Item(TableColumnForRank) = BoxIsChecked Then
        If InStr(1, ListOmatches(i).Item(TableColumnForRank), "alt=""Checked", vbTextCompare) Then
            BestOfMatches.Add ListOmatches(i).Item(1)
        End If
    Next i
    For i = 0 To ListOmatches.count
        If ListOmatches(i).Item(TableColumnForRank) = "Applied" And ListOmatches(i).Item(5) = "Offered" Then
            BestOfMatches.Add ListOmatches(i).Item(1)
        End If
   Next i
        For i = 0 To ListOmatches.count
        If ListOmatches(i).Item(4) = "Applied" And ListOmatches(i).Item(TableColumnForRank) = "" Then
            BestOfMatches.Add ListOmatches(i).Item(1)
        End If
    Next i
Set Match_Rank = BestOfMatches
End Function

Function Get_HREF_from_Anchor(HTML As String) As String
If InStr(1, HTML, "href", vbTextCompare) = 0 Then
Get_HREF_from_Anchor = HTML
Else
Get_HREF_from_Anchor = Mid(HTML, InStr(1, HTML, "href", vbTextCompare) + 7, 15)
End If
End Function
Function Clean_Text4URL(Text As String) As String
Dim Replacements As Variant
Dim Gauntlet As Collection
 
Set Gauntlet = New Collection
 
Gauntlet.Add Array("%", "%25")
Gauntlet.Add Array("!", "%21")
Gauntlet.Add Array("#", "%23")
Gauntlet.Add Array("$", "%24")
 
Gauntlet.Add Array("&", "%26")
Gauntlet.Add Array("'", "%27")
Gauntlet.Add Array("*", "%2A")
Gauntlet.Add Array("+", "%2B")
Gauntlet.Add Array("=", "%3D")
Gauntlet.Add Array(">", "%3E")
Gauntlet.Add Array("?", "%3F")
Gauntlet.Add Array("@", "%40")
Gauntlet.Add Array(" ", "%20")
 
For i = 1 To Gauntlet.count
    Text = Replace(Text, Gauntlet(i)(0), Gauntlet(i)(1), 1, , vbTextCompare)
Next i
 
Clean_Text4URL = Text
End Function
Function Retrieve_RAM(State As String) As Variant
Dim RAMs As Variant
Dim Region As Variant
Dim FieldList As Collection
Dim tValue As Variant

RAMs = LoadRAMtable()

For i = 0 To UBound(RAMs)
    If State = RAMs(i, 0) Then
        tValue = Array("Email", "", Array(RAMs(i, 2), ""))
        tValue = Array(RAMs(i, 1), "", Array(tValue))
        Region = Array(Region, RAMs(i, 6), Array(Array("RAM", "", tValue)))
        
        tValue = Array("Email", "", Array(RAMs(i, 5), ""))
        tValue = Array(RAMs(i, 4), "", Array(tValue))
        Region = PageInfo_RR(Region, "FSC", tValue)
        Region = PageInfo_RR(Region, "Queue", RAMs(i, 3))
        
        i = UBound(LoadRAMtable)
    End If
Next i

Retrieve_RAM = Region
End Function
Function LoadRAMtable() As Variant
Dim RegionResolution(51, 6) As Variant

RegionResolution(1, 0) = "AR"
RegionResolution(1, 1) = "Stacie"
RegionResolution(1, 2) = "stollaksen@intraxinc.com"
RegionResolution(1, 3) = "00Ga00000045ETX"
RegionResolution(1, 4) = "Abigail"
RegionResolution(1, 5) = "apalmer@intraxinc.com"
RegionResolution(1, 6) = "a3h130000006Tku"
RegionResolution(2, 0) = "AZ"
RegionResolution(2, 1) = "Stacie"
RegionResolution(2, 2) = "stollaksen@intraxinc.com"
RegionResolution(2, 3) = "00Ga00000045ETX"
RegionResolution(2, 4) = "Abigail"
RegionResolution(2, 5) = "apalmer@intraxinc.com"
RegionResolution(2, 6) = "a3h130000006Tku"
RegionResolution(3, 0) = "IA"
RegionResolution(3, 1) = "Stacie"
RegionResolution(3, 2) = "stollaksen@intraxinc.com"
RegionResolution(3, 3) = "00Ga00000045ETX"
RegionResolution(3, 4) = "Abigail"
RegionResolution(3, 5) = "apalmer@intraxinc.com"
RegionResolution(3, 6) = "a3h130000006Tku"
RegionResolution(4, 0) = "IL"
RegionResolution(4, 1) = "Stacie"
RegionResolution(4, 2) = "stollaksen@intraxinc.com"
RegionResolution(4, 3) = "00Ga00000045ETX"
RegionResolution(4, 4) = "Abigail"
RegionResolution(4, 5) = "apalmer@intraxinc.com"
RegionResolution(4, 6) = "a3h130000006Tku"
RegionResolution(5, 0) = "IN"
RegionResolution(5, 1) = "Stacie"
RegionResolution(5, 2) = "stollaksen@intraxinc.com"
RegionResolution(5, 3) = "00Ga00000045ETX"
RegionResolution(5, 4) = "Abigail"
RegionResolution(5, 5) = "apalmer@intraxinc.com"
RegionResolution(5, 6) = "a3h130000006Tku"
RegionResolution(6, 0) = "KS"
RegionResolution(6, 1) = "Stacie"
RegionResolution(6, 2) = "stollaksen@intraxinc.com"
RegionResolution(6, 3) = "00Ga00000045ETX"
RegionResolution(6, 4) = "Abigail"
RegionResolution(6, 5) = "apalmer@intraxinc.com"
RegionResolution(6, 6) = "a3h130000006Tku"
RegionResolution(7, 0) = "KY"
RegionResolution(7, 1) = "Stacie"
RegionResolution(7, 2) = "stollaksen@intraxinc.com"
RegionResolution(7, 3) = "00Ga00000045ETX"
RegionResolution(7, 4) = "Abigail"
RegionResolution(7, 5) = "apalmer@intraxinc.com"
RegionResolution(7, 6) = "a3h130000006Tku"
RegionResolution(8, 0) = "MI"
RegionResolution(8, 1) = "Stacie"
RegionResolution(8, 2) = "stollaksen@intraxinc.com"
RegionResolution(8, 3) = "00Ga00000045ETX"
RegionResolution(8, 4) = "Abigail"
RegionResolution(8, 5) = "apalmer@intraxinc.com"
RegionResolution(8, 6) = "a3h130000006Tku"
RegionResolution(9, 0) = "MN"
RegionResolution(9, 1) = "Stacie"
RegionResolution(9, 2) = "stollaksen@intraxinc.com"
RegionResolution(9, 3) = "00Ga00000045ETX"
RegionResolution(9, 4) = "Abigail"
RegionResolution(9, 5) = "apalmer@intraxinc.com"
RegionResolution(9, 6) = "a3h130000006Tku"
RegionResolution(10, 0) = "MO"
RegionResolution(10, 1) = "Stacie"
RegionResolution(10, 2) = "stollaksen@intraxinc.com"
RegionResolution(10, 3) = "00Ga00000045ETX"
RegionResolution(10, 4) = "Abigail"
RegionResolution(10, 5) = "apalmer@intraxinc.com"
RegionResolution(10, 6) = "a3h130000006Tku"
RegionResolution(11, 0) = "MT"
RegionResolution(11, 1) = "Stacie"
RegionResolution(11, 2) = "stollaksen@intraxinc.com"
RegionResolution(11, 3) = "00Ga00000045ETX"
RegionResolution(11, 4) = "Abigail"
RegionResolution(11, 5) = "apalmer@intraxinc.com"
RegionResolution(11, 6) = "a3h130000006Tku"
RegionResolution(12, 0) = "ND"
RegionResolution(12, 1) = "Stacie"
RegionResolution(12, 2) = "stollaksen@intraxinc.com"
RegionResolution(12, 3) = "00Ga00000045ETX"
RegionResolution(12, 4) = "Abigail"
RegionResolution(12, 5) = "apalmer@intraxinc.com"
RegionResolution(12, 6) = "a3h130000006Tku"
RegionResolution(13, 0) = "NE"
RegionResolution(13, 1) = "Stacie"
RegionResolution(13, 2) = "stollaksen@intraxinc.com"
RegionResolution(13, 3) = "00Ga00000045ETX"
RegionResolution(13, 4) = "Abigail"
RegionResolution(13, 5) = "apalmer@intraxinc.com"
RegionResolution(13, 6) = "a3h130000006Tku"
RegionResolution(14, 0) = "NM"
RegionResolution(14, 1) = "Stacie"
RegionResolution(14, 2) = "stollaksen@intraxinc.com"
RegionResolution(14, 3) = "00Ga00000045ETX"
RegionResolution(14, 4) = "Abigail"
RegionResolution(14, 5) = "apalmer@intraxinc.com"
RegionResolution(14, 6) = "a3h130000006Tku"
RegionResolution(15, 0) = "OK"
RegionResolution(15, 1) = "Stacie"
RegionResolution(15, 2) = "stollaksen@intraxinc.com"
RegionResolution(15, 3) = "00Ga00000045ETX"
RegionResolution(15, 4) = "Abigail"
RegionResolution(15, 5) = "apalmer@intraxinc.com"
RegionResolution(15, 6) = "a3h130000006Tku"
RegionResolution(16, 0) = "SD"
RegionResolution(16, 1) = "Stacie"
RegionResolution(16, 2) = "stollaksen@intraxinc.com"
RegionResolution(16, 3) = "00Ga00000045ETX"
RegionResolution(16, 4) = "Abigail"
RegionResolution(16, 5) = "apalmer@intraxinc.com"
RegionResolution(16, 6) = "a3h130000006Tku"
RegionResolution(17, 0) = "TN"
RegionResolution(17, 1) = "Stacie"
RegionResolution(17, 2) = "stollaksen@intraxinc.com"
RegionResolution(17, 3) = "00Ga00000045ETX"
RegionResolution(17, 4) = "Abigail"
RegionResolution(17, 5) = "apalmer@intraxinc.com"
RegionResolution(17, 6) = "a3h130000006Tku"
RegionResolution(18, 0) = "WI"
RegionResolution(18, 1) = "Stacie"
RegionResolution(18, 2) = "stollaksen@intraxinc.com"
RegionResolution(18, 3) = "00Ga00000045ETX"
RegionResolution(18, 4) = "Abigail"
RegionResolution(18, 5) = "apalmer@intraxinc.com"
RegionResolution(18, 6) = "a3h130000006Tku"
RegionResolution(19, 0) = "WY"
RegionResolution(19, 1) = "Stacie"
RegionResolution(19, 2) = "stollaksen@intraxinc.com"
RegionResolution(19, 3) = "00Ga00000045ETX"
RegionResolution(19, 4) = "Abigail"
RegionResolution(19, 5) = "apalmer@intraxinc.com"
RegionResolution(19, 6) = "a3h130000006Tku"
RegionResolution(20, 0) = "DC"
RegionResolution(20, 1) = "Jenn"
RegionResolution(20, 2) = "jyildiz@intraxinc.com"
RegionResolution(20, 3) = "00Ga00000045ETW"
RegionResolution(20, 4) = "Dani"
RegionResolution(20, 5) = "dcmellinger@intraxinc.com"
RegionResolution(20, 6) = "a3h130000006Tkr"
RegionResolution(21, 0) = "DE"
RegionResolution(21, 1) = "Jenn"
RegionResolution(21, 2) = "jyildiz@intraxinc.com"
RegionResolution(21, 3) = "00Ga00000045ETW"
RegionResolution(21, 4) = "Dani"
RegionResolution(21, 5) = "dcmellinger@intraxinc.com"
RegionResolution(21, 6) = "a3h130000006Tkr"
RegionResolution(22, 0) = "MD"
RegionResolution(22, 1) = "Jenn"
RegionResolution(22, 2) = "jyildiz@intraxinc.com"
RegionResolution(22, 3) = "00Ga00000045ETW"
RegionResolution(22, 4) = "Dani"
RegionResolution(22, 5) = "dcmellinger@intraxinc.com"
RegionResolution(22, 6) = "a3h130000006Tkr"
RegionResolution(23, 0) = "NJ"
RegionResolution(23, 1) = "Jenn"
RegionResolution(23, 2) = "jyildiz@intraxinc.com"
RegionResolution(23, 3) = "00Ga00000045ETW"
RegionResolution(23, 4) = "Dani"
RegionResolution(23, 5) = "dcmellinger@intraxinc.com"
RegionResolution(23, 6) = "a3h130000006Tkr"
RegionResolution(24, 0) = "OH"
RegionResolution(24, 1) = "Jenn"
RegionResolution(24, 2) = "jyildiz@intraxinc.com"
RegionResolution(24, 3) = "00Ga00000045ETW"
RegionResolution(24, 4) = "Dani"
RegionResolution(24, 5) = "dcmellinger@intraxinc.com"
RegionResolution(24, 6) = "a3h130000006Tkr"
RegionResolution(25, 0) = "PA"
RegionResolution(25, 1) = "Jenn"
RegionResolution(25, 2) = "jyildiz@intraxinc.com"
RegionResolution(25, 3) = "00Ga00000045ETW"
RegionResolution(25, 4) = "Dani"
RegionResolution(25, 5) = "dcmellinger@intraxinc.com"
RegionResolution(25, 6) = "a3h130000006Tkr"
RegionResolution(26, 0) = "NC"
RegionResolution(26, 1) = "Jenn"
RegionResolution(26, 2) = "jyildiz@intraxinc.com"
RegionResolution(26, 3) = "00Ga00000045ETW"
RegionResolution(26, 4) = "Dani"
RegionResolution(26, 5) = "dcmellinger@intraxinc.com"
RegionResolution(26, 6) = "a3h130000006Tkr"
RegionResolution(27, 0) = "SC"
RegionResolution(27, 1) = "Jenn"
RegionResolution(27, 2) = "jyildiz@intraxinc.com"
RegionResolution(27, 3) = "00Ga00000045ETW"
RegionResolution(27, 4) = "Dani"
RegionResolution(27, 5) = "dcmellinger@intraxinc.com"
RegionResolution(27, 6) = "a3h130000006Tkr"
RegionResolution(28, 0) = "VA"
RegionResolution(28, 1) = "Jenn"
RegionResolution(28, 2) = "jyildiz@intraxinc.com"
RegionResolution(28, 3) = "00Ga00000045ETW"
RegionResolution(28, 4) = "Dani"
RegionResolution(28, 5) = "dcmellinger@intraxinc.com"
RegionResolution(28, 6) = "a3h130000006Tkr"
RegionResolution(29, 0) = "WV"
RegionResolution(29, 1) = "Jenn"
RegionResolution(29, 2) = "jyildiz@intraxinc.com"
RegionResolution(29, 3) = "00Ga00000045ETW"
RegionResolution(29, 4) = "Dani"
RegionResolution(29, 5) = "dcmellinger@intraxinc.com"
RegionResolution(29, 6) = "a3h130000006Tkr"
RegionResolution(30, 0) = "AK"
RegionResolution(30, 1) = "Lalune"
RegionResolution(30, 2) = "lsip@intraxinc.com"
RegionResolution(30, 3) = "00Ga00000045ETa"
RegionResolution(30, 4) = "Ivana"
RegionResolution(30, 5) = "ifalla@intraxinc.com"
RegionResolution(30, 6) = "a3h130000006Tkv"
RegionResolution(31, 0) = "CA"
RegionResolution(31, 1) = "Lalune"
RegionResolution(31, 2) = "lsip@intraxinc.com"
RegionResolution(31, 3) = "00Ga00000045ETa"
RegionResolution(31, 4) = "Ivana"
RegionResolution(31, 5) = "ifalla@intraxinc.com"
RegionResolution(31, 6) = "a3h130000006Tkv"
RegionResolution(32, 0) = "CO"
RegionResolution(32, 1) = "Lalune"
RegionResolution(32, 2) = "lsip@intraxinc.com"
RegionResolution(32, 3) = "00Ga00000045ETa"
RegionResolution(32, 4) = "Ivana"
RegionResolution(32, 5) = "ifalla@intraxinc.com"
RegionResolution(32, 6) = "a3h130000006Tkv"
RegionResolution(33, 0) = "HI"
RegionResolution(33, 1) = "Lalune"
RegionResolution(33, 2) = "lsip@intraxinc.com"
RegionResolution(33, 3) = "00Ga00000045ETa"
RegionResolution(33, 4) = "Ivana"
RegionResolution(33, 5) = "ifalla@intraxinc.com"
RegionResolution(33, 6) = "a3h130000006Tkv"
RegionResolution(34, 0) = "ID"
RegionResolution(34, 1) = "Lalune"
RegionResolution(34, 2) = "lsip@intraxinc.com"
RegionResolution(34, 3) = "00Ga00000045ETa"
RegionResolution(34, 4) = "Ivana"
RegionResolution(34, 5) = "ifalla@intraxinc.com"
RegionResolution(34, 6) = "a3h130000006Tkv"
RegionResolution(35, 0) = "NV"
RegionResolution(35, 1) = "Lalune"
RegionResolution(35, 2) = "lsip@intraxinc.com"
RegionResolution(35, 3) = "00Ga00000045ETa"
RegionResolution(35, 4) = "Ivana"
RegionResolution(35, 5) = "ifalla@intraxinc.com"
RegionResolution(35, 6) = "a3h130000006Tkv"
RegionResolution(36, 0) = "OR"
RegionResolution(36, 1) = "Lalune"
RegionResolution(36, 2) = "lsip@intraxinc.com"
RegionResolution(36, 3) = "00Ga00000045ETa"
RegionResolution(36, 4) = "Ivana"
RegionResolution(36, 5) = "ifalla@intraxinc.com"
RegionResolution(36, 6) = "a3h130000006Tkv"
RegionResolution(37, 0) = "UT"
RegionResolution(37, 1) = "Lalune"
RegionResolution(37, 2) = "lsip@intraxinc.com"
RegionResolution(37, 3) = "00Ga00000045ETa"
RegionResolution(37, 4) = "Ivana"
RegionResolution(37, 5) = "ifalla@intraxinc.com"
RegionResolution(37, 6) = "a3h130000006Tkv"
RegionResolution(38, 0) = "WA"
RegionResolution(38, 1) = "Lalune"
RegionResolution(38, 2) = "lsip@intraxinc.com"
RegionResolution(38, 3) = "00Ga00000045ETa"
RegionResolution(38, 4) = "Ivana"
RegionResolution(38, 5) = "ifalla@intraxinc.com"
RegionResolution(38, 6) = "a3h130000006Tkv"
RegionResolution(39, 0) = "FL"
RegionResolution(39, 1) = "Katie"
RegionResolution(39, 2) = "kheath@intraxinc.com"
RegionResolution(39, 3) = "00Ga00000045ETZ"
RegionResolution(39, 4) = "Katie"
RegionResolution(39, 5) = "kheath@intraxinc.com"
RegionResolution(39, 6) = "a3h130000006Tkt"
RegionResolution(40, 0) = "GA"
RegionResolution(40, 1) = "Katie"
RegionResolution(40, 2) = "kheath@intraxinc.com"
RegionResolution(40, 3) = "00Ga00000045ETZ"
RegionResolution(40, 4) = "Katie"
RegionResolution(40, 5) = "kheath@intraxinc.com"
RegionResolution(40, 6) = "a3h130000006Tkt"
RegionResolution(41, 0) = "AL"
RegionResolution(41, 1) = "Katie"
RegionResolution(41, 2) = "kheath@intraxinc.com"
RegionResolution(41, 3) = "00Ga00000045ETZ"
RegionResolution(41, 4) = "Katie"
RegionResolution(41, 5) = "kheath@intraxinc.com"
RegionResolution(41, 6) = "a3h130000006Tkt"
RegionResolution(42, 0) = "LA"
RegionResolution(42, 1) = "Katie"
RegionResolution(42, 2) = "kheath@intraxinc.com"
RegionResolution(42, 3) = "00Ga00000045ETZ"
RegionResolution(42, 4) = "Katie"
RegionResolution(42, 5) = "kheath@intraxinc.com"
RegionResolution(42, 6) = "a3h130000006Tkt"
RegionResolution(43, 0) = "MS"
RegionResolution(43, 1) = "Katie"
RegionResolution(43, 2) = "kheath@intraxinc.com"
RegionResolution(43, 3) = "00Ga00000045ETZ"
RegionResolution(43, 4) = "Katie"
RegionResolution(43, 5) = "kheath@intraxinc.com"
RegionResolution(43, 6) = "a3h130000006Tkt"
RegionResolution(44, 0) = "TX"
RegionResolution(44, 1) = "Katie"
RegionResolution(44, 2) = "kheath@intraxinc.com"
RegionResolution(44, 3) = "00Ga00000045ETZ"
RegionResolution(44, 4) = "Katie"
RegionResolution(44, 5) = "kheath@intraxinc.com"
RegionResolution(44, 6) = "a3h130000006Tkt"
RegionResolution(45, 0) = "NY"
RegionResolution(45, 1) = "Janice"
RegionResolution(45, 2) = "jfox@intraxinc.com"
RegionResolution(45, 3) = "00Ga00000045ETY"
RegionResolution(45, 4) = "Michelle"
RegionResolution(45, 5) = "mwelsh@intraxinc.com"
RegionResolution(45, 6) = "a3h130000006Tks"
RegionResolution(46, 0) = "CT"
RegionResolution(46, 1) = "Janice"
RegionResolution(46, 2) = "jfox@intraxinc.com"
RegionResolution(46, 3) = "00Ga00000045ETY"
RegionResolution(46, 4) = "Michelle"
RegionResolution(46, 5) = "mwelsh@intraxinc.com"
RegionResolution(46, 6) = "a3h130000006Tks"
RegionResolution(47, 0) = "MA"
RegionResolution(47, 1) = "Janice"
RegionResolution(47, 2) = "jfox@intraxinc.com"
RegionResolution(47, 3) = "00Ga00000045ETY"
RegionResolution(47, 4) = "Michelle"
RegionResolution(47, 5) = "mwelsh@intraxinc.com"
RegionResolution(47, 6) = "a3h130000006Tks"
RegionResolution(48, 0) = "ME"
RegionResolution(48, 1) = "Janice"
RegionResolution(48, 2) = "jfox@intraxinc.com"
RegionResolution(48, 3) = "00Ga00000045ETY"
RegionResolution(48, 4) = "Michelle"
RegionResolution(48, 5) = "mwelsh@intraxinc.com"
RegionResolution(48, 6) = "a3h130000006Tks"
RegionResolution(49, 0) = "NH"
RegionResolution(49, 1) = "Janice"
RegionResolution(49, 2) = "jfox@intraxinc.com"
RegionResolution(49, 3) = "00Ga00000045ETY"
RegionResolution(49, 4) = "Michelle"
RegionResolution(49, 5) = "mwelsh@intraxinc.com"
RegionResolution(49, 6) = "a3h130000006Tks"
RegionResolution(50, 0) = "RI"
RegionResolution(50, 1) = "Janice"
RegionResolution(50, 2) = "jfox@intraxinc.com"
RegionResolution(50, 3) = "00Ga00000045ETY"
RegionResolution(50, 4) = "Michelle"
RegionResolution(50, 5) = "mwelsh@intraxinc.com"
RegionResolution(50, 6) = "a3h130000006Tks"
RegionResolution(51, 0) = "VT"
RegionResolution(51, 1) = "Janice"
RegionResolution(51, 2) = "jfox@intraxinc.com"
RegionResolution(51, 3) = "00Ga00000045ETY"
RegionResolution(51, 4) = "Michelle"
RegionResolution(51, 5) = "mwelsh@intraxinc.com"
RegionResolution(51, 6) = "a3h130000006Tks"

LoadRAMtable = RegionResolution
End Function
Private Function Return_AM(AM As String) As Variant
Dim AMList As New Collection

    'Hardcoded AM Info List
    AMList.Add Array("Will", "Will Traer", Array(Array("Email", "", Array("wtraer@intraxinc.com", ""))))
    AMList.Add Array("Artem", "Artem Krasnov", Array(Array("Email", "", Array("akrasnov@intraxinc.com", ""))))
    AMList.Add Array("Rebecca", "Rebecca Fee", Array(Array("Email", "", Array("rfee@intraxinc.com", ""))))
    AMList.Add Array("April", "April Farael", Array(Array("Email", "", Array("AFarael@intraxinc.com", ""))))
    
For i = 1 To AMList.count
    If AM = AMList(i)(0) Then
        Return_AM = AMList(i)
    End If
Next i

End Function
Private Function Return_Partners(PartnerName As Variant) As Variant
Dim PartnerList As Variant
Dim rPartner As Variant
Dim FieldList As Collection

PartnerList = LoadPARTNERtable()

For i = 0 To UBound(PartnerList)
    If PartnerList(i, 1) = PartnerName(0) Then
        Set FieldList = New Collection
            FieldList.Add Array("short", "", Array(PartnerList(i, 3), ""))
            FieldList.Add Array("Intrax ID", "", Array(PartnerList(i, 0), ""))
            FieldList.Add Array("Email", "", Array(PartnerList(i, 2), ""))
            FieldList.Add Array("Country", "", Array(PartnerList(i, 5), ""))
            FieldList.Add Array("Insurance", "", Array(PartnerList(i, 6), ""))
            
            FieldList.Add Array("AM", "", Return_AM((PartnerList(i, 4))))
    
        rPartner = Array(PartnerList(i, 1), PartnerName(1), CollectionConverter(FieldList))
        i = UBound(PartnerList)
    End If
Next i

Return_Partners = rPartner
End Function

Function LoadPARTNERtable() As Variant
Dim PartnerList(70, 6) As Variant


PartnerList(1, 0) = "I-0491560"
PartnerList(1, 1) = "@tic+"
PartnerList(1, 2) = "atikplus@t-com.me"
PartnerList(1, 3) = "@tic+"
PartnerList(1, 4) = "Artem"
PartnerList(1, 5) = "Montenegro"
PartnerList(1, 6) = "Print Insurance on back of Card"
PartnerList(2, 0) = "I-0012970"
PartnerList(2, 1) = "ACADEX"
PartnerList(2, 2) = "worren@gmail.com"
PartnerList(2, 3) = "ACADEX"
PartnerList(2, 4) = "Rebecca"
PartnerList(2, 5) = "Thailand"
PartnerList(2, 6) = "Print Insurance on back of Card"
PartnerList(3, 0) = "I-0663832"
PartnerList(3, 1) = "Ace International"
PartnerList(3, 2) = "maquino@aceinternational.com.do; rmartinez@aceinternational.com.do; rtavarez@aceinternational.com.do"
PartnerList(3, 3) = "Ace"
PartnerList(3, 4) = "Rebecca"
PartnerList(3, 5) = "Dominican Republic"
PartnerList(3, 6) = "Print Insurance on back of Card"
PartnerList(4, 0) = "I-0000322"
PartnerList(4, 1) = "AICEE / Intrax Serbia"
PartnerList(4, 2) = "mpopovic@ayusa.co.rs"
PartnerList(4, 3) = "AICEE"
PartnerList(4, 4) = "Artem"
PartnerList(4, 5) = "Serbia"
PartnerList(4, 6) = "Print Insurance on back of Card"
PartnerList(5, 0) = "I-0393141"
PartnerList(5, 1) = "ALFA AGENCY"
PartnerList(5, 2) = "pavlina.vlckova@alfa-agency.cz"
PartnerList(5, 3) = "Alfa Agency"
PartnerList(5, 4) = "Artem"
PartnerList(5, 5) = "Czech Republic & Slovakia"
PartnerList(5, 6) = "Print Insurance on back of Card"
PartnerList(6, 0) = "I-0012972"
PartnerList(6, 1) = "Almatur"
PartnerList(6, 2) = "anejman@almatur.pl"
PartnerList(6, 3) = "Almatur"
PartnerList(6, 4) = "Artem"
PartnerList(6, 5) = "Poland"
PartnerList(6, 6) = "Print Insurance on back of Card"
PartnerList(7, 0) = "I-0012973"
PartnerList(7, 1) = "American Experience"
PartnerList(7, 2) = "ioana.chirnogea@americanexperience.ro"
PartnerList(7, 3) = "AE"
PartnerList(7, 4) = "Will"
PartnerList(7, 5) = "Romania"
PartnerList(7, 6) = "Print Insurance on back of Card"
PartnerList(8, 0) = "I-0000156"
PartnerList(8, 1) = "American Learning Co. Ltd."
PartnerList(8, 2) = "ekawat@american-learning.com"
PartnerList(8, 3) = "Americna Learning"
PartnerList(8, 4) = "Will"
PartnerList(8, 5) = "Thailand"
PartnerList(8, 6) = "Print Insurance on back of Card"
PartnerList(9, 0) = "I-0000215"
PartnerList(9, 1) = "Atlas"
PartnerList(9, 2) = "yavuz@atlasedu.com"
PartnerList(9, 3) = "Atlas"
PartnerList(9, 4) = "Will"
PartnerList(9, 5) = "Turkey"
PartnerList(9, 6) = "Print Insurance on back of Card"
PartnerList(10, 0) = "I-0000347"
PartnerList(10, 1) = "Aupair-Caring DN"
PartnerList(10, 2) = "robyn@ovc.co.za"
PartnerList(10, 3) = "CaringDN"
PartnerList(10, 4) = "Not a Current Partner"
PartnerList(10, 5) = "South Africa"
PartnerList(10, 6) = "Print Insurance on back of Card"
PartnerList(11, 0) = "I-0000283"
PartnerList(11, 1) = "Ayusa Germany"
PartnerList(11, 2) = "adittberner@intrax.de"
PartnerList(11, 3) = "Ayusa"
PartnerList(11, 4) = "Artem"
PartnerList(11, 5) = "Germany"
PartnerList(11, 6) = "Print Insurance on back of Card"
PartnerList(12, 0) = "I-0257008"
PartnerList(12, 1) = "BiTravel Agency"
PartnerList(12, 2) = "bitravel.wt@gmail.com"
PartnerList(12, 3) = "BiTravel"
PartnerList(12, 4) = "Artem"
PartnerList(12, 5) = "Kyrgyzstan"
PartnerList(12, 6) = "Print Insurance on back of Card"
PartnerList(13, 0) = "I-0158842"
PartnerList(13, 1) = "CAMPUS Work & Study Abroad"
PartnerList(13, 2) = "boray@campusum.com"
PartnerList(13, 3) = "CAMPUS"
PartnerList(13, 4) = "Will"
PartnerList(13, 5) = "Turkey"
PartnerList(13, 6) = "Print Insurance on back of Card"
PartnerList(14, 0) = "I-0961807"
PartnerList(14, 1) = "Center for American Exchange Programs"
PartnerList(14, 2) = "oxana.odainic@gmail.com"
PartnerList(14, 3) = "Center for Amer Exchng Prog"
PartnerList(14, 4) = "Will"
PartnerList(14, 5) = "Romania"
PartnerList(14, 6) = "Print Insurance on back of Card"
PartnerList(15, 0) = "I-0012978"
PartnerList(15, 1) = "Center for International Programs"
PartnerList(15, 2) = "watusa@cip.com.ua"
PartnerList(15, 3) = "CIP"
PartnerList(15, 4) = "Artem"
PartnerList(15, 5) = "Ukraine"
PartnerList(15, 6) = "Print Insurance on back of Card"
PartnerList(16, 0) = "I-0158843"
PartnerList(16, 1) = "China Service Center for Educational Exchange"
PartnerList(16, 2) = "delia@cscee.org"
PartnerList(16, 3) = "CSCEE"
PartnerList(16, 4) = "Will"
PartnerList(16, 5) = "China"
PartnerList(16, 6) = "Print Insurance on back of Card"
PartnerList(17, 0) = "I-0681062"
PartnerList(17, 1) = "Chingoo"
PartnerList(17, 2) = "celia.lu@chingoo.cn"
PartnerList(17, 3) = "Chingoo"
PartnerList(17, 4) = "Will"
PartnerList(17, 5) = "China"
PartnerList(17, 6) = "Print Insurance on back of Card"
PartnerList(18, 0) = "I-0000014"
PartnerList(18, 1) = "CI Brazil"
PartnerList(18, 2) = "jccarvalho@ci.com.br"
PartnerList(18, 3) = "CI Brazil"
PartnerList(18, 4) = "Rebecca"
PartnerList(18, 5) = "Brazil"
PartnerList(18, 6) = "Print Insurance on back of Card"
PartnerList(19, 0) = "I-1051821"
PartnerList(19, 1) = "Columbus Exchange"
PartnerList(19, 2) = "petropavlovsk@columb-us.kz"
PartnerList(19, 3) = "Columbus Exchng"
PartnerList(19, 4) = "Artem"
PartnerList(19, 5) = "Kazakhstan"
PartnerList(19, 6) = "Do not Print"
PartnerList(20, 0) = "I-0491573"
PartnerList(20, 1) = "Columbus Travel and Consulting"
PartnerList(20, 2) = "info@columbus.ba"
PartnerList(20, 3) = "Columbus Travel"
PartnerList(20, 4) = "Artem"
PartnerList(20, 5) = "Bosnia and Herzegovina"
PartnerList(20, 6) = "Print Insurance on back of Card"
PartnerList(21, 0) = "I-0469657"
PartnerList(21, 1) = "Czech-US"
PartnerList(21, 2) = "z.homolova@czech-us.cz"
PartnerList(21, 3) = "Czech-US"
PartnerList(21, 4) = "Artem"
PartnerList(21, 5) = "Czech Republic"
PartnerList(21, 6) = "Print Insurance on back of Card"
PartnerList(22, 0) = "I-1140924"
PartnerList(22, 1) = "Euroeduca"
PartnerList(22, 2) = "iwtsupport@intraxinc.com"
PartnerList(22, 3) = "Euroeduca"
PartnerList(22, 4) = "Will"
PartnerList(22, 5) = "0"
PartnerList(22, 6) = "Print Insurance on back of Card"
PartnerList(23, 0) = "I-0012984"
PartnerList(23, 1) = "Explore Your World"
PartnerList(23, 2) = "info@goexploreyourworld.com"
PartnerList(23, 3) = "EYW"
PartnerList(23, 4) = "Rebecca"
PartnerList(23, 5) = "Jamaica"
PartnerList(23, 6) = "Print Insurance on back of Card"
PartnerList(24, 0) = "I-0022471"
PartnerList(24, 1) = "First Place, Inc."
PartnerList(24, 2) = "olive.torres@firstplaceinc.org"
PartnerList(24, 3) = "First Place"
PartnerList(24, 4) = "Will"
PartnerList(24, 5) = "Philippines"
PartnerList(24, 6) = "Print Insurance on back of Card"
PartnerList(25, 0) = "I-1297025"
PartnerList(25, 1) = "Go Wex - Chile"
PartnerList(25, 2) = "iwtsupport@intraxinc.com"
PartnerList(25, 3) = "Go Wex"
PartnerList(25, 4) = "Will"
PartnerList(25, 5) = "Chile"
PartnerList(25, 6) = "Print Insurance on back of Card"
PartnerList(26, 0) = "I-1284424"
PartnerList(26, 1) = "Go Wex - Peru"
PartnerList(26, 2) = "iwtsupport@intraxinc.com"
PartnerList(26, 3) = "Go Wex"
PartnerList(26, 4) = "Will"
PartnerList(26, 5) = "Peru"
PartnerList(26, 6) = "Print Insurance on back of Card"
PartnerList(27, 0) = "I-1260037"
PartnerList(27, 1) = "Grupo Live"
PartnerList(27, 2) = "cristhian@grupolive.com.ar"
PartnerList(27, 3) = "Grupo Live"
PartnerList(27, 4) = "Will"
PartnerList(27, 5) = "Argentina"
PartnerList(27, 6) = "Print Insurance on back of Card"
PartnerList(28, 0) = "I-0022472"
PartnerList(28, 1) = "HRInternational Inc"
PartnerList(28, 2) = "dianne.hri@gmail.com; dave.pascual@hrimanila.com"
PartnerList(28, 3) = "HRI"
PartnerList(28, 4) = "Rebecca"
PartnerList(28, 5) = "Philippines"
PartnerList(28, 6) = "Print Insurance on back of Card"
PartnerList(29, 0) = "I-0000310"
PartnerList(29, 1) = "IE Intercambio"
PartnerList(29, 2) = "lgomes@ieintercambio.com.br"
PartnerList(29, 3) = "IE Intercambio"
PartnerList(29, 4) = "Rebecca"
PartnerList(29, 5) = "Brazil"
PartnerList(29, 6) = "Print Insurance on back of Card"
PartnerList(30, 0) = "I-0494869"
PartnerList(30, 1) = "Injoy Agency"
PartnerList(30, 2) = "mirka.mikolajcikova@injoy.sk"
PartnerList(30, 3) = "Injoy Agency"
PartnerList(30, 4) = "Artem"
PartnerList(30, 5) = "Slovakia"
PartnerList(30, 6) = "Print Insurance on back of Card"
PartnerList(31, 0) = "I-1283060"
PartnerList(31, 1) = "InterLatina Paraguay"
PartnerList(31, 2) = "iwtsupport@intraxinc.com"
PartnerList(31, 3) = "InterLatina"
PartnerList(31, 4) = "Rebecca"
PartnerList(31, 5) = "Paraguay"
PartnerList(31, 6) = "Print Insurance on back of Card"
PartnerList(32, 0) = "I-0254691"
PartnerList(32, 1) = "International Educational Exchange (IEE)"
PartnerList(32, 2) = "shangyu@ieenet.com.tw"
PartnerList(32, 3) = "IEE"
PartnerList(32, 4) = "Will"
PartnerList(32, 5) = "Taiwan"
PartnerList(32, 6) = "Print Insurance on back of Card"
PartnerList(33, 0) = "I-0384780"
PartnerList(33, 1) = "Intexchange"
PartnerList(33, 2) = "masterstepan@yahoo.com"
PartnerList(33, 3) = "Intexchange"
PartnerList(33, 4) = "Artem"
PartnerList(33, 5) = "Ukraine"
PartnerList(33, 6) = "Print Insurance on back of Card"
PartnerList(34, 0) = "I-0000038"
PartnerList(34, 1) = "Intrax Chile"
PartnerList(34, 2) = "mdonoso@intrax.cl"
PartnerList(34, 3) = "Intrax Chile"
PartnerList(34, 4) = "Rebecca"
PartnerList(34, 5) = "Chile"
PartnerList(34, 6) = "Print Insurance on back of Card"
PartnerList(35, 0) = "I-0011701"
PartnerList(35, 1) = "Intrax Japan"
PartnerList(35, 2) = "mtsukui@intraxinc.com"
PartnerList(35, 3) = "Intrax Japan"
PartnerList(35, 4) = "Will"
PartnerList(35, 5) = "Japan"
PartnerList(35, 6) = "Print Insurance on back of Card"
PartnerList(36, 0) = "I-0158848"
PartnerList(36, 1) = "Intrax Kosovo"
PartnerList(36, 2) = "arber.loxha@gmail.com"
PartnerList(36, 3) = "Intrax Kosovo"
PartnerList(36, 4) = "Artem"
PartnerList(36, 5) = "Kosovo"
PartnerList(36, 6) = "Print Insurance on back of Card"
PartnerList(37, 0) = "I-0158506"
PartnerList(37, 1) = "Intrax Macedonia"
PartnerList(37, 2) = "info@intraxmacedonia.com"
PartnerList(37, 3) = "Intrax Macedonia"
PartnerList(37, 4) = "Artem"
PartnerList(37, 5) = "Macedonia"
PartnerList(37, 6) = "Print Insurance on back of Card"
PartnerList(38, 0) = "I-0468330"
PartnerList(38, 1) = "Intrax UK/EU"
PartnerList(38, 2) = "adittberner@intrax.de"
PartnerList(38, 3) = "Intrax UK-EU"
PartnerList(38, 4) = "Artem"
PartnerList(38, 5) = "Europe"
PartnerList(38, 6) = "Insurance is provided by partner"
PartnerList(39, 0) = "I-0384831"
PartnerList(39, 1) = "Intrax W/T Direct Recruitment"
PartnerList(39, 2) = "iwt-direct@intraxinc.com"
PartnerList(39, 3) = "Intrax Direct"
PartnerList(39, 4) = "Artem"
PartnerList(39, 5) = "Europe"
PartnerList(39, 6) = "Do not Print"
PartnerList(40, 0) = "I-0663488"
PartnerList(40, 1) = "ISC UNITED"
PartnerList(40, 2) = "ruslan@isc-united.com"
PartnerList(40, 3) = "UNITED WT"
PartnerList(40, 4) = "Artem"
PartnerList(40, 5) = "Russia"
PartnerList(40, 6) = "Print Insurance on back of Card"
PartnerList(41, 0) = "I-0272685"
PartnerList(41, 1) = "Kazakhstan Council for Educational Travel (KCET)"
PartnerList(41, 2) = "shiba@kcet.kz"
PartnerList(41, 3) = "KCET"
PartnerList(41, 4) = "Artem"
PartnerList(41, 5) = "Kazakhstan"
PartnerList(41, 6) = "Do not Print"
PartnerList(42, 0) = "I-0987537"
PartnerList(42, 1) = "Let's Live USA"
PartnerList(42, 2) = "mpleguezuelo@speakingschool.es"
PartnerList(42, 3) = "Lets Live USA"
PartnerList(42, 4) = "Artem"
PartnerList(42, 5) = "Spain"
PartnerList(42, 6) = "Print Insurance on back of Card"
PartnerList(43, 0) = "I-0158851"
PartnerList(43, 1) = "Lithuanian World Center"
PartnerList(43, 2) = "Pranas@lwc-wt.lt"
PartnerList(43, 3) = "LWC"
PartnerList(43, 4) = "Rebecca"
PartnerList(43, 5) = "Lithuania"
PartnerList(43, 6) = "Print Insurance on back of Card"
PartnerList(44, 0) = "I-0012989"
PartnerList(44, 1) = "Orange Education EOOD"
PartnerList(44, 2) = "iradkova@orange.bg"
PartnerList(44, 3) = "Orange"
PartnerList(44, 4) = "Will"
PartnerList(44, 5) = "Bulgaria"
PartnerList(44, 6) = "Insurance is provided by partner"
PartnerList(45, 0) = "I-0158855"
PartnerList(45, 1) = "Out of the Box"
PartnerList(45, 2) = "siewyeen@outofthebox.com.my"
PartnerList(45, 3) = "Out of the Box"
PartnerList(45, 4) = "Rebecca"
PartnerList(45, 5) = "Malaysia"
PartnerList(45, 6) = "Print Insurance on back of Card"
PartnerList(46, 0) = "I-1044057"
PartnerList(46, 1) = "PICE"
PartnerList(46, 2) = "piceperu@gmail.com"
PartnerList(46, 3) = "PICE"
PartnerList(46, 4) = "Rebecca"
PartnerList(46, 5) = "Peru"
PartnerList(46, 6) = "Print Insurance on back of Card"
PartnerList(47, 0) = "I-1313069"
PartnerList(47, 1) = "STAR Academy (Georgia)"
PartnerList(47, 2) = "iwtsupport@intraxinc.com"
PartnerList(47, 3) = "STAR Academy"
PartnerList(47, 4) = "Artem"
PartnerList(47, 5) = "Georgia"
PartnerList(47, 6) = "Print Insurance on back of Card"
PartnerList(48, 0) = "I-0404524"
PartnerList(48, 1) = "STAR Travel (Russia, European part)"
PartnerList(48, 2) = "mzasorina@startravel.ru"
PartnerList(48, 3) = "STAR Travel"
PartnerList(48, 4) = "Artem"
PartnerList(48, 5) = "Russia"
PartnerList(48, 6) = "Print Insurance on back of Card"
PartnerList(49, 0) = "I-0158856"
PartnerList(49, 1) = "STEEP INTERNATIONAL"
PartnerList(49, 2) = "dminott@steepinternational.com"
PartnerList(49, 3) = "STEEP"
PartnerList(49, 4) = "Rebecca"
PartnerList(49, 5) = "Jamaica"
PartnerList(49, 6) = "Print Insurance on back of Card"
PartnerList(50, 0) = "I-0012994"
PartnerList(50, 1) = "STM ACORD/ ACORD Travel"
PartnerList(50, 2) = "valentin.madan@acordtravel.md"
PartnerList(50, 3) = "STM ACORD"
PartnerList(50, 4) = "Artem"
PartnerList(50, 5) = "Moldova, Republic of"
PartnerList(50, 6) = "Print Insurance on back of Card"
PartnerList(51, 0) = "I-1086342"
PartnerList(51, 1) = "STM ACORD/ ACORD Travel Romania"
PartnerList(51, 2) = "info@acordtravel.ro; valentin.madan@acordtravel.md"
PartnerList(51, 3) = "STM Romania"
PartnerList(51, 4) = "Artem"
PartnerList(51, 5) = "Romania"
PartnerList(51, 6) = "Print Insurance on back of Card"
PartnerList(52, 0) = "I-0409133"
PartnerList(52, 1) = "Students Experience"
PartnerList(52, 2) = "contact@studentsexperience.ro"
PartnerList(52, 3) = "Students Experience"
PartnerList(52, 4) = "Artem"
PartnerList(52, 5) = "Romania"
PartnerList(52, 6) = "Print Insurance on back of Card"
PartnerList(53, 0) = "I-0491561"
PartnerList(53, 1) = "Suncana Vura"
PartnerList(53, 2) = "Alida.Bolaric@suncana.org"
PartnerList(53, 3) = "Suncana Vura"
PartnerList(53, 4) = "Artem"
PartnerList(53, 5) = "Croatia"
PartnerList(53, 6) = "Print Insurance on back of Card"
PartnerList(54, 0) = "I-0155793"
PartnerList(54, 1) = "Together Cultural Exchange"
PartnerList(54, 2) = "info@togetherexchange.net"
PartnerList(54, 3) = "Together Cultural Exchange"
PartnerList(54, 4) = "Rebecca"
PartnerList(54, 5) = "Ecuador"
PartnerList(54, 6) = "Print Insurance on back of Card"
PartnerList(55, 0) = "I-0025697"
PartnerList(55, 1) = "Travelmate"
PartnerList(55, 2) = "cbredemeier@travelmate.com.br"
PartnerList(55, 3) = "TRAVELMATE"
PartnerList(55, 4) = "Rebecca"
PartnerList(55, 5) = "Brazil"
PartnerList(55, 6) = "Print Insurance on back of Card"
PartnerList(56, 0) = "I-0965551"
PartnerList(56, 1) = "Universal Student Exchange - Argentina"
PartnerList(56, 2) = "wat@workuse.com"
PartnerList(56, 3) = "USE - Argentina"
PartnerList(56, 4) = "Will"
PartnerList(56, 5) = "Argentina"
PartnerList(56, 6) = "Print Insurance on back of Card"
PartnerList(57, 0) = "I-0965553"
PartnerList(57, 1) = "Universal Student Exchange - Chile"
PartnerList(57, 2) = "fbanfi@workuse.com"
PartnerList(57, 3) = "USE - Chile"
PartnerList(57, 4) = "Will"
PartnerList(57, 5) = "Chile"
PartnerList(57, 6) = "Print Insurance on back of Card"
PartnerList(58, 0) = "I-0957340"
PartnerList(58, 1) = "Universal Student Exchange - Peru"
PartnerList(58, 2) = "minurritegui@workuse.com"
PartnerList(58, 3) = "USE - Peru"
PartnerList(58, 4) = "Will"
PartnerList(58, 5) = "Peru"
PartnerList(58, 6) = "Print Insurance on back of Card"
PartnerList(59, 0) = "I-0491564"
PartnerList(59, 1) = "US JIM"
PartnerList(59, 2) = "us.jim.info@gmail.com"
PartnerList(59, 3) = "US JIM"
PartnerList(59, 4) = "Artem"
PartnerList(59, 5) = "Bosnia and Herzegovina"
PartnerList(59, 6) = "Print Insurance on back of Card"
PartnerList(60, 0) = "I-0386082"
PartnerList(60, 1) = "USCOM"
PartnerList(60, 2) = "info@uscom.kz"
PartnerList(60, 3) = "USCOM"
PartnerList(60, 4) = "Artem"
PartnerList(60, 5) = "Kazakhstan"
PartnerList(60, 6) = "Print Insurance on back of Card"
PartnerList(61, 0) = "I-0778779"
PartnerList(61, 1) = "Viking Putovanja LLC"
PartnerList(61, 2) = "info@vikingtravel.hr"
PartnerList(61, 3) = "Viking Putovanja"
PartnerList(61, 4) = "Will"
PartnerList(61, 5) = "Croatia"
PartnerList(61, 6) = "Print Insurance on back of Card"
PartnerList(62, 0) = "I-1024062"
PartnerList(62, 1) = "Vision International Philippines"
PartnerList(62, 2) = "milgem@visionph.com"
PartnerList(62, 3) = "Vision Int Phil"
PartnerList(62, 4) = "Will"
PartnerList(62, 5) = "Philippines"
PartnerList(62, 6) = "Print Insurance on back of Card"
PartnerList(63, 0) = "I-0301476"
PartnerList(63, 1) = "Voice of the World"
PartnerList(63, 2) = "anthony_vow@yahoo.com"
PartnerList(63, 3) = "Voice of the World"
PartnerList(63, 4) = "Will"
PartnerList(63, 5) = "Mongolia"
PartnerList(63, 6) = "Print Insurance on back of Card"
PartnerList(64, 0) = "I-0000006"
PartnerList(64, 1) = "Welcome Abroad SA"
PartnerList(64, 2) = "sol@welcomeabroad.com.ar"
PartnerList(64, 3) = "Welcome Abroad SA"
PartnerList(64, 4) = "Will"
PartnerList(64, 5) = "Argentina"
PartnerList(64, 6) = "Print Insurance on back of Card"
PartnerList(65, 0) = "I-0681063"
PartnerList(65, 1) = "Western Exchange"
PartnerList(65, 2) = "fay@western-exchange.cn"
PartnerList(65, 3) = "Western Exchange"
PartnerList(65, 4) = "Will"
PartnerList(65, 5) = "China"
PartnerList(65, 6) = "Print Insurance on back of Card"
PartnerList(66, 0) = "I-0240573"
PartnerList(66, 1) = "Work and Travel Club"
PartnerList(66, 2) = "info@workandtravelclub.ro"
PartnerList(66, 3) = "Work & Travel Club"
PartnerList(66, 4) = "Will"
PartnerList(66, 5) = "Romania"
PartnerList(66, 6) = "Print Insurance on back of Card"
PartnerList(67, 0) = "I-1250890"
PartnerList(67, 1) = "WorkTravel Partner Test"
PartnerList(67, 2) = "amey@intraxinc.com"
PartnerList(67, 3) = "WorkTravel Partner Test"
PartnerList(67, 4) = "April"
PartnerList(67, 5) = "Bulgaria"
PartnerList(67, 6) = "Print Insurance on back of Card"
PartnerList(68, 0) = "I-1102015"
PartnerList(68, 1) = "WT Test Partner"
PartnerList(68, 2) = "amey@intraxinc.com"
PartnerList(68, 3) = "WT Test Partner"
PartnerList(68, 4) = "April"
PartnerList(68, 5) = "Intrax HQ"
PartnerList(68, 6) = "Print Insurance on back of Card"
PartnerList(69, 0) = "I-0383673"
PartnerList(69, 1) = "Xperiences"
PartnerList(69, 2) = "guillermogilbert@live.com"
PartnerList(69, 3) = "Xperiences"
PartnerList(69, 4) = "Rebecca"
PartnerList(69, 5) = "Ecuador"
PartnerList(69, 6) = "Print Insurance on back of Card"
PartnerList(70, 0) = "I-0000063"
PartnerList(70, 1) = "Xplorer"
PartnerList(70, 2) = "worktravel@xplorer.com.ec"
PartnerList(70, 3) = "Xplorer"
PartnerList(70, 4) = "Rebecca"
PartnerList(70, 5) = "Ecuador"
PartnerList(70, 6) = "Print Insurance on back of Card"





LoadPARTNERtable = PartnerList
End Function
Private Function LoadGeographical_Restrictions() As Variant
Dim CityBased As New Collection
Dim StateBased As New Collection

StateBased.Add Array("AL", "Banned - No placements allowed")
StateBased.Add Array("CO", "Housing must be Confirmed")
StateBased.Add Array("DC", "Housing must be Confirmed")
StateBased.Add Array("DE", "Housing must be Confirmed")
StateBased.Add Array("FL", "Housing must be Confirmed")
StateBased.Add Array("GA", "Housing must be Confirmed")
StateBased.Add Array("IN", "Banned - No placements allowed")
StateBased.Add Array("KS", "Housing must be Confirmed")
StateBased.Add Array("LA", "Banned - No placements allowed")
StateBased.Add Array("MA", "Housing must be Confirmed")
StateBased.Add Array("MD", "Housing must be Confirmed")
StateBased.Add Array("MS", "Banned - No placements allowed")
StateBased.Add Array("NC", "Housing must be Confirmed")
StateBased.Add Array("ND", "Banned - No placements allowed (Premium HC only)")
StateBased.Add Array("NE", "Banned - No placements allowed")
StateBased.Add Array("NJ", "Housing must be Confirmed")
StateBased.Add Array("NY", "Housing must be Confirmed")
StateBased.Add Array("OH", "Housing must be Confirmed")
StateBased.Add Array("PA", "Banned - No placements allowed (Premium HC only)")
StateBased.Add Array("SC", "Housing must be Confirmed")
StateBased.Add Array("VA", "Housing must be Confirmed")
StateBased.Add Array("WV", "Housing must be Confirmed")

CityBased.Add Array("ALAMEDA, CA", "Housing must be Confirmed")
CityBased.Add Array("Albany, CA", "Housing must be Confirmed")
CityBased.Add Array("Alhambra, CA", "Housing must be Confirmed")
CityBased.Add Array("Alpine Meadows, CA", "Housing must be Confirmed")
CityBased.Add Array("Anaheim, CA", "Housing must be Confirmed")
CityBased.Add Array("Atherton, CA", "Housing must be Confirmed")
CityBased.Add Array("Atlantic City, NJ", "Banned - No placements allowed")
CityBased.Add Array("Belmont, CA", "Housing must be Confirmed")
CityBased.Add Array("Berkeley, CA", "Housing must be Confirmed")
CityBased.Add Array("Beverly Hills, CA", "Housing must be Confirmed")
CityBased.Add Array("Brea, CA", "Housing must be Confirmed")
CityBased.Add Array("Buena Park, CA", "Housing must be Confirmed")
CityBased.Add Array("Burbank, CA", "Housing must be Confirmed")
CityBased.Add Array("Burlingame, CA", "Housing must be Confirmed")
CityBased.Add Array("Burlington, VT", "Banned - No placements allowed")
CityBased.Add Array("Canoga Park, CA", "Housing must be Confirmed")
CityBased.Add Array("Carnelian Bay, CA", "Housing must be Confirmed")
CityBased.Add Array("Cerritos, CA", "Housing must be Confirmed")
CityBased.Add Array("Chicago, IL", "Banned - No placements allowed")
CityBased.Add Array("Compton, CA", "Housing must be Confirmed")
CityBased.Add Array("Concord, CA", "Housing must be Confirmed")
CityBased.Add Array("Conway and North Conway, NH", "Housing must be Confirmed")
CityBased.Add Array("Culver City, CA", "Housing must be Confirmed")
CityBased.Add Array("Cypress, CA", "Housing must be Confirmed")
CityBased.Add Array("Daly City, CA", "Housing must be Confirmed")
CityBased.Add Array("District of Colombia, DC", "Housing must be Confirmed")
CityBased.Add Array("Downey, CA", "Housing must be Confirmed")
CityBased.Add Array("Eagle Rock, CA", "Housing must be Confirmed")
CityBased.Add Array("East Palo Alto, CA", "Housing must be Confirmed")
CityBased.Add Array("El Cerrito, CA", "Housing must be Confirmed")
CityBased.Add Array("El Segundo, CA", "Housing must be Confirmed")
CityBased.Add Array("Emeryville, CA", "Housing must be Confirmed")
CityBased.Add Array("Encino, CA", "Housing must be Confirmed")
CityBased.Add Array("Foster City, CA", "Housing must be Confirmed")
CityBased.Add Array("Fountain Valley, CA", "Housing must be Confirmed")
CityBased.Add Array("Fremont, CA", "Housing must be Confirmed")
CityBased.Add Array("GARDEN GROVE, CA", "Housing must be Confirmed")
CityBased.Add Array("Gardena, CA", "Housing must be Confirmed")
CityBased.Add Array("Glendale, CA", "Housing must be Confirmed")
CityBased.Add Array("Glenvale, CA", "Housing must be Confirmed")
CityBased.Add Array("Granada Hills, CA", "Housing must be Confirmed")
CityBased.Add Array("Hacienda Heights, CA", "Housing must be Confirmed")
CityBased.Add Array("Half Moon Bay, CA", "Housing must be Confirmed")
CityBased.Add Array("Hampton Beach, NH", "Banned - No placements allowed")
CityBased.Add Array("Hampton, NH", "Banned - No placements allowed")
CityBased.Add Array("Hamptons, NY", "Housing must be Confirmed")
CityBased.Add Array("Harbor City, CA", "Housing must be Confirmed")
CityBased.Add Array("Hayward, CA", "Housing must be Confirmed")
CityBased.Add Array("Hermosa Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("Hollywood, CA", "Housing must be Confirmed")
CityBased.Add Array("Homewood, CA", "Housing must be Confirmed")
CityBased.Add Array("Huntington Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("Incline Village, CA", "Housing must be Confirmed")
CityBased.Add Array("Incline Village, NV", "Housing must be Confirmed")
CityBased.Add Array("Inglewood, CA", "Housing must be Confirmed")
CityBased.Add Array("Jackson Hole, WY", "Housing must be Confirmed")
CityBased.Add Array("Jackson, WY", "Housing must be Confirmed")
CityBased.Add Array("Kauai, HI", "Housing must be Confirmed")
CityBased.Add Array("Kings Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("King's Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("Kittery, ME", "Banned - No placements allowed")
CityBased.Add Array("LA Canada Flintridge, CA", "Housing must be Confirmed")
CityBased.Add Array("LA Crescenta, CA", "Housing must be Confirmed")
CityBased.Add Array("LA Habra, CA", "Housing must be Confirmed")
CityBased.Add Array("Lafayette, CA", "Housing must be Confirmed")
CityBased.Add Array("Lake Delton, WI", "Housing must be Confirmed")
CityBased.Add Array("Lake Tahoe, CA", "Housing must be Confirmed")
CityBased.Add Array("Lakewood, CA", "Housing must be Confirmed")
CityBased.Add Array("Littleton, NH", "Banned - No placements allowed")
CityBased.Add Array("Long Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("Los Altos Hills, CA", "Housing must be Confirmed")
CityBased.Add Array("Los Altos, CA", "Housing must be Confirmed")
CityBased.Add Array("Los Angeles, CA", "Housing must be Confirmed")
CityBased.Add Array("Marina Del Rey, CA", "Housing must be Confirmed")
CityBased.Add Array("Maui, HI", "Housing must be Confirmed")
CityBased.Add Array("Menlo Park, CA", "Housing must be Confirmed")
CityBased.Add Array("Middletown, RI", "Housing must be Confirmed")
CityBased.Add Array("Millbrae, CA", "Housing must be Confirmed")
CityBased.Add Array("Moffett field, CA", "Housing must be Confirmed")
CityBased.Add Array("Monrovia, CA", "Housing must be Confirmed")
CityBased.Add Array("Monterey Park, CA", "Housing must be Confirmed")
CityBased.Add Array("MONTROSE, CA", "Housing must be Confirmed")
CityBased.Add Array("Mountain View, CA", "Housing must be Confirmed")
CityBased.Add Array("Newark, CA", "Housing must be Confirmed")
CityBased.Add Array("Newport, RI", "Housing must be Confirmed")
CityBased.Add Array("North Hollywood, CA", "Housing must be Confirmed")
CityBased.Add Array("Norwalk, CA", "Housing must be Confirmed")
CityBased.Add Array("Oakland, CA", "Housing must be Confirmed")
CityBased.Add Array("Old Orchard Beach, ME", "Banned - No placements allowed")
CityBased.Add Array("Olympic Valley, CA", "Housing must be Confirmed")
CityBased.Add Array("Pacific Palisades, CA", "Housing must be Confirmed")
CityBased.Add Array("Pacifica, CA", "Housing must be Confirmed")
CityBased.Add Array("Pacoima, CA", "Housing must be Confirmed")
CityBased.Add Array("Palo Alto, CA", "Housing must be Confirmed")
CityBased.Add Array("Park City, UT", "Housing must be Confirmed")
CityBased.Add Array("Pasadena, CA", "Housing must be Confirmed")
CityBased.Add Array("Philadelphia, PA", "Premium Only")
CityBased.Add Array("Piedmont, CA", "Housing must be Confirmed")
CityBased.Add Array("Pigeon Forge, TN", "Housing must be Confirmed")
CityBased.Add Array("Pittsburgh, PA", "Premium Only")
CityBased.Add Array("Playa Del Rey, CA", "Housing must be Confirmed")
CityBased.Add Array("Pleasant Hill, CA", "Housing must be Confirmed")
CityBased.Add Array("Portsmouth, NH", "Banned - No placements allowed")
CityBased.Add Array("Rancho Palos Verdes, CA", "Housing must be Confirmed")
CityBased.Add Array("Redondo Beach, CA", "Housing must be Confirmed")
CityBased.Add Array("Redwood City, CA", "Housing must be Confirmed")
CityBased.Add Array("Reseda, CA", "Housing must be Confirmed")
CityBased.Add Array("Rosemead, CA", "Housing must be Confirmed")
CityBased.Add Array("Ross, CA", "Housing must be Confirmed")
CityBased.Add Array("Saco, ME", "Housing must be Confirmed")
CityBased.Add Array("San Bruno, CA", "Housing must be Confirmed")
CityBased.Add Array("San Carlos, CA", "Housing must be Confirmed")
CityBased.Add Array("San Francisco, CA", "Housing must be Confirmed")
CityBased.Add Array("San Leandro, CA", "Housing must be Confirmed")
CityBased.Add Array("San Mateo, CA", "Housing must be Confirmed")
CityBased.Add Array("San Rafael, CA", "Housing must be Confirmed")
CityBased.Add Array("Santa Ana, CA", "Housing must be Confirmed")
CityBased.Add Array("Santa Clara, CA", "Housing must be Confirmed")
CityBased.Add Array("Santa Monica, CA", "Housing must be Confirmed")
CityBased.Add Array("Sausalito, CA", "Housing must be Confirmed")
CityBased.Add Array("Scoobie Doo, CA", "Housing must be Confirmed")
CityBased.Add Array("Seabrook, NH", "Banned - No placements allowed")
CityBased.Add Array("Seattle, WA", "Housing must be Confirmed")
CityBased.Add Array("Sherman Oaks, CA", "Housing must be Confirmed")
CityBased.Add Array("South Lake Tahoe, CA", "Housing must be Confirmed")
CityBased.Add Array("South San Francisco, CA", "Housing must be Confirmed")
CityBased.Add Array("Squaw Valley, CA", "Housing must be Confirmed")
CityBased.Add Array("Stanford, CA", "Housing must be Confirmed")
CityBased.Add Array("Stanton, CA", "Housing must be Confirmed")
CityBased.Add Array("Stevenson Ranch, CA", "Housing must be Confirmed")
CityBased.Add Array("Studio City, CA", "Housing must be Confirmed")
CityBased.Add Array("Sun Valley, CA", "Housing must be Confirmed")
CityBased.Add Array("Sunnyvale, CA", "Housing must be Confirmed")
CityBased.Add Array("Tahoe City, CA", "Housing must be Confirmed")
CityBased.Add Array("Tahoe Vista, CA", "Housing must be Confirmed")
CityBased.Add Array("Tarzana, CA", "Housing must be Confirmed")
CityBased.Add Array("Topanga, CA", "Housing must be Confirmed")
CityBased.Add Array("Torrance, CA", "Housing must be Confirmed")
CityBased.Add Array("Truckee, CA", "Housing must be Confirmed")
CityBased.Add Array("Tujunga, CA", "Housing must be Confirmed")
CityBased.Add Array("Union City, CA", "Housing must be Confirmed")
CityBased.Add Array("Valencia, CA", "Housing must be Confirmed")
CityBased.Add Array("Valley Village, CA", "Housing must be Confirmed")
CityBased.Add Array("Venice, CA", "Housing must be Confirmed")
CityBased.Add Array("Walnut Creek, CA", "Housing must be Confirmed")
CityBased.Add Array("West Hollywood, CA", "Housing must be Confirmed")
CityBased.Add Array("Westminster, CA", "Housing must be Confirmed")
CityBased.Add Array("Whittier, CA", "Housing must be Confirmed")
CityBased.Add Array("Wisconsin Dells, WI", "Housing must be Confirmed")
CityBased.Add Array("York, ME", "Housing must be Confirmed")
CityBased.Add Array("Zephyr Cove, NV", "Housing must be Confirmed")
CityBased.Add Array("Deer Harbor, WA", "Housing must be Confirmed")
CityBased.Add Array("Portland, ME", "Housing must be Confirmed")
CityBased.Add Array("Rockland, ME", "Housing must be Confirmed")
CityBased.Add Array("Freeport, ME", "Housing must be Confirmed")
CityBased.Add Array("Rockport, ME", "Housing must be Confirmed")

LoadGeographical_Restrictions = Array(CollectionConverter(StateBased), CollectionConverter(CityBased))
End Function
Function PAX_InfoGrid(IntraxID As String, Name As String, EngagementID As String, CaseID As String, PAXsvcLvl As String, SEVIS As String, Employer As String, Partner As String, Engagement_start As String, Engagement_End As String) As String
Dim InfoBox As String
    InfoBox = "=====" & IntraxID & "==============================================="
    InfoBox = InfoBox & Chr(13) & Name & ": https://na68.salesforce.com/" & EngagementID & Chr(13) & "Case: https://na68.salesforce.com/" & CaseID & Chr(13) & "Service Level: " & PAXsvcLvl & Chr(13) & "Engagement Start: " & Engagement_start & Chr(13) & "Engagement End: " & Engagement_End & Chr(13) & "SEVIS Id: " & SEVIS
    InfoBox = InfoBox & Chr(13) & "Employer: " & Employer & Chr(13) & "Partner: " & Partner & Chr(13) & "============================================================="
PAX_InfoGrid = InfoBox
End Function

Function Email_PAX_InfoGrid_HTML(PAX As Variant) As String
Dim InfoBox As String
Dim Border As String
    
    Border = "<tr><td colspan=""4"">=========<a href=""https://na68.salesforce.com/" & PAX(11, 2) & """>&nbsp;<strong>" & PAX(8, 1) & "</strong>&nbsp;</a>========================================</td></tr>"
    '&nbsp;&nbsp;&nbsp;&nbsp;
    InfoBox = "<table style=""font-size:90%""><tr><td></td><td></td><td></td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>"
    InfoBox = InfoBox & Border
    InfoBox = InfoBox & "<tr><td></td><td align=""right""><a href=""https://na68.salesforce.com/" & PAX(11, 2) & """>" & PAX(4, 1) & "</a>: &nbsp;</td><td>https://na68.salesforce.com/" & PAX(11, 2) & "</td><td></td></tr>"
    
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Case: &nbsp;</td>"
        If PAX(39, 2) <> "" Then
            InfoBox = InfoBox & "<td>https://na68.salesforce.com/" & PAX(39, 2) & "</td>"
        Else
            InfoBox = InfoBox & "<td></td>"
        End If
    InfoBox = InfoBox & "<td></td></tr>"
    
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Service Level: &nbsp;</td><td>" & PAX(17, 1) & "</td><td></td></tr>"
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Engagement Start: &nbsp;</td><td>" & PAX(5, 1) & "</td><td></td></tr>"
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Engagement End: &nbsp;</td><td>" & PAX(6, 1) & "</td><td></td></tr>"
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">SEVIS ID: &nbsp;</td><td>" & PAX(10, 1) & "</td><td></td></tr>"
    
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Employer: &nbsp;</td><td>"
        If PAX(29, 2) <> "" Then
            InfoBox = InfoBox & "<a href=""https://na68.salesforce.com/" & PAX(29, 2) & """>" & PAX(29, 1) & "</a>"
        Else
            InfoBox = InfoBox & PAX(29, 1)
        End If
    InfoBox = InfoBox & "</td><td></td></tr>"
    
    InfoBox = InfoBox & "<tr><td></td><td align=""right"">Partner: &nbsp;</td><td>" & PAX(25, 1) & "</td><td></td></tr>"
    InfoBox = InfoBox & Border
    
    InfoBox = InfoBox & "</table>"
    
Email_PAX_InfoGrid_HTML = InfoBox
End Function
Function PAXbasicInfo(Engagement_ID As String, CaseID As String, MatchID As String, Use1for_just_engagement_2for_ENGandCON_3forENGandCONandDOB As Integer) As Variant
Dim IE As Object
Dim URL As String
Dim FieldList As Variant
Dim ListNames As Variant
Dim fieldINF0 As Object
Dim Length As Integer
Dim Counter As Integer
Dim AnswerTable(46, 2) As Variant
Dim Previous As String
Dim repOrting As Integer
Dim DataCollection As Collection
Dim RegionResolution As Variant
Dim AMList(3, 1) As Variant
Dim PartnerMissing As Boolean

repOrting = 2

'things I need
'Name (account) CF00Na0000009s148_ileinner
'Engagement ID
'Start date 00Na0000009s14D_ileinner
'End date 00Na0000009s14C_ileinner
'Gender00Na000000B2Kgi_ileinner
'Intrax ID
'Partner
'Field IDs for Engagement
FieldList = Array("CF00Na0000009s148_ileinner", "00Na0000009s14D_ileinner", "00Na0000009s14C_ileinner", "00Na000000B2Kgi_ileinner", "00Na000000B2kL8_ileinner", "CF00Na000000B2Kgy_ileinner", "00Na000000B2eH2_ileinner", "Name_ileinner", "CF00Na0000009s14M_ileinner", "00Na0000009s14S_ileinner", "00Na000000B2Fr2_ileinner", "00Na000000B3Ieh_ileinner", "00Na000000B33kI_ileinner", "00Na000000B2tGX_ileinner", "00Na000000B2Fr2_ileinner")
'List of Field Names for entire set
ListNames = Array("CC", "BCC", "Subject", "Body", "PAX Account", "Engagement Start", "Engagement End", "Gender", "Intrax ID", "Partner", "SEVIS ID", "Engagement Name", "Opportunity", "Engagement Status", "Placement Status", "Current State", "Arrival", "PAX Service Lvl", "Placement Status", "Primary Match", "Contact ID", "DOB", "Citizenship", "Email", "Mr/Ms", "Partner Email", "Location", "RAM", "Fieldstaff", "HC Account", "Position", "Employment Dates", "HC Contact", "HC Service Lvl", "HC Opp Stage", "Next Step", "HC Opp", "Regional Queue", "Account Manager", "Case ID", "Due Date", "X Days", "All Matches?", "HC.short", "CaseUpdates", "Assessment List", "HousingPlan Assessment")
'                   0     1        2         3          4               5                 6               7            8            9         10              11               12            13                      14                 15           16              17                18                 19            20         21         22         23       24           25            26        27         28             29          30                 31          32              33               34               35       36         37                 38                  39          40          41         42              43          44              45                  46
If Engagement_ID = "" Then
Debug.Print "Engagement ID was blank.  Skipping"
 For i = 0 To UBound(ListNames)
 AnswerTable(i, 0) = ListNames(i)
 Next i
Else

URL = "https://na68.salesforce.com/" & Engagement_ID
Call opNAV(IE, "nav", URL)
AnswerTable(19, 2) = MatchID

Counter = 0
For i = 0 To UBound(ListNames)
    AnswerTable(i, 0) = ListNames(i)
    'don't try to fetch fields outside of the fieldlist
    If i < 19 And i > 3 Then
        Set FieldInfo = Fetch_Fields(IE, (FieldList(i - 4)))
        'Check to see if field is a link containt an anchor and get the ID
        If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
            Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
            AnswerTable(i, 1) = FixHTML(Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length))
            AnswerTable(i, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
        Else
            AnswerTable(i, 1) = FixHTML(FieldInfo.innerhtml)
        End If
    Debug.Print "PAXInfo results " & AnswerTable(i, 0) & " = " & AnswerTable(i, 1) & " | " & AnswerTable(i, 2)
    End If
    Counter = Counter + 1
Next i
'this Corrects the name to not be in all CAPs
AnswerTable(4, 1) = WorksheetFunction.Proper(AnswerTable(4, 1))
AnswerTable(11, 2) = Engagement_ID
AnswerTable(39, 2) = CaseID
FieldList = LoadPARTNERtable()
        AMList(0, 0) = "Will"
        AMList(1, 0) = "Rebecca"
        AMList(2, 0) = "Artem"
        AMList(0, 1) = "wtraer@intraxinc.com"
        AMList(1, 1) = "rfee@intraxinc.com"
        AMList(2, 1) = "akrasnov@intraxinc.com"
        AMList(3, 0) = "April"
        AMList(3, 0) = "AFarael@intraxinc.com"
  
PartnerMissing = True
For i = 1 To UBound(FieldList)
    If UCase(AnswerTable(9, 1)) = UCase(FieldList(i, 1)) Then
        AnswerTable(25, 1) = FieldList(i, 3)
        AnswerTable(25, 2) = FieldList(i, 2)
        AnswerTable(38, 1) = FieldList(i, 4)
        PartnerMissing = False
  
            For j = 0 To 2
                If AnswerTable(38, 1) = AMList(j, 0) Then
                    AnswerTable(38, 2) = AMList(j, 1)
                End If
            Next j
    End If
Next i

If Use1for_just_engagement_2for_ENGandCON_3forENGandCONandDOB > 2 Then
    'Head over to Account to pull DOB and Citizenship and email
        URL = "https://na68.salesforce.com/" & AnswerTable(4, 2)
        Call opNAV(IE, "nav", URL)
        FieldList = Array("PersonBirthdate_ileinner", "00N300000068vCb_ileinner", "PersonEmail_ileinner")
            For i = 0 To 2
                    Set FieldInfo = Fetch_Fields(IE, (FieldList(i)))
                    'Check to see if field is a link containt an anchor and get the ID
                    If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                        Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                       AnswerTable(21 + i, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
                        AnswerTable(21 + i, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                    Else
                        AnswerTable(21 + i, 1) = FieldInfo.innerhtml
                    End If
                Counter = Counter + 1
            Next i
End If
If Use1for_just_engagement_2for_ENGandCON_3forENGandCONandDOB > 1 Then
    'Head over Opportunity and grab Contact ID
        URL = "https://na68.salesforce.com/" & AnswerTable(12, 2)
        Call opNAV(IE, "nav", URL)
        FieldList = Array("CF00Na0000009rUSE_ileinner")
            For i = 0 To 0
                    Set FieldInfo = Fetch_Fields(IE, (FieldList(i)))
                    'Check to see if field is a link containt an anchor and get the ID
                    If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                        Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                        AnswerTable(20 + i, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
                        AnswerTable(20 + i, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                    Else
                        AnswerTable(20 + i, 1) = FieldInfo.innerhtml
                    End If
                Counter = Counter + 1
            Next i
End If
'this uses the match ID the PAX package came with instead of finding a new one.
'this finds and pull the "primary" match
If AnswerTable(18, 1) = "Confirmed" Or AnswerTable(18, 1) = "Pending" Then
    If AnswerTable(19, 2) = "" Then
        URL = "https://na68.salesforce.com/" & AnswerTable(12, 2)
        Call opNAV(IE, "nav", URL)
        Set FieldInfo = Fetch_Fields(IE, "CF00Na0000009rUSE_ileinner")
  
                        Set DataCollection = Parse_Match_Table(Engagement_ID)
                        Set DataCollection = Match_Rank(DataCollection)
                  
                        URL = ""
                        For Each Reply In DataCollection
                        URL = Reply
                        Next Reply
                
                        If InStr(1, URL, "href", vbTextCompare) > 1 Then
                        URL = Mid(URL, InStr(1, URL, "href", vbTextCompare) + 7, 15)
                        End If
        AnswerTable(19, 2) = URL
    End If
    'this pulls all the employer info
    If AnswerTable(19, 2) <> "" Then
        If Use1for_just_engagement_2for_ENGandCON_3forENGandCONandDOB > 3 Then
           'Head over to match and collect info
                URL = "https://na68.salesforce.com/" & AnswerTable(19, 2)
                Call opNAV(IE, "nav", URL)
                FieldList = Array("CF00N1300000BOCaF_ileinner", "CF00N30000008REJy_ileinner", "00N1300000BOUIG_ileinner", "00N1300000BOUIL_ileinner")
                    For i = 0 To 3
                            ListNames = FetchField(IE, (FieldList(i)))
                            'Check to see if field is a link containt an anchor and get the ID
                            If ListNames(1) <> "" Then
                                AnswerTable(29 + i, 1) = ListNames(0)
                                AnswerTable(29 + i, 2) = ListNames(1)
                            Else
                                'This checks if it's the employment end date and then moves it into the field next to the start date
                                If "00N1300000BOUIL_ileinner" = (FieldList(i)) Then
                                    AnswerTable(29 + i - 1, 2) = ListNames(0)
                                    Else
                                    AnswerTable(29 + i, 1) = ListNames(0)
                                End If
            End If
                        Counter = Counter + 1
                    Next i
  
                'This is to get the HC Opportunity ID & location
            If AnswerTable(30, 2) <> "" Then
                URL = "https://na68.salesforce.com/" & AnswerTable(30, 2)
                Call opNAV(IE, "nav", URL)
             
                Set FieldInfo = Fetch_Fields(IE, "CF00N30000008RES7_ileinner")
                    If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                            Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                           AnswerTable(36, 1) = Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length)
                            AnswerTable(36, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                       Else
                            AnswerTable(36, 1) = FieldInfo.innerhtml
            End If
               
                'City
                Set FieldInfo = Fetch_Fields(IE, "00N30000008RCsq_ileinner")
                AnswerTable(26, 1) = FieldInfo.innerhtml
                'State
                Set FieldInfo = Fetch_Fields(IE, "00N30000008RCsv_ileinner")
                AnswerTable(26, 2) = FieldInfo.innerhtml
             
                URL = "https://na68.salesforce.com/" & AnswerTable(36, 2)
                Call opNAV(IE, "nav", URL)
                'on the HC Opp get the service lvl and contact
                FieldList = Array("CF00Na0000009rUSE_ileinner", "00N30000007CyH2_ileinner", "opp11_ileinner", "opp10_ileinner")
                    For i = 0 To 3
                            Set FieldInfo = Fetch_Fields(IE, (FieldList(i)))
                            'Check to see if field is a link containt an anchor and get the ID
                            If InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) > 0 Then
                                Length = InStr(1, FieldInfo.innerhtml, ">", vbTextCompare) + 1
                                AnswerTable(32 + i, 1) = FixHTML(Mid(FieldInfo.innerhtml, Length, InStr(1, FieldInfo.innerhtml, "</a>", vbTextCompare) - Length))
                                AnswerTable(32 + i, 2) = Get_HREF_from_Anchor(FieldInfo.innerhtml)
                            Else
                                    AnswerTable(32 + i, 1) = FieldInfo.innerhtml
                           End If
                    Next i
                 'Get contact Email
           
                 
                If AnswerTable(32, 2) = "" Then
                    'IE.Visible = True
                    'MsgBox "Opportunity is missing primary contact", , ""
                Else
          
                URL = "https://na68.salesforce.com/" & AnswerTable(32, 2)
                Call opNAV(IE, "nav", URL)
                'Set FieldInfo = Fetch_Fields(IE, "con15_ileinner")
                    AnswerTable(32, 2) = FetchField(IE, "con15_ileinner")(0)
                 
                    If InStr(AnswerTable(32, 2), "Email is bounced") > 0 Then
                        IE.Visible = True
                        MsgBox "Opportunity primary contact is bouncing", , ""
                    End If
                     'this should close the missing contact loop.
                End If
            End If
        End If
        
    End If
    Else
    AnswerTable(29, 1) = "No placements currently confirmed"
    AnswerTable(43, 1) = AnswerTable(14, 1)
End If
'fieldstaff info
            RegionResolution = LoadRAMtable()
            If AnswerTable(26, 2) = "" Then
                AnswerTable(26, 2) = AnswerTable(15, 1)
          
            End If
       
            If AnswerTable(26, 2) <> "" Then
                For i = 0 To UBound(RegionResolution)
                    If RegionResolution(i, 0) = AnswerTable(26, 2) Then
                        AnswerTable(27, 1) = RegionResolution(i, 1)
                        AnswerTable(27, 2) = RegionResolution(i, 2)
                        AnswerTable(37, 1) = RegionResolution(i, 3)
                        AnswerTable(37, 2) = RegionResolution(i, 6)
                        AnswerTable(28, 1) = RegionResolution(i, 4)
                        AnswerTable(28, 2) = RegionResolution(i, 5)
                    End If
                Next i
            End If
'set Mr. Vs Ms.
If AnswerTable(7, 1) = "Male" Then
    AnswerTable(24, 1) = "Mr. " & AnswerTable(4, 1)
Else
    If AnswerTable(7, 1) = "Female" Then
        AnswerTable(24, 1) = "Ms. " & AnswerTable(4, 1)
    Else
        AnswerTable(24, 1) = AnswerTable(4, 1)
    End If
End If
'CHeck service level of HC Opp and sets employer's email if it's IP, otherwise use the RAM's email
If AnswerTable(33, 1) = "Independent" Then
    AnswerTable(33, 2) = AnswerTable(32, 2)
Else
    If AnswerTable(33, 1) = "Premium" Then
        AnswerTable(33, 2) = AnswerTable(27, 2)
    Else
        AnswerTable(33, 2) = AnswerTable(25, 2) 'partner email since there's no HC
    End If
End If


Debug.Print "##################### Employer email set to: " & AnswerTable(33, 2)

'This attempts to shorten the HC Name so it will fit in the subject
AnswerTable(43, 1) = ParseHCName((AnswerTable(29, 1)), 40 - Len((AnswerTable(25, 1))))
'This builds and sets the PAX info block for the bottom of the eamil
'AnswerTable(3, 2) = Chr(13) & Chr(13) & Chr(13) & PAX_InfoGrid((AnswerTable(8, 1)), (AnswerTable(4, 1)), (AnswerTable(11, 2)), (AnswerTable(39, 2)), (AnswerTable(17, 1)), (AnswerTable(10, 1)), (AnswerTable(29, 1)), (AnswerTable(9, 1)), (AnswerTable(5, 1)), (AnswerTable(6, 1)))

AnswerTable(3, 2) = Email_PAX_InfoGrid_HTML(AnswerTable)

If PartnerMissing Then
'if the partner name wasn't recognized then send an email notification
    Call Send_Warning(AnswerTable)
End If

IE.Quit
Set IE = Nothing
End If
PAXbasicInfo = AnswerTable
End Function
Sub Test_PAX_Info()
Dim PAXInfo As Variant
Dim Row As Integer
Dim newvalude As String
Dim Matches(2) As Variant
Dim Mtaches As New Collection
CheckifLoggedin
PAXInfo = InputBox("URL of an Engagement to lookup")
PAXInfo = left(PAXInfo, 43)
PAXInfo = Right(PAXInfo, 15)
If Len(PAXInfo) < 15 Then
PAXInfo = "XXX"
End If
  If Mid(PAXInfo, 1, 3) <> "a0d" Then
  PAXInfo = "a0d1300000TwITi"
  Else
  PAXInfo = Right(PAXInfo, 15)
  End If
PAXInfo = PAXbasicInfo("a0d1300000RpJ3j", "", "", 4)
'PAXinfo = PAXbasicInfo("a0d1300000PSSHE", "", 4)
'PAXinfo = PAXbasicInfo("a0d1300000TwP6R", 4)
Row = 3
PAXInfo(1, 1) = PAXInfo(25, 2) & "; " & PAXInfo(27, 2) & "; " & PAXInfo(38, 2)
Matches(0) = Array("Butcher", "Confirmed", "ID1234564")
Matches(1) = Array("Receptionist", "applied", "ID85858")
Matches(2) = Array("Test dummy", "ended early", "ID4567891")
PAXInfo(42, 1) = Matches
'UBound(PAXinfo(42, 1))
For i = 0 To 2
    Mtaches.Add ((PAXInfo(42, 1)(i)))
Next i
'PAXinfo(42, 1) = Mtaches
For i = 0 To UBound(PAXInfo)
    Range("A" & Row).Value = PAXInfo(i, 0)
    Range("B" & Row).Value = PAXInfo(i, 1)
    Range("C" & Row).Value = PAXInfo(i, 2)
    Row = Row + 1
Next i
For i = 0 To UBound(PAXInfo(42, 1))
    'Range("A" & row).Value = Match
    Range("A" & Row).Value = PAXInfo(42, 1)(i)(2)
    Row = Row + 1
Next i
End Sub
Sub OverDue_Emails()
Dim resulting_row As Integer
Dim listofreports As Object
' Set listofreports = ["https://na68.salesforce.com/00O130000091CvG","https://na68.salesforce.com/00O130000091Cxv"]
resulting_row = 4
New_Sheet_Creator
'For Each report In listofreports
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095hC0", resulting_row, "Make sure Overdue Monthly Contacts not in wait External are not assigned to Andrew", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098f3l", resulting_row, "Send Job Confirmation Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bt9", resulting_row, "Revised Send Overdue MC Warning Email 00|04", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099V6D", resulting_row, "PAHR/PC Closes cases for no longer pending Engagements", "reg")
 
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098i9c", resulting_row, "Close cases for Overdue Check-Ins that are now completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098VsP", resulting_row, "Overdue Check Ins 99 - Check-In has been completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098fYF", resulting_row, "Close Overdue MC cases that are completed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cjtA", resulting_row, "Close Overdue MC cases that are confirmed and email PAX", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bvK", resulting_row, "Close Overdue MC for PAX is no longer on program", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098i9r", resulting_row, "ReOpen Overdue Check-Ins that are not completed/confirmed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098cRL", resulting_row, "Make sure cases stay open till MC is confirmed", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098RjJ", resulting_row, "Generate Overdue CheckIn Cases", "reg")
a1ProccessUpdates
New_Sheet_Creator
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bt9", resulting_row, "Send Overdue MC Warning Email 00|04", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008civK", resulting_row, "Send Overdue MC Warning 24 hour notice email 04|09", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bt9", resulting_row, "Revised Send Overdue MC Warning Email 00|04", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095h8m", resulting_row, "Overdue MC in Wait External Assign to Andrew", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098U07", resulting_row, "Add Match to Case", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ukt", resulting_row, "Overdue Check Ins 03 - Set duedate", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098W1v", resulting_row, "Revised Overdue Check Ins 04 - Send Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bSS", resulting_row, "Generate Overdue Monthly Contact Cases 00|", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SOY", resulting_row, "Critical Housing Plans - 00 Case Creation and 1st email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099V8O", resulting_row, "Critical Housing Plans - 03 2nd Warning Email", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Pwo", resulting_row, "PAHR - Program Cancelation - Handoff cases to fieldstaff", "reg")

a1ProccessUpdates
'MsgBox "Operation Complete", , "Status"
End Sub
Function FixHTML(SourceMaterial2Clean As String) As String
Dim sUBs As Variant
Dim Replacements As Variant
Dim TotalThings As Integer
TotalThings = 3 - 1
sUBs = Array("&lt;", "&gt;", "&amp;")
Replacements = Array("<", ">", "&")
    For i = 0 To TotalThings
        SourceMaterial2Clean = Replace(SourceMaterial2Clean, sUBs(i), Replacements(i), 1, -1, vbTextCompare)
    Next i
FixHTML = SourceMaterial2Clean
End Function
Private Sub Send_Email(PAX As Variant, AutoSend As Boolean, UseNOreply As Boolean)
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim Buttons As Object
Dim A4Auto As String
Dim Sender As String
Dim tIme As Date

MsgBox "Attempting to send old style email that's broken", , "Alert!"



If UseNOreply Then
Sender = """No Reply Intrax"" <noreply@intraxinc.com>"
Else
Sender = """Work Travel Notification Support"" <iwtsupport@intraxinc.com>"
End If
'If AutoSend And Len(PAX(2, 1)) < 100 Then
If AutoSend Then
    A4Auto = "A"
Else
    A4Auto = "M"
End If
PAX(1, 1) = PAX(1, 1) & "; amey@intraxinc.com"
URL = "https://na68.salesforce.com/_ui/core/email/author/EmailAuthor?p2_lkid=<2Contact ID>&rtype=003&p3_lkid=<2Case ID>&retURL=<2Case ID>&p26=" & Sender & "&p4=<1CC>&p5=<1BCC>"
'Substitute values <1Value> uses the first column and 2 uses the 2nd for a given variable
For i = 0 To UBound(PAX)
    URL = Replace(URL, "<1" & PAX(i, 0) & ">", PAX(i, 1), 1, -1, vbTextCompare)
    URL = Replace(URL, "<2" & PAX(i, 0) & ">", PAX(i, 2), 1, -1, vbTextCompare)
Next i
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = True
Set IE = navigate2page_wait2load(IE, URL)
IE.document.editPage.textmode.Value = "t"
Call IE.document.parentWindow.execScript("submitFormNoSave()", "JavaScript")
'Check to see if email page is in text mode, otherwise try to set to text mode
Set FieldInfo = IE.document.getelementsbytagname("a")
'result.href = "javascript:switchTextMode()" And
For Each Result In FieldInfo
    If left(Result.innerhtml, 25) = "<b>Swith to Text-Only</b>" Then
    Result.Click
    Application.Wait (Now + #12:01:30 AM#)
    End If
Next Result
PAX(2, 1) = left(PAX(2, 1), 99)
'set the Subject
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.ID = "p6" Then
    Result.Value = PAX(2, 1)
    End If
Next Result
'Set the email Body
Set FieldInfo = IE.document.getelementsbytagname("textarea")
For Each Result In FieldInfo
    If Result.ID = "p7" Then
    Result.Value = PAX(3, 1) & PAX(3, 2)
    End If
Next Result
'Log the email being Sent
        Open "H:\A-Output.txt" For Append As #1
        URL = Format(Now, "mm/dd/yyyy @ HH:MM:SS - ") & URL & Replace(PAX(2, 1) & PAX(3, 1), Chr(13), "<br>")
        Write #1, URL
        Close #1
If A4Auto = "A" Then
    Set Buttons = IE.document.getelementsbyclassname("btn")
    Buttons.Item(0).Click
    tIme = (Now + #12:00:30 AM#)
    While IE.busy
    'While Len(left(IE.locationurl, 37)) = "https://na68.salesforce.com/_ui/core/"
    Application.Wait (Now + #12:00:01 AM#)
    Wend
    'make sure email didn't have errors
        URL = IE.LocationURL
        URL = left(URL, 37)
        If URL = "https://na68.salesforce.com/_ui/core/" Then
            IE.Visible = True
            'MsgBox "There appers to be an error.  " & IE.locationurl, , "Error:"
      End If
Else
    MsgBox "Please press ok once the email has been sent.", , "Confirm Email"
End If
IE.Quit
Set IE = Nothing
End Sub
 
Function Obtain_Template4Email(PAX As Variant, Template_Location As String) As Variant
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim AnchorS As Long
Dim AnchorE As Long
Dim AnchorM As Long
Dim Length As Long
Dim Segment2Replace As String
URL = Template_Location
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = False
Set IE = navigate2page_wait2load(IE, URL)
'grab subject from case
Set FieldInfo = Fetch_Fields(IE, "cas14_ileinner")
PAX(2, 1) = FixHTML(FieldInfo.innerhtml)
Debug.Print "fEmail: " & PAX(2, 1)
'grab body from case desctiption
Set FieldInfo = Fetch_Fields(IE, "cas15_ileinner")
PAX(3, 1) = FixHTML(FieldInfo.innerhtml)
Debug.Print "fEmail3: " & PAX(3, 1)
For i = 0 To UBound(PAX)
    PAX(2, 1) = Replace(PAX(2, 1), "<1" & PAX(i, 0) & ">", PAX(i, 1), 1, -1, vbTextCompare)
    PAX(2, 1) = Replace(PAX(2, 1), "<2" & PAX(i, 0) & ">", PAX(i, 2), 1, -1, vbTextCompare)
    PAX(3, 1) = Replace(PAX(3, 1), "<1" & PAX(i, 0) & ">", PAX(i, 1), 1, -1, vbTextCompare)
    PAX(3, 1) = Replace(PAX(3, 1), "<2" & PAX(i, 0) & ">", PAX(i, 2), 1, -1, vbTextCompare)
Next i
PAX(3, 1) = Replace(PAX(3, 1), "<br>", "", 1, -1, vbTextCompare)
'fix href bullshit
AnchorS = 3
'MsgBox PAX(3, 1), , "full email"
PAX(3, 1) = Replace(PAX(3, 1), "</a>", "", 1, -1, vbBinaryCompare)
'MsgBox PAX(3, 1), , "full email"
While AnchorS <> 0
   AnchorS = InStr(1, PAX(3, 1), "<a href=", vbTextCompare)
    If AnchorS > 0 Then
        AnchorM = InStr(AnchorS, PAX(3, 1), ">", vbTextCompare)
        'AnchorE = InStr(AnchorM, PAX(3, 1), "</a>", vbTextCompare)
        Segment2Replace = Mid(PAX(3, 1), AnchorS, AnchorM - AnchorS + 1)
        'MsgBox "S=" & AnchorS & " M=" & AnchorM & " E=" & AnchorE & " - " & Segment2Replace, , "anchor being removed"
        PAX(3, 1) = Replace(PAX(3, 1), Segment2Replace, "", 1, 1, vbTextCompare)
        'MsgBox PAX(3, 1), , "full email"
    End If
Wend
IE.Quit
Set IE = Nothing
Obtain_Template4Email = PAX
End Function
Function GenerateMatchHistory(Engagement As Object) As Collection
Dim RResults As Object
Dim rAwhtml As String
Dim HeaderTitles As Object
Dim Desired_Box As String
Dim TempString As String
Dim ListOFMatches As New Collection
'MsgBox URL, , "this is the url"
Desired_Box = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">Match Name</th><th c"
Set RResults = Get_Proccess_a_Table(URL, Desired_Box)
For Each irow In RResults
    If irow <> "" Then
    TempString = irow
    Set irow = ParseHTML(TempString, "<td", "</td>")
    On Error Resume Next
        If irow(4) <> "Withdrawn" Then
        'MsgBox "match is " & irow(4), , "match status"
        ListOFMatches.Add irow
        End If
    End If
Next irow
Set GenerateMatchHistory = ListOFMatches
'Set HeaderTitles = ParseHTML(RResults(0), "<th", "</th>")
End Function
Function PullTableFromPage(WebPage As Object, Desired_Box As String) As Object
Dim html_content As Object
Dim rAwhtml As String
Dim parsestart As Integer
Dim RResults As Object
Dim Cell As Object
Dim BoxLength As Long
'MsgBox URL, , "url of page we're trying to get table from"
'Salesforce creates tables to list off related objects (like matches or acitivity history) and their class is "list"
Set html_content = WebPage.document.getelementsbyclassname("list")
'The Desired box is the lead in HTML for the requested list and starts by listing column headers.
BoxLength = Len(Desired_Box)
'This finds the correct table and pulls the rows
    For Each div In html_content
        rAwhtml = div.innerhtml
        If Desired_Box = left(rAwhtml, BoxLength) Then
            Set RResults = ParseHTML(rAwhtml, "<tr", "</tr>")
        End If
    Next div
    'this pull the headers
    Debug.Print "Looking at a table with " & RResults.count & " rows"
    For Each Row In RResults
        Set Row = ParseHTML(rAwhtml, "<th", "</th>")
    Next Row
    'this pulls the individual table cells
    For Each Row In RResults
        Set Row = ParseHTML(rAwhtml, "<td", "</td>")
    Next Row
Call opNAV(IE, "quit")
PullTableFromPage = RResults
End Function

Function ParseHCName(HCname As String, MaxLength As Long) As String
Dim sUBs As Variant
Dim Keywords As Variant
Dim Length As Long
Dim plAce As Long
Dim Gauntlet As Collection

Set Gauntlet = New Collection
Gauntlet.Add Array(" Water and Theme Park and Hotel Rome", "")
Gauntlet.Add Array("Mountain", "Mt")
Gauntlet.Add Array("Mount", "Mt")
Gauntlet.Add Array("boardwalk", "Bdwk")
Gauntlet.Add Array("inns and suites", "Inn")
Gauntlet.Add Array("Wisconsin Dells, WI", "Dells")
Gauntlet.Add Array(" and ", " & ")

For i = 1 To Gauntlet.count
    HCname = Replace(HCname, Gauntlet(i)(0), Gauntlet(i)(1), 1, -1, vbTextCompare)
Next i

plAce = InStr(1, HCname, "dba", vbTextCompare)
If plAce > 0 Then
    Length = Len(HCname)
    HCname = Right(HCname, Length - plAce - 3)
End If

HCname = left(HCname, MaxLength)
ParseHCName = HCname
End Function

Function ConvertSFTabletoStringArray(WebPage As Object, Desired_Box As String) As Variant
Dim html_content As Object
Dim rAwhtml As String
Dim parsestart As Integer
Dim RResults As New Collection
Dim Cell As Object
Dim BoxLength As Long
Dim Table_Coll As New Collection
Dim LofROW As Double
Dim NofROWS As Double
Dim RowOutput As Integer
Dim ColumnOutput As Integer
Dim CurrentRowCollection As Collection
'MsgBox URL, , "url of page we're trying to get table from"
RowOutput = 3
ColumnOutput = 2
'Desired_Box = "<tbody><tr class=""headerRow""><th class=""actionColumn"" scope=""col"">Action</th><th class="" zen-deemphasize"" scope=""col"">" & Desired_Box & "</th><th c"
Desired_Box = "<tbody><tr class=""headerRow""*" & Desired_Box & "*"
Range("A1").Value = Desired_Box
'Salesforce creates tables to list off related objects (like matches or acitivity history) and their class is "list"
Set html_content = WebPage.document.getelementsbyclassname("List")
'The Disired box is the lead in HTML for the requested list and starts by listing column headers.
BoxLength = Len(Desired_Box)
'This finds the correct table and pulls the rows
    For Each div In html_content
        rAwhtml = div.innerhtml
            If rAwhtml Like Desired_Box Then
                Cells(RowOutput, ColumnOutput).Value = rAwhtml
                    RowOutput = 1 + RowOutput
                Set RResults = ParseHTMLv2(rAwhtml, "<tr", "</tr>")
            End If
    Next div
    'this pull the headers
On Error Resume Next
         Table_Coll.Add ParseHTMLv2(RResults.Item(1), "<th", "</th>"), "Headers"
    'this pulls the individual table cells
    For Each Row In RResults
        Cells(RowOutput, ColumnOutput).Value = Row
        RowOutput = 1 + RowOutput
 
        Set CurrentRowCollection = ParseHTMLv2((Row), "<td", "</td>")
        Table_Coll.Add CurrentRowCollection
    Next Row
    For Each Row In Table_Coll
        For Each dataentry In Row
            On Error Resume Next
            Cells(RowOutput, ColumnOutput).Value = dataentry
            ColumnOutput = 1 + ColumnOutput
        Next dataentry
        RowOutput = 1 + RowOutput
        ColumnOutput = 2
    Next Row
 
    
    'convert to a string table
        NofROWS = Table_Coll.count
        LofROW = 3
        LofROW = Table_Coll.Item(1).count
    ReDim Table_as_Strings(NofROWS, LofROW) As Variant
    For i = 1 To NofROWS
        For j = 1 To LofROW
            Table_as_Strings(i, j) = Table_Coll.Item(i).Item(j)
        Next j
    Next i
    ConvertSFTabletoStringArray = Table_as_Strings
End Function
Sub TestTable()
Dim IE As Object
Dim URL As String
Dim TableName As String
Dim Results As Variant
Dim Table_W As Double
Dim Counter As Integer
'URL = "https://na68.salesforce.com/a0d1300000TwRHP"
'URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=a0R&str=Mount+Olympus"
URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=001&str=McDonald"
TableName = "Account Name"
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = True
Set IE = navigate2page_wait2load(IE, URL)
Results = ConvertSFTabletoStringArray(IE, TableName)
Counter = 0
On Error GoTo testtableexit
For j = 0 To 200
    For i = 0 To UBound(Results)
        Range("B" & Counter + 2).Value = Results(Counter, i)
    Next i
Next j
testtableexit:
IE.Quit
Set IE = Nothing
End Sub
Function ParseHTMLv2(rHTML As String, TagStart As String, TagEnd As String) As Collection
Dim RowStart As Long
Dim RowEnd As Long
Dim FullLength As Long
Dim Answers As New Collection
Dim CurrentRowNum As Integer
Dim parsestart As Long
Dim answer_String As String
Dim final_result As Object
Dim E_Counter As Integer
Dim Item_Key As String
E_Counter = 0
parsestart = 1
FullLength = Len(rHTML)
RowStart = 1
CurrentRowNum = 0
    Do While RowEnd <> FullLength
        RowStart = InStr(parsestart, rHTML, TagStart, vbTextCompare)
            If RowStart = 0 Then
                GoTo EndLoop
            End If
        RowStart = InStr(RowStart, rHTML, ">", vbTextCompare) + 1
     
        RowEnd = InStr(RowStart, rHTML, TagEnd, vbTextCompare)
        parsestart = RowEnd
            If RowEnd = 0 Then
                GoTo EndLoop
            End If
     
            answer_String = Mid(rHTML, RowStart, RowEnd - RowStart)
     
            If E_Counter > 8 Then
            Item_Key = "Header " & E_Counter
            Else
            Item_Key = E_Counter
            End If
     
            If answer_String = "Action" Then
                Else
                Answers.Add answer_String, Item_Key
                E_Counter = E_Counter + 1
            End If
    Loop
EndLoop:
Set final_result = Answers
Set ParseHTMLv2 = final_result
End Function
Sub Cycle_Overnight()
Dim resulting_row As Integer
Dim listofreports As Object
Dim CurrentTime As Integer
' Set listofreports = ["https://na68.salesforce.com/00O130000091CvG","https://na68.salesforce.com/00O130000091Cxv"]
New_Sheet_Creator
While 1 = 1
    resulting_row = 4
    
    'Call GTA13102_Missing_DocuSign_NotificationFixer_V2(NewReportCollector("00O1B000009D8Py"))
    
    'For Each report In listofreports
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095eV4", resulting_row, "Offer Docusign Via Match", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095X67", resulting_row, "Issue HC Roster", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095RDC", resulting_row, "Recalculate All PAX on an Assessment", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SBy", resulting_row, "Email PAX about uncooperative Landlord", "reg")

    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000009266r", resulting_row, "Rename Match", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092OoN", resulting_row, "Send Apps back to Submitted if DOB is wrong", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092CRR", resulting_row, "Tag Incomming Apps", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ISk", resulting_row, "Tag Incomming Apps", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098i9c", resulting_row, "Close cases for Overdue Check-Ins that are now completed", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098VsP", resulting_row, "Overdue Check Ins 99 - Check-In has been completed", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098fYF", resulting_row, "Close Overdue MC cases that are completed", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008cjtA", resulting_row, "Close Overdue MC cases that are confirmed and email PAX", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bvK", resulting_row, "Close Overdue MC for PAX is no longer on program", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098f3l", resulting_row, "Send Job Confirmation Email", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098imA", resulting_row, "Send Job Confirmation Email and CC Manager", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098Ueg", resulting_row, "Re-Assign Pre-Arrival Queue Cases", "reg")

    
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099VJl", resulting_row, "New PAHR", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099RrF", resulting_row, "Screen IsCurrent housing", "reg") 'this one takes forever
    CurrentTime = Format(Now(), "hh")
        If CurrentTime > 6 And CurrentTime < 8 Then
            resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098RjJ", resulting_row, "Generate Overdue CheckIn Cases", "reg")
            resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bSS", resulting_row, "Generate Overdue Monthly Contact Cases 00|", "reg")
            resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bt9", resulting_row, "Send Overdue MC Warning Email 00|04", "reg")
            'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B000008civK", resulting_row, "Send Overdue MC Warning 24 hour notice email 04|09", "reg")
        End If
    a1ProccessUpdates
    
    Call GTA13102_Missing_DocuSign_NotificationFixer_V2(NewReportCollector("00O1B000009D8Py"))
    
    With Range("a4:a" & resulting_row)
       .Value = ""
    End With
    Application.Wait (Now + #12:50:01 AM#)
Wend
MsgBox "Operation Complete", , "Status"
End Sub
Sub Cycle_MorningBasics()
Dim resulting_row As Integer
Dim listofreports As Object
Dim CurrentTime As Integer
' Set listofreports = ["https://na68.salesforce.com/00O130000091CvG","https://na68.salesforce.com/00O130000091Cxv"]

Call OverDue_Emails
Call Cycle_SEVIS_Corrections
Call QuantomLeap
Call QuantomLeap

Call HC_Roster_DocuSignBlast_ReportBasedReminders("00O1B000009D76b")
Call HC_Roster_DocuSignBlast_ReportBasedReminders("00O1B000009CvDp")
Call Auto_EndMatchEarly("00O1B000009Czro")

MsgBox "Morning Basics Complete", , "Status"
End Sub
Sub Cycle_Housing()
Dim resulting_row As Integer
Dim listofreports As Object
Dim CurrentTime As Integer

New_Sheet_Creator
While 1 = 1
    resulting_row = 4
    
  '  Call Cycle_PAHR_Autorotate
    
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095UAG", resulting_row, "Disable Japan's Housing Plans", "reg")
'    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092auI", resulting_row, "New PAHR", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092LnC", resulting_row, "New PAHR", "reg")
       ' resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099RvR", resulting_row, "New PAHR", "reg") '20 days or older
'        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099U6M", resulting_row, "Duplicate Housing Validations Part 15 - Housing Train Toot Toot", "reg") 'Transparency update
        'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Un1", resulting_row, "Duplicate Housing Validations Part 15 - Housing Train Toot Toot", "reg")
        'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092CRR", resulting_row, "Tag Incomming Apps", "reg")
        'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A04", resulting_row, "Assign Housing Plan PAHR Case back to Andrew", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092UoJ", resulting_row, "Duplicate Housing Validations Part 1", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928DG", resulting_row, "Duplicate Housing Validations Part 2 - Redirecting Sites", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928EE", resulting_row, "Duplicate Housing Validations Part 3 - Remove duplicate PAX links from validation assessment", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928H3", resulting_row, "Duplicate Housing Validations Part 4 - Moving Duplicate Assessments to the Forest of DUPs", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928N6", resulting_row, "Duplicate Housing Validations Part 5 - Move Assessments from duplicate Landlord to primary landlord", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092NWc", resulting_row, "Duplicate Housing Validations Part 5b - Move Assessments from duplicate site to Prime Site", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928NB", resulting_row, "Duplicate Housing Validations Part 6 - Move Sites from duplicate landlord to primary landlord", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928cz", resulting_row, "Return Housing Plan to PAX for Completion every 5 days", "reg")
        'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928Nf", resulting_row, "Duplicate Housing Validations Part 7 - Move PAX via Accommodation object to the one true Assessment", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000928Nf", resulting_row, "New PAHR", "reg")
        'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092IXG", resulting_row, "Duplicate Housing Validations Part 15 - Housing Train Toot Toot", "reg")
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B00000929a1", resulting_row, "Check the Primary SOA box on Match", "reg")
        
        resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ZdL", resulting_row, "Priority Score Housing Validations", "reg")
        
    CurrentTime = Format(Now(), "hh")
        If CurrentTime > 6 And CurrentTime < 8 Then
            'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ACF", resulting_row, "Find Housing Plan for Cases Missing them", "reg")
            'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A17", resulting_row, "Update Housing Status on PAHR Case", "reg")
            'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A0s", resulting_row, "Upgrade PAHR Case to Housing Validation", "reg")
            'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092A0n", resulting_row, "Update Housing Status on PAHR Case v2 The Validation", "reg")
        End If
    a1ProccessUpdates
    With Range("a4:a" & resulting_row)
        .Value = ""
    End With

New_Sheet_Creator
    Call Cycle_PAHR_Autorotate
    
    Application.Wait (Now + #12:15:01 AM#)
Wend
MsgBox "Operation Complete", , "Status"
End Sub
Sub Cycle_PAHR_Autorotate()
Dim IE As Object
Dim LastReport As String
Dim ReportList As Collection
Dim NextReport As String
Dim NExtReportNumber As Double
Dim FieldUpdates As Collection

Call opNAV(IE, "nav", "https://na68.salesforce.com/00T1B00005K3vNy/e")
LastReport = FetchField(IE, "tsk6")(0)

    Set ReportList = New Collection
        ReportList.Add Array("Northeast", "https://na68.salesforce.com/00O1B0000095Rf6")
        ReportList.Add Array("Mid-Atlantic", "https://na68.salesforce.com/00O1B0000095RfB")
        ReportList.Add Array("Southeast", "https://na68.salesforce.com/00O1B0000095RfG")
        ReportList.Add Array("Midwest", "https://na68.salesforce.com/00O1B0000095RfL")
        ReportList.Add Array("West", "https://na68.salesforce.com/00O1B0000095RfV")
        
    For i = 1 To ReportList.count
        If LastReport = ReportList(i)(0) Then
            If i + 1 > ReportList.count Then
                NextReport = ""
            Else
                NextReport = ReportList(i + 1)(1)
                NExtReportNumber = i + 1
            End If
        End If
    Next i
    
    If NextReport = "" Then
        NextReport = ReportList(1)(1)
        NExtReportNumber = 1
    End If
    
    'update tracker with latest section being worked on
    Set FieldUpdates = New Collection
        FieldUpdates.Add Array("tsk6", ReportList(NExtReportNumber)(0))
    Call PushUpdates2Page(IE, FieldUpdates)
    
    New_Sheet_Creator
    Call Collect_Data(NextReport, 4, "New PAHR", "reg")

Call opNAV(IE, "quit", "")
End Sub
Private Sub Push_Surveys2SFDC()
Dim startcount As Integer
Dim endcount As Integer
Dim looking_for_end_of_document As Integer
Dim SurveyText As String
Dim IE As Object
Dim CaseDescription As Object
Dim URL As String
Dim timeoutcounter As Integer
Dim elementcol As Object
Dim currentrecordstatus As String
startcount = 1
' endcount = InputBox("Enter final record number.", "Last record to be proccessed.", 50)
'find the first record
    Do While left(Range("A" & startcount), 4) <> "http" And startcount < 20000
    startcount = startcount + 1
    Loop
    ' Check to see if logged in yet
    CheckifLoggedin
 
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = True
  
looking_for_end_of_document = 0
Do While startcount < 9999 And looking_for_end_of_document < 4
    If Range("A" & startcount) = "" Or Len(Range("A" & startcount)) < 15 Then
   looking_for_end_of_document = looking_for_end_of_document + 1
    Else
    looking_for_end_of_document = 0
    URL = Range("A" & startcount)
    SurveyText = Range("B" & startcount)
    SurveyText = Replace(SurveyText, "<BR>", Chr(10), 1, , vbTextCompare)
    SurveyText = Replace(SurveyText, "<BR/>", Chr(10), 1, , vbTextCompare)
    Set IE = navigate2page_wait2load(IE, URL)
    'Set CaseDescription = IE.document.GetElementByID("cas15")
    Set CaseDescription = IE.document.getelementsbytagname("textarea")
        For Each Field In CaseDescription
        'MsgBox field.Value, , "THis is the field I found"
            If Field.ID = "cas15" Then
                Field.Value = SurveyText
            End If
        Next Field
 
        'IE.Visible = True
        'MsgBox "Does this look correct", , "CHeck"
        IE.Visible = False
 
    Open "H:\A-Output.txt" For Append As #1
    URL = Format(Now, "mm/dd/yyyy @ HH:MM:SS - ") & URL
    Write #1, URL
    Close #1
    ' Wait while IE loading...
    Do While IE.busy
    Loop
    timeoutcounter = 0
    Do While IE.document.Title = "" And timeoutcounter < 10
        Application.Wait (Now + #12:00:01 AM#)
        timeoutcounter = timeoutcounter + 1
    Loop
'If IsObject(IE.Document.getElementsByClassName("btn")) Then
If timeoutcounter < 9 Then
    On Error GoTo noButton2
    Set elementcol = IE.document.getelementsbyclassname("btn")
            If IsObject(elementcol.Item(0)) Then
                         elementcol.Item(0).Click
                         Else
                         Range("F2").Value = "Button Failure"
          
            End If
    Else
noButton2:
    currentrecordstatus = "Button Failure"
End If
            ' Wait while IE loading...
            Range("A1").Value = "saving... busy"
    Do While IE.busy
 
    Loop
    Application.Wait (Now + #12:00:01 AM#)
    Range("A1").Value = "title just saved"
timeoutcounter = 0
            Do While IE.document.Title = "" And timecounter < 5
                ' IE.Refresh
                Application.Wait (Now + #12:00:01 AM#)
                timeoutcounter = timeoutcounter + 1
            Loop
     
            currentrecordstatus = currentrecordstatus & IE.document.Title
 
        
        
        
        
    
    Range("D1").Value = startcount
 
    Range("C" & startcount) = currentrecordstatus
    currentrecordstatus = ""
    startcount = startcount + 1
    End If
Loop
'MsgBox "Task Completed Successfully:  " & startcount
IE.Quit
Set IE = Nothing
End Sub

Sub TestHTMLEmail()
Dim PAX As Variant
Dim CaseSettings As Variant
Dim TemplateID As String
Dim EmailTemplate As Variant

Dim UpdateList As New Collection
UpdateList.Add Array("cas14", "It is currently " & Format(Now(), "HH:MM - DDDD"), "Value")
UpdateList.Add Array("00N1300000BLavV", "22|Take the next step on duedate", Value)
UpdateList.Add Array("00N1300000BLavQ", Format(DateAdd("d", 14, Now()), "mm/dd/yyyy"), "Value")
UpdateList.Add Array("cas15", "Case description goes here", "Value")
UpdateList.Add Array("CF00Na000000B2eGh_lkid", "a0d1300000PSxwc", "Value")
TemplateID = InputBox("ID of page")
TemplateID = left(TemplateID, 43)
TemplateID = Replace(TemplateID, "https://na68.salesforce.com/", "", , , vbTextCompare)

PAX = PAXbasicInfo("a0d1300000RpJ48", "", "", 4)
PAX(40, 1) = Format(Now() + 14, "mm/dd/yyyy")
PAX(40, 2) = Format(Now() + 14, "dddd mmmm dd, yyyy")
'PAX = FetchEmailTemplate(TemplateID)
EmailTemplate = FetchEmailTemplate(TemplateID)
PAX = AddTemplate(PAX, EmailTemplate)
CaseSettings = Array("9/5/2017", "Test Complete")

Set UpdateList = New Collection
Call Send_HTMLEmail(PAX, "IWTSupport", UpdateList)

End Sub
Private Sub Send_HTMLEmail(PAX As Variant, Sender As String, CaseInstructions As Collection, Optional DebugCheck As Boolean = False)
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim Buttons As Object
Dim A4Auto As String
Dim tIme As Date
Dim eBody As String
Dim eStyle As String
Dim Body As New Collection
Dim Style As New Collection
Dim Signature As String
Dim EmailTemplate As Variant
Dim CaseFields As Variant
Dim Counter As Double
Dim Wait4Page As Boolean
Dim FieldUpdates As Collection
Dim Email_has_Send_Error As Boolean

If CaseInstructions.count > 0 Then
    Wait4Page = True
Else
    Wait4Page = False
End If

If InStr(1, Sender, "IWTSupport", vbTextCompare) > 0 Then
Sender = """Work Travel Notification Support"" <iwtsupport@intraxinc.com>"
End If
If InStr(1, Sender, "NoReply", vbTextCompare) > 0 Then
Sender = """No Reply Intrax"" <noreply@intraxinc.com>"
End If
PAX(0, 2) = "https://na68.salesforce.com/_ui/core/email/author/EmailAuthor?p2_lkid=<2Contact ID>&rtype=003&p3_lkid=<2Case ID>&retURL=%2F<2Case ID>&p26=" & Sender & "&p4=<1CC>&p5=<1BCC>"
URL = "https://na68.salesforce.com/_ui/core/email/author/EmailAuthor?p2_lkid=<2Contact ID>&rtype=003&p3_lkid=<2Case ID>&retURL=<2Case ID>&p26=" & Sender & "&p4=<1CC>&p5=amey@intraxinc.com;<1BCC>"
'Substitute values <1Value> uses the first column and 2 uses the 2nd for a given variable
For p = 0 To 4
    For i = 0 To UBound(PAX)
        PAX(p, 1) = Replace(PAX(p, 1), "<1" & PAX(i, 0) & ">", PAX(i, 1), 1, -1, vbTextCompare)
        PAX(p, 1) = Replace(PAX(p, 1), "<2" & PAX(i, 0) & ">", PAX(i, 2), 1, -1, vbTextCompare)
        PAX(p, 2) = Replace(PAX(p, 2), "<1" & PAX(i, 0) & ">", PAX(i, 1), 1, -1, vbTextCompare)
        PAX(p, 2) = Replace(PAX(p, 2), "<2" & PAX(i, 0) & ">", PAX(i, 2), 1, -1, vbTextCompare)
        PAX(p, 1) = Replace(PAX(p, 1), "<TODAY>", Format(Now(), "dddd mmmm dd, yyyy"))
        PAX(p, 2) = Replace(PAX(p, 2), "<TODAY>", Format(Now(), "dddd mmmm dd, yyyy"))
    Next i
Next p
PAX(3, 2) = Replace(PAX(3, 2), Chr(13), "<br/>", , , vbTextCompare)
PAX(3, 2) = Replace(PAX(3, 2), Chr(13), "</br>", , , vbTextCompare)
PAX(3, 2) = Replace(PAX(3, 2), Chr(13), "<br>", , , vbTextCompare)
URL = PAX(0, 2)
Call opNAV(IE, "nav", URL)
'IE.Visible = True
'MsgBox "what's going on", , "hey"
    'Make sure page is in rich text mode (html)
    If IE.document.editPage.textmode.Value <> "r" Then
        IE.document.editPage.textmode.Value = "r"
        Call IE.document.parentWindow.execScript("submitFormNoSave()", "JavaScript")
        Application.Wait (Now + #12:00:02 AM#)
    End If
'set the Subject
PAX(2, 1) = left(PAX(2, 1), 99)
Set FieldInfo = IE.document.getelementsbytagname("input")
For Each Result In FieldInfo
    If Result.ID = "p6" Then
    Result.Value = PAX(2, 1)
    End If
Next Result
'Style settings for email
'background: #f1ffcc;

'Use alternate Header?
If False Then
    eBody = "<style>.letter {font-size: 12.0pt; font-family: 'Trebuchet MS','sans-serif'; color: black; padding: 2px; width: 650;} .familygreen {font-family: 'Trebuchet MS','sans-serif'; color: #6e8b2a;} .Indented{margin-left: 35px;} "
    eBody = eBody & "table {} .darkgreen {background-color: #6E8B2A; color: white;} .lightgreen {background-color: #ebf3d8;} .split {width: 48%;} .middle {width: 2%;} .title {color: #801830; font-weight: bold; font-size: 110%} .checkbox {border: 1 solid black; width: .75em; height: .75em; display: inline-block; margin-right: 5;} .checkmark{margin: -15 0 -15; font-size: 150%;}"
    eBody = eBody & " a:link {color: #7EAA00;} a:visted {color: #AACA00;} a:hover {color: #AACA00;} a:active {color: #AACA00;}"
    eBody = eBody & "</style>"
    'Compose full email body
    eBody = eBody & "<table class=""letter""><tr><th><table><tr><td class=""darkgreen"" width=""60%""></td><td width=""30""></td><td><img align=""center"" src=""https://www.intraxinc.com/sites/all/themes/intrax_corporate/logo.png"" alt=""Intrax"" style=""height: 20;""></td></tr></table></th></tr><tr><td>" & PAX(3, 1)
Else
    'stYle.Add "<head>"
    Style.Add "<meta http-equiv=""Content-Type"" content=""text/html charset=UTF-8"" />"
    Style.Add "<style>.letter {font-size: 12.0pt; font-family: 'Trebuchet MS','sans-serif'; color: black; padding: 2px;} "
    Style.Add ".familygreen {font-family: 'Trebuchet MS','sans-serif'; color: #6e8b2a;} "
    Style.Add ".Indented{margin-left: 35px;}"
    Style.Add "table {} "
    Style.Add ".darkgreen {background-color: #6E8B2A; color: white;} "
    Style.Add ".lightgreen {background-color: #ebf3d8;} "
    Style.Add ".split {width: 50%;}"
    Style.Add ".title {color: #801830; font-weight: bold; font-size: 110%}"
    Style.Add "a:link {color: #7EAA00;} a:visted {color: #AACA00;} a:hover {color: #AACA00;} a:active {color: #AACA00;}"
    Style.Add "</style>"
    'Compose full email body
    Body.Add "<table style=""width: 600px; max-width: 600px;"" class=""letter""><tr><th><div align=""left""><table><tr><td class=""darkgreen"" width=""436px""></td><td width=""32px"" height=""11""></td><td width=""132px""><img align=""center"" src=""https://www.intraxinc.com/sites/all/themes/intrax_corporate/logo.png"" alt=""Intrax"" style=""height: 20;""></td></tr></table></div></th></tr><tr><td>"
    Body.Add PAX(3, 1)
End If

'add Signature Info
Body.Add "</td></tr><tr><td><br/>Sincerely,<br/><img src=""https://www.intraxinc.com/sites/all/themes/intrax_corporate/logo.png"" alt=""Intrax"" style=""height: 30px;""><br/><br/>Intrax Work Travel<br/>Toll-Free: 1-888-224-0450<br/>Email: iwtsupport@intraxinc.com<br/>Website: <a hfref=""https://intraxinc.secure.force.com/intraxappengine/appengine_siteloginpage"">https://intraxinc.secure.force.com/intraxappengine/appengine_siteloginpage</a><br/><br/><br/><p></td></tr>"
Body.Add "<tr><td><strong><span class=""familygreen"" style=""font-size: 14.0pt;"">Intrax&nbsp;&nbsp;&nbsp;AuPairCare&nbsp;&nbsp;&nbsp;Ayusa</span></strong></p><p><span class=""familygreen"" style=""font-size: 10.0pt;"">Please consider the environment before printing this e-mail</span></p></div></td></tr>"
'add PAX info grid
Body.Add "<tr><td>" & PAX(3, 2) & "</td></tr></table>"

For i = 1 To Style.count
eStyle = eStyle & Chr(10) & Style(i)
Next i

For i = 1 To Body.count
eBody = eBody & Chr(10) & Body(i)
Next i
'Debug.Print "****" & eStyle & "***"
'Debug.Print "****" & eBody & "***"

'replace blockquotes with margivned divs
    eBody = Replace(eBody, "<blockquote>", "<div class=""Indented""", 1, -1, vbTextCompare)
    eBody = Replace(eBody, "</blockquote>", "</div>", 1, -1, vbTextCompare)


'Set the email Body
Set FieldInfo = IE.document.getelementbyid("iframe_p23")

'Debug.Print FieldInfo.contentWindow.document.BodY.stYle

'FieldInfo.contentWindow.document.head.innerhtml = eStyle
FieldInfo.contentWindow.document.Body.removeAttribute ("class")
FieldInfo.contentWindow.document.Body.innerhtml = eStyle & eBody
'FieldInfo.contentWindow.document.innertext = eBody
'Log the email being Sent
        'Open "H:\A-Output.txt" For Append As #1
       ' URL = Format(Now, "mm/dd/yyyy @ HH:MM:SS - ") & URL & Replace(PAX(2, 1) & PAX(3, 1), Chr(13), "<br>")
        'Write #1, URL
        'Close #1
        
If DebugCheck Then
    IE.Visible = True
    MsgBox "Pause before send", , "debugging"
End If
 
Email_has_Send_Error = False
Call IE.document.parentWindow.execScript("sendEmail()", "JavaScript")
    While IE.busy
    IE.Visible = False
    'While Len(left(IE.locationurl, 37)) = "https://na68.salesforce.com/_ui/core/"
    Application.Wait (Now + #12:00:01 AM#)
    Wend
    'IE.Visible = True
    'Check if there are errors with the addresses, if so, redirect the Email to someone
        Set FieldInfo = IE.document.getelementsbyclassname("errorMsg")
'        If InStr(1, IE.locationurl, "/_ui/core/email/author/", vbTextCompare) = 0 Then
        If IsObject(IE.document.getelementsbyclassname("errorMsg")) Then
        For Each sferror In FieldInfo
            If InStr(1, sferror.innerhtml, "The running user for this dashboard is inactive.") = 0 Then
                Debug.Print "Error text: " & sferror.innerhtml
                If sferror.innerhtml <> "" Then
                    Email_has_Send_Error = True
                End If
            End If
        Next sferror
           If Email_has_Send_Error Then
                Set FieldUpdates = New Collection
                    FieldUpdates.Add Array("p2_lkid", "0031B00002dNmvA")
                Call PushUpdates2Page(IE, FieldUpdates, False)
                Call IE.document.parentWindow.execScript("sendEmail()", "JavaScript")
                Do While IsPageStillLoading(IE)
                    Application.Wait (Now + #12:00:01 AM#)
                Loop
                   'Call RedirectBrokenEmail(IE, "aMey@intraxinc.com")
            End If
        Else
            Debug.Print "No Errors sending emails"
        End If
  
        'make sure email returned us to case screen
        Application.Wait (Now + 0.000008)
        Counter = 0
        Do While Loading And Counter < 5000
            Do While IE.busy
                Counter = Counter + 1
            Loop
          
            Do While IsPageStillLoading(IE.document) And Counter < 4500
                Counter = Counter + 1
            Loop
        Loop
        
        'IE.Visible = True
        'Debug.Print "should page be waited on? " & Wait4Page
        If Wait4Page Then
            Counter = 0
            While Wait4Page
                URL = left(IE.document.URL, 31)
                    If URL <> "" Then
                        If URL Like "https://na68.salesforce.com/???/e*" Then
                        Else
                            Wait4Page = False
                        End If
                    End If
                Application.Wait (Now + #12:00:02 AM#)
                    If Counter > 15 Then
                        IE.Visible = True
                        MsgBox "the page didn't save?", , "stuff"
                        IE.Visible = False
                    End If
                Counter = Counter + 1
            Wend
   
        'Update Case
            'Debug.Print "##** About to update this page " & IE.document.URL
            Call opNAV(IE, "nav", IE.document.URL & "/e?")
            'MsgBox "inject field updates", , "debuggin"
            URL = PushUpdates2Page(IE, CaseInstructions)
        End If

'MsgBox "case saving", , "Debugging"
IE.Quit
Set IE = Nothing
End Sub
Sub Test_Emailv3_Template()
Dim TemplateID As String
Dim tNum As Double

TemplateID = InputBox("ID of page")

tNum = InStr(1, TemplateID, "00X", vbTextCompare)

If tNum > 0 Then
    Set EmailTemplateMaster = New Collection
    TemplateID = Mid(TemplateID, tNum, 15)
    Debug.Print "!!!!!!! looking at template: " & TemplateID
    Call Emailv3(TemplateID)
End If


End Sub
Private Sub Emailv3(TemplateID As String, Optional EngagementID As String = "a0d1300000Tw69K")
Dim MergeFields As Variant
Dim MergeAnswers As New Collection
Dim tValue As Variant
Dim InfoPackage As Variant

If left(TemplateID, 3) = "00X" Then
    InfoPackage = PAHR_CollectInfo(EngagementID, "Case")
    InfoPackage = PageInfo_RR(InfoPackage, "Link", "https://www.surveygizmo.com/s3/4568082/Natural-Disaster-Hurricane-Florence?Name=Emmanuel%20Diaz&Intrax=I-TestTest&SEVIS=N-1234568")
    InfoPackage = PageInfo_RR(InfoPackage, "Email", Emailv3_TemplateManager(TemplateID))
    
    InfoPackage = Emailv3_MergeAnswerSheet(InfoPackage)
    
    Call Emailv3Sender(InfoPackage)
Else
    Debug.Print "ID invalid!!!!!!!!"
End If
    'Print_L2_HTML (InfoPackage)
End Sub
Private Sub Emailv3_Delivery(TemplateID As String, DataPackage As Variant, Optional Recipient As String = "0031B00002bteMh", Optional FromAddress As String = "IWTSupport", Optional DebugCheck As Boolean = False)
Dim Email As Variant

Email = Emailv3_TemplateFetcher(TemplateID, "")
Email = PageInfo_RR(Email, "To", Array(Recipient, Recipient))
Email = PageInfo_RR(Email, "Related To", Array("0011300001jIqoK", "0011300001jIqoK"))
Email = PageInfo_RR(Email, "From", Array(FromAddress, FromAddress))

DataPackage = PageInfo_RR(DataPackage, "Email", Email)
Call Emailv3_MergeAnswerSheet(DataPackage)
Call Emailv3Sender(DataPackage, , DebugCheck)

End Sub
Private Sub Emailv3SOS(Subject As String, Body As String, Contact As String, Optional RelatedTo As String = "0011300001jIqoK")
'Allows for sending quick SOS type email alerts
Dim Email As Variant

Email = Emailv3c(Subject, Body, Contact, RelatedTo)
Email = Array("Engagement", "", Array(Email))
Call Emailv3Sender(Email, , False)

End Sub
Private Function Emailv3c(Subject As String, Body As String, Recipient As String, RelatedTo As String, Optional From As String = "") As Variant
Dim FieldList As New Collection
Dim Template As Variant

FieldList.Add Array("BCC", "", Array("", ""))
FieldList.Add Array("CC", "", Array("", ""))
FieldList.Add Array("Subject", "", Array(Subject, ""))
FieldList.Add Array("Body", "", Array(Body, ""))
FieldList.Add Array("To", "", Array(Recipient, ""))
FieldList.Add Array("Related To", "", Array(RelatedTo, ""))
FieldList.Add Array("From", "", "NoReply")
FieldList.Add Array("Merge Fields", "", Array(Array("", "", Array("", ""))))
FieldList.Add Array("Info Box", "", Array("", ""))
FieldList.Add Array("Defaults", "", Emailv3_Style_and_Signature)

Template = Array("Generic Template", "", CollectionConverter(FieldList))
'Print_L2_HTML (Template)
Template = Array("Email", "", Template)

Emailv3c = Template
End Function
Private Function Emailv3_MergeAnswerSheet(InfoPackage As Variant) As Variant
Dim MergeAnswers As New Collection
Dim tValue As Variant
Dim MergeFields As Variant
Dim Email As Variant

Email = PageInfoF(InfoPackage, "Email")
If IsArray(Email) Then
    MergeFields = PageInfoF(Email, "Merge Fields")(2)
    
    For i = 0 To UBound(MergeFields)
        tValue = PageInfoS(InfoPackage, (MergeFields(i)(0)))
        If IsArray(tValue) Then
            Debug.Print tValue(0) & " }{ " & tValue(1)
            MergeAnswers.Add Array("{!" & MergeFields(i)(0) & "}", MergeFields(i)(0), Array(tValue(0), ""))
        Else
            Debug.Print "Error finding merge field answer: " & MergeFields(i)(0)
        End If
    Next i
    tValue = Array("Merge Fields", False, CollectionConverter(MergeAnswers))
    Email = PageInfo_RR(Email, "Merge Fields", tValue)
    InfoPackage = PageInfo_RR(InfoPackage, "Email", Email)
Else
    Debug.Print "Error: Does not contain an email template"
End If

Emailv3_MergeAnswerSheet = InfoPackage
End Function
Private Function Emailv3_TemplateManager(TemplateID As String) As Variant
Dim TemplateFound As Boolean
Dim cTemplate As Variant

TemplateFound = False
If EmailTemplateMaster.count > 0 Then 'check to see if the required template already exists
    For i = 1 To EmailTemplateMaster.count
        If EmailTemplateMaster(i)(0)(1) = TemplateID Then
            cTemplate = EmailTemplateMaster(i)(0)
            i = 9999
            TemplateFound = True
        End If
    Next i
End If

If TemplateFound = False Then
    cTemplate = Emailv3_TemplateFetcher(TemplateID)
    Set EmailTemplateMaster = cDictionary(EmailTemplateMaster, cTemplate)
End If

Emailv3_TemplateManager = cTemplate
End Function
Private Function Emailv3_Style_and_Signature() As Variant
Dim Style As New Collection
Dim Signature As New Collection
Dim EmailSetup As Variant

Style.Add "<meta http-equiv=""Content-Type"" content=""text/html charset=UTF-8"" />"
Style.Add "<style>.letter {font-size: 12.0pt; font-family: 'Trebuchet MS','sans-serif'; color: black; padding: 2px;} "
Style.Add ".familygreen {font-family: 'Trebuchet MS','sans-serif'; color: #6e8b2a;} "
Style.Add ".Indented{margin-left: 35px;}"
Style.Add "table {} "
Style.Add ".darkgreen {background-color: #6E8B2A; color: white;} "
Style.Add ".lightgreen {background-color: #ebf3d8;} "
Style.Add ".split {width: 50%;}"
Style.Add ".title {color: #801830; font-weight: bold; font-size: 110%}"
Style.Add "a:link {color: #7EAA00;} a:visted {color: #AACA00;} a:hover {color: #AACA00;} a:active {color: #AACA00;}"
Style.Add "</style>"

Signature.Add "<div align=""left""><br/>Sincerely,<br/><img src=""https://www.intraxinc.com/sites/all/themes/intrax_corporate/logo.png"" alt=""Intrax"" style=""height: 30px;""><br/><br/>Intrax Work Travel<br/>Toll-Free: 1-888-224-0450<br/>Email: iwtsupport@intraxinc.com<br/>Website: <a hfref=""https://intraxinc.secure.force.com/intraxappengine/appengine_siteloginpage"">https://intraxinc.secure.force.com/intraxappengine/appengine_siteloginpage</a></div><br/>"
Signature.Add "<strong><span class=""familygreen"" style=""font-size: 14.0pt;"">Intrax&nbsp;&nbsp;&nbsp;AuPairCare&nbsp;&nbsp;&nbsp;Ayusa</span></strong></p><p><span class=""familygreen"" style=""font-size: 10.0pt;"">Please consider the environment before printing this e-mail</span></p></div>"

EmailSetup = Array("Defaults", "", Array(Array("Style", "", Array(Collection2String(Style), ""))))
EmailSetup = PageInfo_RR(EmailSetup, "Signature", Collection2String(Signature))
EmailSetup = PageInfo_RR(EmailSetup, "Letter Head", "<div align=""left""><table><tr><td class=""darkgreen"" width=""436px""></td><td width=""32px"" height=""11""></td><td width=""132px""><img align=""center"" src=""https://www.intraxinc.com/sites/all/themes/intrax_corporate/logo.png"" alt=""Intrax"" style=""height: 20;""></td></tr></table></div>")

Emailv3_Style_and_Signature = EmailSetup
End Function
Private Function Collection2String(cStrings As Collection, Optional BreakEveryLine As Boolean = False, Optional BreakCharacter As String = "<br/>") As String
Dim sValue As String

For i = 1 To cStrings.count
    sValue = sValue & cStrings(i)
        If BreakEveryLine Then
            sValue = sValue & BreakCharacter
        End If
Next i

Collection2String = sValue
End Function
Private Function Emailv3Packer(EngagementID As String, TemplateID As String) As Variant
Dim PAX As Variant
Dim MergeFields As Variant
Dim MergeAnswers As New Collection
Dim tValue As Variant
Dim Email As Variant

PAX = PAHR_CollectInfo(EngagementID, "Case")
    tValue = PageInfoF(PAX, "Case")
    If IsArray(tValue) Then
    Else
        PAX = PageInfo_RR(PAX, "Case", Array(PAX(0), PAX(1)))
    End If

PAX = PageInfo_RR(PAX, "Email", Emailv3_TemplateFetcher(TemplateID))

Email = PageInfoS(PAX, "Email")
Email = PageInfo_RR(Email, "To", PageInfoS(PAX, "Primary Contact.ID"))


MergeFields = PageInfoF(Email, "Merge Fields")
    For i = 0 To UBound(MergeFields(2))
        tValue = PageInfoS(PAX, (MergeFields(2)(i)(0)))
        Debug.Print MergeFields(2)(i)(0) & " = " & tValue(0) & " || " & tValue(1)
        MergeAnswers.Add Array("{!" & MergeFields(2)(i)(0) & "}", MergeFields(2)(i)(0), Array(tValue(0), ""))
    Next i

Email = PageInfo_RR(Email, "Merge Fields", Array("Merge Fields", False, CollectionConverter(MergeAnswers)))
PAX = PageInfo_RR(PAX, "Email", Email)

Call Emailv3Sender(PAX, , True)

End Function
Private Function Emailv3InfoBox() As String
Dim Entries As New Collection
Dim HTML As String

Entries.Add "<br/><br/><Table style=""font-size:10px"">"
Entries.Add "<tr><td colspan=""4"">=========&nbsp;<a href=""https://na68.salesforce.com/{!Engagement.ID}"">{!Intrax ID}</a>&nbsp;========================================</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right""><a href=""https://na68.salesforce.com/{!Engagement.ID}"">{!Account}</a>:&nbsp;</td><td><a href=""https://na68.salesforce.com/{!Engagement.ID}"">https://na68.salesforce.com/{!Engagement.ID}</a></td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Case:&nbsp;</td><td><a href=""https://na68.salesforce.com/{!Case.ID}"">https://na68.salesforce.com/{!Case.ID}</a></td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Service Level:&nbsp;</td><td>{!Service Level}</td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Engagement Start:&nbsp;</td><td>{!Engagement Start}</td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Engagement End:&nbsp;</td><td>{!Engagement End}</td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">SEVIS ID:&nbsp;</td><td>{!SEVIS ID}</td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Employer:&nbsp;</td><td><a href=""https://na68.salesforce.com/{!Primary Match.Position Name.Host Opportunity.ID}"">{!Primary Match.Host Account}</a></td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td>&nbsp;</td><td align=""right"">Partner:&nbsp;</td><td>{!Partner}</td><td>&nbsp;</td></tr>"
Entries.Add "<tr><td colspan=""4"">=========&nbsp;<a href=""https://na68.salesforce.com/{!Engagement.ID}"">{!Intrax ID}</a>&nbsp;========================================</td></tr>"
Entries.Add "</table>"

Emailv3InfoBox = Collection2String(Entries)
End Function
Sub Emailv3Sender(PAX As Variant, Optional PostUpdates As Collection, Optional DebugCheck As Boolean = False)
Dim FieldInfo As Object
Dim IE As Object
Dim Wait4Page As Boolean
Dim MergeFields As Variant
Dim FieldList As Collection
Dim tValue As Variant
Dim Email As Variant
Dim Body As New Collection
Dim Email_has_Send_Error As Boolean
Dim Sender As String

'Fill in missing fields
    If PostUpdates Is Nothing Then
        Set PostUpdates = New Collection
    End If
    
    If PostUpdates.count > 0 Then
        Wait4Page = True
    Else
        Wait4Page = False
    End If
    
    Email = PageInfoF(PAX, "Email")
    MergeFields = PageInfoF(Email, "Merge Fields")
    
    If IsArray(PageInfoF(Email, "From")) = False Then
        Sender = "IWTSupport"
    Else
        Sender = PageInfoF(Email, "From")(0)
    End If
    
    If InStr(1, Sender, "IWTSupport", vbTextCompare) > 0 Then
        Sender = "0D213000000Cb8Q:iwtsupport@intraxinc.com:Work Travel Notification Support"
    End If
    If InStr(1, Sender, "NoReply", vbTextCompare) > 0 Then
        Sender = "0D2a0000000PCOU:noreply@intraxinc.com:No Reply Intrax"
    End If
    
    Email = PageInfo_RR(Email, "From", Array(Sender, ""))
    
    If IsArray(PageInfoF(Email, "To")) = False Then
       Email = PageInfo_RR(Email, "To", PageInfoS(PAX, "Opportunity.Primary Contact.ID"))
    End If
    
    If IsArray(PageInfoF(Email, "Related To")) = False Then
       Email = PageInfo_RR(Email, "Related To", PageInfoS(PAX, "Case"))
    End If
    
    Email = PageInfo_RR(Email, "BCC", Array(PageInfoF(Email, "BCC")(0) & "; aMey@intraxinc.com", ""))
    
'End filling in missing fields

Debug.Print "starting emailv3 merge section"
'########## Mail Merge Fields
For i = 0 To UBound(Email(2)) 'for Every Element in the email
    If Email(2)(i)(1) = "True" Then
        For j = 0 To UBound(MergeFields(2)) 'do a replacement for every mergefield
        'Debug.Print "Item being Merged: " & Email(2)(i)(0) & " | " & MergeFields(2)(j)(0) & " = " & MergeFields(2)(j)(2)(0)
            Email(2)(i)(2)(0) = Replace(Email(2)(i)(2)(0), MergeFields(2)(j)(0), MergeFields(2)(j)(2)(0), 1, -1, vbTextCompare)
        Next j
    End If
Next i
'#########

Set FieldList = New Collection
    FieldList.Add Array("p2_lkid", "To")
    FieldList.Add Array("p26", "From")
    FieldList.Add Array("p3_lkid", "Related To")
    FieldList.Add Array("p24", "Additional To")
    FieldList.Add Array("p4", "CC")
    FieldList.Add Array("p5", "BCC")
    FieldList.Add Array("p6", "Subject")
    
MergeFields = CollectionConverter(FieldList)
tValue = PageInfoF(Email, "Subject")
tValue(0) = left(tValue(0), 100)
Email = PageInfo_RR(Email, "Subject", tValue)

Set FieldList = New Collection
For i = 0 To UBound(MergeFields)
    tValue = PageInfoF(Email, (MergeFields(i)(1)))
    If IsArray(tValue) Then
    Else
        tValue = Array("", "")
    End If
    FieldList.Add Array(MergeFields(i)(0), tValue(0), MergeFields(i)(1))
Next i

Call opNAV(IE, "nav", "https://na68.salesforce.com/_ui/core/email/author/EmailAuthor")
    If IE.document.editPage.textmode.Value <> "r" Then 'make sure Salesforce is set to HTML emails
        IE.document.editPage.textmode.Value = "r"
        Call IE.document.parentWindow.execScript("submitFormNoSave()", "JavaScript")
        Application.Wait (Now + #12:00:02 AM#)
    End If
Call PushUpdates2Page(IE, FieldList, False)

'## Setup Email Body
    Body.Add PageInfoS(Email, "Defaults.Style")(0)
    Body.Add "<table style=""width: 600px; max-width: 600px;"" class=""letter"">"
    Body.Add "<tr><th>" & PageInfoS(Email, "Defaults.Letter Head")(0) & "</td></th>"
    Body.Add "<tr><td>" & PageInfoF(Email, "Body")(0) & "</td></tr>"
    Body.Add "<tr><td>" & PageInfoS(Email, "Defaults.Signature")(0) & "</td></td>"
    
    '## Adds in the Info Box at the bottom if it exists
    Body.Add "<tr><td>" & PageInfoF(Email, "Info Box")(0) & "</td></tr>"
    Body.Add "</table>"
Set FieldInfo = IE.document.getelementbyid("iframe_p23")
FieldInfo.contentWindow.document.Body.removeAttribute ("class")
FieldInfo.contentWindow.document.Body.innerhtml = Collection2String(Body) 'load body into iframe
Debug.Print Collection2String(Body)

If DebugCheck Then
    IE.Visible = True
    MsgBox "Pause before send", , "debugging"
End If
 
Email_has_Send_Error = False
Call IE.document.parentWindow.execScript("sendEmail()", "JavaScript") 'Hit the Send Button
    While IE.busy
    IE.Visible = False
    Application.Wait (Now + #12:00:01 AM#)
    Wend
    'Check if there are errors with the addresses, if so, redirect the Email to someone
Set FieldInfo = IE.document.getelementsbyclassname("errorMsg")

If IsObject(IE.document.getelementsbyclassname("errorMsg")) Then
    For Each sferror In FieldInfo
        If InStr(1, sferror.innerhtml, "The running user for this dashboard is inactive.") = 0 Then
            Debug.Print "Error text: " & sferror.innerhtml
            If sferror.innerhtml <> "" Then
                Email_has_Send_Error = True
            End If
        End If
    Next sferror
    
    If Email_has_Send_Error Then
         Set FieldList = New Collection
             FieldList.Add Array("p2_lkid", "0031B00002dNmvA") 'The is the PAX Bouncing Emails Contact
         Call PushUpdates2Page(IE, FieldList, False)
         Call IE.document.parentWindow.execScript("sendEmail()", "JavaScript")
         Do While IsPageStillLoading(IE)
             Application.Wait (Now + #12:00:01 AM#)
         Loop
    End If
Else
    Debug.Print "No Errors sending emails"
End If
  
'make sure email returned us to case screen
Application.Wait (Now + 0.000008)
Counter = 0
Do While Loading And Counter < 5000
    Do While IE.busy
        Counter = Counter + 1
    Loop
  
    Do While IsPageStillLoading(IE.document) And Counter < 4500
        Counter = Counter + 1
    Loop
Loop


If Wait4Page Then
    Counter = 0
    While Wait4Page
        URL = left(IE.document.URL, 31)
            If URL <> "" Then
                If URL Like "https://na68.salesforce.com/???/e*" Then
                Else
                    Wait4Page = False
                End If
            End If
        Application.Wait (Now + #12:00:02 AM#)
            If Counter > 15 Then
                IE.Visible = True
                MsgBox "the page didn't save?", , "stuff"
                IE.Visible = False
            End If
        Counter = Counter + 1
    Wend

'Update Case
    Call opNAV(IE, "nav", IE.document.URL & "/e?")
    Call PushUpdates2Page(IE, PostUpdates)
End If

Call opNAV(IE, "quit")

End Sub
Private Function SequencerB(Text As String, SeqStart As String, SeqEnd As String) As Collection
Dim i As Double
Dim cPoint As Double
Dim oList As New Collection
Dim Chain As Collection
Dim ParseLoop As Boolean

Set Chain = Sequencer(Text, SeqStart)

ParseLoop = True
i = 1
Do While ParseLoop
    cPoint = InStr(1, Chain(i), "}", vbBinaryCompare)

    If cPoint > 0 Then
        oList.Add Array(True, left(Chain(i), cPoint - 1))
        If cPoint > Len(Chain(i)) Then
            oList.Add Array(False, Right(Chain(i), Len(Chain(i)) - cPoint))
        End If
    Else
        oList.Add Array(False, Chain(i))
    End If
    
    i = i + 1
    
    If i > Chain.count Then
        ParseLoop = False
    End If
Loop

If oList.count = 0 Then
    Debug.Print "Error: SequencerB did not find any results"
End If

Set SequencerB = oList
End Function
Private Function SequencerC(ActivityID As String, Optional Salesforce As String = "na68") As Collection
Dim IE As Object

Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & ActivityID)

Set SequencerC = Sequencer((FetchField(IE, "tsk6_ileinner")(0)), Chr(10) & "<br>")

Call opNAV(IE, "quit")
End Function
Private Function Emailv3_TemplateParser(EmailTemplate As Variant) As Collection
Dim MergeFields As New Collection
Dim FieldDecode As Collection
Dim FullSet As String
Dim TemplateFields As Variant
Debug.Print "Starting Template Parser"

TemplateFields = EmailTemplate(2)

For i = 0 To UBound(TemplateFields)
    FullSet = FullSet & TemplateFields(i)(2)(0)
Next i

Set FieldDecode = SequencerB(FullSet, "{!", "}")

For i = 1 To FieldDecode.count
    If FieldDecode(i)(0) = "True" Then
        Set MergeFields = cDictionary(MergeFields, Array(FieldDecode(i)(1), FieldDecode(i)(1)))
    End If
Next i

Set FieldDecode = New Collection
For i = 1 To MergeFields.count
    FieldDecode.Add Array(MergeFields(i)(0)(0), MergeFields(i)(1), Array(MergeFields(i)(0)(1), ""))
Next i

Set Emailv3_TemplateParser = FieldDecode
End Function
Private Function Emailv3_TemplateFetcher(TemplateID As String, Optional InfoBox As String = "Default") As Variant
Dim FieldList As Collection
Dim Template As Variant
Dim i As Double
Dim tString As String


If InfoBox = "Default" Then
    InfoBox = Emailv3InfoBox()
End If

    Set FieldList = New Collection
        FieldList.Add Array("AddressInstruct", "Description")
        FieldList.Add Array("Subject", "Subject")
        FieldList.Add Array("Body", "Body")
    
    Template = Retrieve_Page_Info(TemplateID, FieldList, , True)
    
    'Fix the HTML
    For i = 1 To UBound(Template(2))
        Template(2)(i)(2)(0) = CleanHTMLEmail((Template(2)(i)(2)(0)))
        Template(2)(i)(1) = True
    Next i
    
    tString = PageInfoF(Template, "AddressInstruct")(0)
    i = InStr(1, tString, "BCC:", vbTextCompare)
    Template = PageInfo_RR(Template, "CC", Array(Mid(tString, 4, i - 4), True))
    Template = PageInfo_RR(Template, "BCC", Array(Mid(tString, i + 4, Len(tString) - i), True))
    
    Template = PageInfo_RR(Template, "Info Box", Array(InfoBox, True))
    
    Set FieldList = Emailv3_TemplateParser(Template)
    Debug.Print "Parser returned " & FieldList.count & " merge fields."
    Template = PageInfo_RR(Template, "Merge Fields", Array("Merge Fields", False, CollectionConverter(FieldList)))

Template = PageInfo_RR(Template, "Defaults", Emailv3_Style_and_Signature)

'Print_L2_HTML (Template)

Emailv3_TemplateFetcher = Template
End Function

Private Function AddTemplate(PAX As Variant, EmailTemplate As Variant) As Variant
PAX(0, 1) = EmailTemplate(3)
PAX(1, 1) = EmailTemplate(4) & "; amey@intraxinc.com"
PAX(2, 1) = EmailTemplate(0)
PAX(3, 1) = EmailTemplate(1)
AddTemplate = PAX
End Function
Private Function FetchEmailTemplate(TemplateID As String) As Variant
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim BCCstart As Double
Dim CCStart As Double
Dim CCEnd As Double
Dim BCCend As Double
Dim CopiesLength As Double
Dim rEmail As Variant


'Set IE = CreateObject("InternetExplorer.Application")
'IE.Visible = False
URL = "https://na68.salesforce.com/" & TemplateID & "/e?setupid=EmailTemplates&retURL=" & TemplateID
'Set IE = navigate2page_wait2load(IE, URL)

Call opNAV(IE, "nav", URL)

rEmail = Array("Subject", "Body", "Description", "CC:", "BCC:")
For i = 0 To 2
    Set FieldInfo = Fetch_Fields(IE, (rEmail(i)))
        If FieldInfo.ID = "Body" Then
        rEmail(i) = CleanHTMLEmail((FieldInfo.innerhtml))
        'Debug.Print rEmail(i)
        Else
        rEmail(i) = CleanHTMLEmail((FieldInfo.Value))
        End If
Next i
CCStart = InStr(1, rEmail(2), rEmail(3), vbTextCompare) + 3
BCCstart = InStr(CCStart, rEmail(2), rEmail(4), vbTextCompare)
CCEnd = BCCstart - 1
BCCstart = BCCstart + 4
BCCend = Len(rEmail(2))
   If CCEnd > CCStart Then
        rEmail(3) = Mid(rEmail(2), CCStart, CCEnd - CCStart + 1)
        Else
        rEmail(3) = ""
    End If
    If BCCend > BCCstart Then
        rEmail(4) = Mid(rEmail(2), BCCstart, BCCend - BCCstart + 1)
        Else
        rEmail(4) = ""
    End If
FetchEmailTemplate = rEmail

Call opNAV(IE, "quit", "")
End Function
Private Function CleanHTMLEmail(Text As String) As String
'When html as plain text is pulled from the webpage command characters are returned as their unicode value, this swithes them back to command characters
Text = Replace(Text, "&lt;", "<")
Text = Replace(Text, "&gt;", ">")
Text = Replace(Text, "&amp;", "&")
Text = Replace(Text, Chr(13), "<br/>", , , vbTextCompare)
CleanHTMLEmail = Text
End Function
Private Sub RedirectBrokenEmail(IE As Object, WhomToTell As String)
Dim OldAddresses As Variant
Dim Field As Object
Dim RedirectMessage As String
OldAddresses = Array("p24", "p4", "p5", "p6")
For i = 0 To UBound(OldAddresses)
    Set Field = IE.document.getelementbyid(OldAddresses(i))
    OldAddresses(i) = OldAddresses(i) & ": " & Field.Value & "  "
    Field.Value = ""
        If Field.ID = "p6" Then
            Field.Value = "Address Error - Email not sent"
        End If
        If Field.ID = "p24" Then
            Field.Value = WhomToTell
        End If
Next i
RedirectMessage = "<p><strong><ul>"
    For Each Item In OldAddresses
        RedirectMessage = RedirectMessage & "<li>" & Item & "</li>"
    Next Item
RedirectMessage = RedirectMessage & "</ul></strong></p>"
MsgBox "Revision complete", , "debugging"
Set Field = IE.document.getelementbyid("iframe_p23")
Field.contentWindow.document.Body.innerhtml = RedirectMessage & Field.contentWindow.document.Body.innerhtml
Call IE.document.parentWindow.execScript("sendEmail()", "JavaScript")
End Sub
Private Sub ToggleCheckbox(Field As Object, Value As Variant)
Dim NewValue As Boolean
Dim ActualValue As Boolean
Dim NeedsClick As Boolean

On Error Resume Next
ActualValue = False
NeedsClick = False

'find out actual value
If Field.Checked Then
ActualValue = True
End If

'setup desired value for logic
If Value = 1 Or Value = "Checked" Or Value = "1" Then
    NewValue = True
End If
If Value = 0 Or Value = "Unchecked" Or Value = "0" Then
    NewValue = False
End If

If NewValue And ActualValue = False Then
NeedsClick = True
End If

If NewValue = False And ActualValue Then
NeedsClick = True
End If

If NeedsClick = True Then
Field.Click
End If

Debug.Print "*****RESULTS " & NewValue & " | " & ActualValue & " | " & NeedsClick & " | " & Value

End Sub
Private Function PushUpdates2Page(IE_Page2Update As Object, List_of_Updates As Collection, Optional PressSave As Boolean = True) As String
Dim Field As Object
Dim LinkIDName As Object
Dim debugging As String
Dim SaveResults As Boolean
Dim CleanID As String

debugging = IE_Page2Update.document.URL
    If Not List_of_Updates Is Nothing Then
        For Each Item In List_of_Updates
                CleanID = Replace(Item(0), "_ileinner", "", 1, , vbBinaryCompare)
                Set Field = IE_Page2Update.document.getelementbyid(CleanID)
                If Field.Tagname = "INPUT" Then
                    If Field.Type = "checkbox" Then
                        Call ToggleCheckbox(Field, Item(1))
                    Else
                        Field.Value = Item(1)
                    End If
                End If
          
                If Field.Tagname = "TEXTAREA" Then
                    Field.innerhtml = Item(1)
                End If
          
                If Field.Tagname = "SELECT" Then
                    Field.innerhtml = "<option value=""" & Item(1) & """ selected=""selected"">" & Item(1) & "</option>" & Field.innerhtml
                    Field.Value = Item(1)
                    'MsgBox "CHECK FOR CLOSE", , "What have I done?"
                End If
          
                    If InStr(1, Item(0), "_lkid", vbTextCompare) > 0 Then
                        'This checks if the field ID is a lookup field and adds in placeholder text which will be replaced by name of actual record
                        '
                        Set LinkIDName = IE_Page2Update.document.getelementbyid(Replace(Item(0), "_lkid", "_mod", , , vbTextCompare))
                        LinkIDName.Value = "1"
                       Set LinkIDName = IE_Page2Update.document.getelementbyid(Replace(Item(0), "_lkid", "", , , vbTextCompare))
                        LinkIDName.Value = "Placeholder name"
                        'Set LinkIDName = IE_Page2Update.document.getElementById(Item(0))
                        'LinkIDName.Value = Item(1)
                        Set LinkIDName = IE_Page2Update.document.getelementbyid(Replace(Item(0), "_lkid", "_lkold", , , vbTextCompare))
                        LinkIDName.Value = "Placeholder name"
                    End If
            Debug.Print "UpdatePushed: " & Item(0) & " = " & Item(1)

        Next Item
        IE_Page2Update.Visible = False
        'MsgBox "alert!", , "Debugging"
        If PressSave Then
            SaveResults = HitSave(IE_Page2Update)
        End If
        PushUpdates2Page = IE_Page2Update.LocationURL
    Else
    End If

End Function

Private Function PressSaveButton(IE) As String
Dim Buttons As Object
Dim Pressed As Boolean
Dim PageTitle As String
Dim timeoutcounter As Integer
Dim SaveButton As Object
Dim Error As String
Pressed = False
PageTitle = IE.document.Title
Set Buttons = IE.document.getelementsbyclassname("btn")
    For Each Button In Buttons
        If Button.Value = " Save " Then
            Set SaveButton = Button
        End If
    Next Button
If SaveButton Is Nothing Then
    Error = "Button Missing"
Else
    SaveButton.Click
    If Pressed = True Then
        Application.Wait (Now + #12:00:01 AM#)
        Do While IE.busy
        Loop
        timeoutcounter = 0
        Do While IE.document.Title = "" And IE.document.Title <> PageTitle And timeoutcounter < 10
            Application.Wait (Now + #12:00:01 AM#)
            timeoutcounter = timeoutcounter + 1
        Loop
            If timecounter = 10 Then
                Error = "Timed Out"
            End If
    Else
    End If
End If
PressSaveButton = Error
End Function
Private Sub SendEmail_UpdateCase(EngagementID As String, CaseID As String, MatchID As String, Email_Template As String, Sender As String, CaseUpdates As Collection, DaysTillDueDate As Double)
Dim DueDate As String
Dim PAX As Variant
PAX = PAXbasicInfo(EngagementID, CaseID, MatchID, 4)
DueDate = Format(DateAdd("d", DaysTillDueDate, Now()), "mm/dd/yyyy")
PAX(40, 1) = DueDate
PAX(40, 2) = Format(DueDate, "dddd mmmm d, yyyy")
PAX = AddTemplate(PAX, FetchEmailTemplate(Email_Template))
    If DaysTillDueDate > 0 Then
    CaseUpdates.Add Array("00N1300000BLavQ", PAX(40, 1), "Duedate")
    End If
Call Send_HTMLEmail(PAX, Sender, CaseUpdates)
End Sub

Private Function RenameMatch(MatchID As String) As String
Dim IE As Object
Dim FieldList As Variant
Dim Length As Double

Dim URL As String
Dim FieldInfo As Object
Dim HCname As String
Dim PositionID As String
Dim PAXname As String
Dim Season As String
Dim Year As String
Dim JobTitle As String
Dim MatchName As String
Dim EngagementID As String
Dim ServiceLvl As String
Dim CharactersRemaining As Double


Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchID)
FieldList = Array(Array("0Position", "CF00N30000008REJy_ileinner"), _
                    Array("1HC Name", "CF00N1300000BOCaF_ileinner"), _
                    Array("2PAX Name", "CF00N30000008REK8_ileinner"), _
                    Array("3Engagement", "CF00Na0000009s14h_ileinner"), _
                    Array("4E_Season", "00Na000000B2tGW_ileinner"), _
                    Array("5E_Year", "00Na000000B2KhB_ileinner"), _
                    Array("6E_Service Lvl", "00Na000000B2tGX_ileinner"), _
                    Array("7Job Title", "00Na000000B2Ecn_ileinner"), _
                    Array("8Opportunity", "CF00N30000008RES7_ileinner"), _
                    Array("9P_Service Lvl", "00N1300000BQz2m_ileinner"), _
                    Array("10Opp_Service Lvl", "00N30000007CyH2_ileinner"), _
                    Array("11Match Name Begin", ""), _
                    Array("12Match Name Mid", ""), _
                    Array("13Match Name End", ""), _
                    Array("14Final Match Name", "") _
                )
                
For i = 0 To 3
    FieldList(i)(1) = FetchField(IE, (FieldList(i)(1)))
Next i

If FieldList(3)(1)(1) <> "000000000000000" Then
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & (FieldList(3)(1)(1)))
    For i = 4 To 6
        FieldList(i)(1) = FetchField(IE, (FieldList(i)(1)))
    Next i
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & (FieldList(0)(1)(1)))
    For i = 7 To 9
        FieldList(i)(1) = FetchField(IE, (FieldList(i)(1)))
    Next i
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & (FieldList(8)(1)(1)))
    For i = 10 To 10
        FieldList(i)(1) = FetchField(IE, (FieldList(i)(1)))
    Next i
End If

        Debug.Print "HC Opp Svc Lvl: " & FieldList(10)(1)(0) & " Position service lvl: " & FieldList(6)(1)(0)
    If (FieldList(9)(1)(0)) = "Independent" And (FieldList(10)(1)(0)) = "Premium" Then
        FieldList(11)(1) = "IP-"
        Debug.Print "IP at Premium"
    Else
        Debug.Print "not IP at Premium"
        FieldList(11)(1) = ""
    End If
    
FieldList(11)(1) = FieldList(11)(1) & ParseHCName((FieldList(1)(1)(0)), 70)
FieldList(12)(1) = "-" & ParseHCName((FieldList(7)(1)(0)), 40)
FieldList(13)(1) = "-" & left((FieldList(4)(1)(0)), 3) & Right((FieldList(5)(1)(0)), 2) & "-" & FieldList(2)(1)(0)



FieldList(14)(1) = FieldList(11)(1) & FieldList(12)(1) & FieldList(13)(1)
Debug.Print "Initial Count is " & Len((FieldList(14)(1)))
If Len((FieldList(14)(1))) > 80 Then
    CharactersRemaining = 79
    CharactersRemaining = CharactersRemaining - Len((FieldList(13)(1)))
    If CharactersRemaining - Len((FieldList(11)(1))) > 15 Then
        FieldList(12)(1) = Right((FieldList(12)(1)), CharactersRemaining - Len((FieldList(11)(1))))
    Else
        FieldList(12)(1) = left((FieldList(12)(1)), 15)
        CharactersRemaining = CharactersRemaining - Len((FieldList(12)(1)))
        FieldList(11)(1) = left((FieldList(11)(1)), CharactersRemaining)
    End If
Else
End If
FieldList(14)(1) = FieldList(11)(1) & FieldList(12)(1) & FieldList(13)(1)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchID & "/e")
    Dim UpDate As New Collection
    UpDate.Add Array("Name", FieldList(14)(1))
    Call PushUpdates2Page(IE, UpDate)

IE.Quit
Set IE = Nothing
End Function
Private Function FixAmp(InputText As Variant) As String
Dim Substitutions As Collection
Dim Text As String

Text = (InputText)

Set Substitutions = New Collection
Substitutions.Add Array("&amp;", "&")
Substitutions.Add Array("&#39;", "'")
Substitutions.Add Array("&nbsp;", " ")


For i = 1 To Substitutions.count
    Text = Replace(Text, Substitutions(i)(0), Substitutions(i)(1), 1, , vbTextCompare)
Next i


FixAmp = Text
End Function

Private Function Pull_Master_Child(MasterRecord As String, LinkField As String, ChildID As String) As Collection
Dim URL As String
Dim SpecialCodeNames As New Collection

    SpecialCodeNames.Add Array("Task", "RelatedActivityList", "00T")
    SpecialCodeNames.Add Array("Call", "RelatedHistoryList", "00T")
    SpecialCodeNames.Add Array("Opp4", "RelatedOpportunityList", "006")

    If Len(LinkField) = 17 And left(LinkField, 2) = "CF" Then
    LinkField = Right(LinkField, 15)
    End If
    
    For i = 1 To SpecialCodeNames.count
        If LinkField = SpecialCodeNames(i)(0) And ChildID = SpecialCodeNames(i)(2) Then
            LinkField = SpecialCodeNames(i)(1)
        End If
    Next i
 
    ChildID = left(ChildID, 3)
    MasterRecord = Right(MasterRecord, 15)
    'URL = "https://na68.salesforce.com/a1l?rlid=" & LinkField & "&id=" & MasterRecord
    URL = "https://na68.salesforce.com/" & ChildID & "?rlid=" & LinkField & "&id=" & MasterRecord & "&rowsperpage=500"
Set Pull_Master_Child = PullTable(URL)
End Function
Private Function SFDC_Search_Table(SearchTerm As String, RecordType As String) As Collection
Dim URL As String
Dim Results As Collection
Dim Counter As Integer
Dim TableFound As Boolean

TableFound = False
Counter = 0
Do While TableFound = False
    URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=" & RecordType & "&str=" & SearchTerm & "#!/fen=" & RecordType & "&initialViewMode=detail"
    'Debug.Print "This is the URL of the search being conducted: " & URL
   Set Results = PullTable(URL)
        If Results.count > 0 Then
        TableFound = True
        End If
    Counter = Counter + 1
        If Counter > 5 Then
        TableFound = True
        End If
Loop
Set SFDC_Search_Table = Results
End Function
Private Function PullTable(TableLocation As String, Optional TableType As String = "Table") As Collection
Dim InfoTable As Object
Dim Ctable As Collection
Dim Entries As Collection
Dim Rows As Object
Dim IsFirst As Boolean
Dim URL As String
Dim IE As Object
Dim td As Object

Dim Counter As Integer
Dim StillLoading As Boolean
Dim NoResults As Boolean
Dim AnchorResult As Variant
Dim PagelengthOLD As Double
Dim PagelengthNEW As Double
Dim FullDebugMode As Boolean
Dim Titles As String
Dim TableClass As String
Dim Table_Number_From_Page As Double


FullDebugMode = False
Debug.Print "ListViewPage: " & TableLocation
NoResults = False
'On Error Resume Next

Call opNAV(IE, "nav", TableLocation)
'MsgBox "Look at page", , "Debugging"

If TableType = "Table" Then
TableClass = "pbBody"
Table_Number_From_Page = 0
End If
If TableType = "Report" Then
TableClass = "reportTable tabularReportTable"
Table_Number_From_Page = 1
End If


    Counter = 0
    StillLoading = True
    Do While StillLoading
        PagelengthNEW = Len(IE.document.Body.innerhtml)
        Application.Wait (Now + #12:00:01 AM#)
        If PagelengthNEW = PagelengthOLD Then
            StillLoading = False
        Else
            Counter = Counter + 1
            Application.Wait (Now + #12:00:01 AM#)
            PagelengthOLD = PagelengthNEW
        End If
    Loop
    
    PagelengthOLD = 0
    Do While (TD_Counter(IE)(0) / TD_Counter(IE)(1)) > 0.1 And PagelengthOLD < 5
        Debug.Print "Still Waiting on TD Counter"
        PagelengthOLD = PagelengthOLD + 1
    Loop
Debug.Print "Had to wait " & Counter & " seconds for page to finish loading."



If InStr(1, IE.document.Body.innerhtml, TableClass, vbBinaryCompare) > 0 Then
        Set InfoTable = IE.document.getelementsbyclassname(TableClass)
        ' This pulls just the info table
        Set InfoTable = InfoTable.Item(0).getelementsbytagname("tbody")
      
        Set InfoTable = InfoTable.Item(0).getelementsbytagname("tr")
            Set Ctable = New Collection
            For Each R0w In InfoTable
                If FullDebugMode Then
                Debug.Print "------ New Table Row starting here ------"
                End If
                Set Entries = New Collection
                Set Rows = R0w.getelementsbytagname("th")
                    For Each td In Rows
                        AnchorResult = TAGorAnchor(td)
                            If AnchorResult(0) = "No matches found" Then
                                NoResults = True
                            End If
                            If FullDebugMode Then
                            Debug.Print "Cell header text is | " & AnchorResult(0)
                            End If
                        Entries.Add AnchorResult
                    Next td
                Set Rows = R0w.getelementsbytagname("td")
                    IsFirst = True
                        For Each td In Rows
                            If FullDebugMode Then
                            Debug.Print "Cell text is | " & TAGorAnchor(td)(0)
                            End If
                           If IsFirst Then
                                If Entries.count = 0 Then
                                    Entries.Add TAGorAnchor(td)
                                Else
                                    Entries.Add TAGorAnchor(td), , 1
                                End If
                                IsFirst = False
                            Else
                                Entries.Add TAGorAnchor(td)
                            End If
                        Next td
                Ctable.Add Entries
            Next R0w
         
            'check if the first row of results only has 1 column and if it does see if that column links somewhere, otherwise no results found
            If Ctable.count < 2 Then
                Set Entries = New Collection
                Entries.Add Array("No Results")
                Ctable.Add Entries
            End If
          
            For Each Column In Ctable(1)
                Titles = Titles & " | " & Column(0)
            Next Column
         
            Debug.Print Ctable.count - 1 & " results | " & Ctable(2).count & " entries" & Titles
            If NoResults Then
               Debug.Print "Table returned no results"
                Ctable(1)(1)(0) = "No Results"
            End If
            If Ctable.count = 0 Then
                Set Ctable = New Collection
                Set Entries = New Collection
                Entries.Add Array("No Results")
                Ctable.Add Entries
            End If
Else
    Set Entries = New Collection
        Entries.Add Array("No Results")
        Entries.Add Array("No Results")
        Entries.Add Array("No Results")
    Set Ctable = New Collection
        Ctable.Add Entries
        Ctable.Add Entries
End If
 
Set PullTable = Ctable
IE.Quit
Set IE = Nothing
End Function
Private Sub PrintTable(Master As String, lookup As String)
Dim SFDCtable As Collection
Dim OutputRow As Double
CheckifLoggedin
Set SFDCtable = FindRecordDetails(Pull_Master_Child(Master, lookup))
OutputRow = 3
On Error Resume Next
For Each Row In SFDCtable
'For i = 0 To 4
    Range("A" & OutputRow).Value = "<row start>"
    OutputRow = OutputRow + 1
    For Each Element In Row
        For Each rock In Element
                    Range("A" & OutputRow).Value = rock
                    OutputRow = OutputRow + 1
        Next rock
        OutputRow = OutputRow + 1
    Next Element
    Range("A" & OutputRow).Value = "<row end>"
    OutputRow = OutputRow + 1
'Next i
Next Row
End Sub
Private Function TAGorAnchor(Element As Object) As Variant
'This takes a td element and checks if it has an anchor or not.
'If there's an <a> then it returns an array of the innerhtml and HREF link
Dim Value As Variant
Dim anchor As Object
Dim HREFs As Double
Dim NameS As Double
Dim NameE As Double
    On Error GoTo Error
        If InStr(1, Element.innerhtml, "<a ", vbTextCompare) Then
        'Value.Add Element.innerhtml
            HREFs = InStr(1, Element.innerhtml, "href=", vbTextCompare) + 5
            NameS = InStr(HREFs, Element.innerhtml, ">", vbTextCompare) + 1
            NameE = InStr(NameS, Element.innerhtml, "<", vbTextCompare)
            Value = Array(Mid(Element.innerhtml, NameS, NameE - NameS), Mid(Element.innerhtml, HREFs + 2, 15))
        Else
            'Check if field is a checkbox type and return checked/unchecked
            If InStr(1, Element.innerhtml, "class=""checkImg", vbTextCompare) Then
                If InStr(1, Element.innerhtml, "checkbox_checked.gif", vbTextCompare) Then
                    Value = Array("CHECKED")
                End If
                If InStr(1, Element.innerhtml, "checkbox_unchecked.gif", vbTextCompare) Then
                    Value = Array("UNCHECKED")
                End If
            Else
                Value = Array(Element.innerhtml)
            End If
        End If
        TAGorAnchor = Value
    Exit Function
Error:
    Value = Array("Error")
    TAGorAnchor = Value
End Function
Private Function Housing_OneTrueValidation(SiteID As String, PAXSeason As String, PAXYear As String) As String
Dim FieldList As Collection
Dim AssessmentList As Collection
Dim Assessment As Variant
Dim IE As Object
Dim FinalAnswer As String

Debug.Print "*** Finding One True Assessment"
If Len(SiteID) = 15 Then
    Set AssessmentList = Pull_Master_Child(SiteID, "CF00N1300000BLnhV", "a1l")
    FinalAnswer = ""
    
    Debug.Print "Assessment list results  " & UBound(AssessmentList(2)(1))
    If UBound(AssessmentList(2)(1)) < 1 Then
    Else
        Set FieldList = New Collection
            FieldList.Add Array("Season", "00N1300000BLnhq")
            FieldList.Add Array("Year", "00N1300000BLnhn")
            FieldList.Add Array("Assessment Location", "00Na000000B2Kek")
            FieldList.Add Array("Landlord", "CF00N1300000BLnhl_ileinner")
            FieldList.Add Array("Status", "00Na000000B2KgF_ileinner")
            
        For i = 2 To AssessmentList.count
            Assessment = Retrieve_Page_Info((AssessmentList(i)(1)(1)), FieldList)
            Debug.Print "PAX = " & PAXYear & "|" & PAXSeason & "  /  " & PageInfoF(Assessment, "Year")(0) & "|" & PageInfoF(Assessment, "Season")(0)
                If PageInfoF(Assessment, "Year")(0) = PAXYear And PageInfoF(Assessment, "Season")(0) = PAXSeason Then
                    FinalAnswer = Assessment(1)
                    i = AssessmentList.count
                End If
        Next i
    End If
    If FinalAnswer = "" Then
    'create new housing validation assessment if one wasn't found
        Call opNAV(IE, "nav", "https://na68.salesforce.com/a1l/e?RecordType=01213000001WIqF&ent=01Ia0000002Ky1A")
        'IE.Visible = True
        'MsgBox "about to create a new assessment", , "Debugging"
        Set FieldList = New Collection
            FieldList.Add Array("00N1300000BLnhq", PAXSeason)
            FieldList.Add Array("00N1300000BLnhn", PAXYear)
            FieldList.Add Array("CF00N1300000BLnhV_lkid", SiteID)
            FieldList.Add Array("Name", "WT Housing Validation - " & PAXSeason & " " & PAXYear)
        FinalAnswer = Right(PushUpdates2Page(IE, FieldList), 15)
    End If
End If
Housing_OneTrueValidation = FinalAnswer
Call opNAV(IE, "quit", "")
End Function
Private Function FindOneTrueValidation(AcommID As String, Optional CreateNew As Boolean = False) As String
Dim URL As String
Dim LinkField As String
Dim MasterRecord As String
Dim FieldResult As Object
Dim AssessmentList As Collection
Dim IE As Object
Dim Row As Collection
Dim FinalAnswer As String
Dim SeasonYear As String
Dim AssessSeason As String
Dim AssessYear As String
Dim PAXSeason As String
Dim PAXYear As String
Dim SiteID As String
Dim createnewassessmentsuccessfull As Boolean
 
 
MsgBox "Old OneTrueValidation Launched", , "Debugging"

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AcommID)
MasterRecord = FetchField(IE, "CF00N30000009ot87_ileinner")(1)

If MasterRecord = "a0c1B00000EgUFO" Then
FinalAnswer = ""
Else
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & FetchField(IE, "CF00Na000000B2kKt_ileinner")(1))
    
    'Set FieldResult = Fetch_Fields(IE, "00Na000000B2tGW")
    PAXSeason = FetchField(IE, "00Na000000B2tGW_ileinner")(0)
    'Set FieldResult = Fetch_Fields(IE, "00Na000000B2KhB")
    PAXYear = FetchField(IE, "00Na000000B2KhB_ileinner")(0)
     
    'MsgBox SeasonYear, , "PAX Info"
    'MsgBox MasterRecord, , "THis is the site ID should start with a0c"
    Set AssessmentList = Pull_Master_Child(MasterRecord, "CF00N1300000BLnhV", "a1l")
    'Set FieldResult = FieldResult(1)
     
    FinalAnswer = ""
     
    If AssessmentList(2)(1)(0) = "No Results" Then
        FinalAnswer = "Error"
    Else
        Set AssessmentList = FindRecordDetails(AssessmentList)
      
        For Each Reply In AssessmentList
        On Error Resume Next
            For Each dataentry In Reply
                If UBound(dataentry) > 0 Then
                    If dataentry(1) = "00N1300000BLnhq" Then
                    AssessSeason = dataentry(0)
                    End If
                    If dataentry(1) = "00N1300000BLnhn" Then
                    AssessYear = dataentry(0)
                    End If
                    If dataentry(1) = "CF00N1300000BLnhV_lkid" Then
                    SiteID = dataentry(0)
                    End If
                End If
                ' MsgBox AssessSeason & AssessYear, , "season year found"
                'MsgBox dataentry(1) & " = " & dataentry(0), , "Assess info"
           Next dataentry
            'MsgBox AssessSeason & AssessYear & " VS. " & SeasonYear, , "do they match?"
            If AssessSeason & AssessYear = PAXSeason & PAXYear Then
                FinalAnswer = Reply(2)(1)
                'MsgBox FinalAnswer, , "This should be the link ID"
            End If
          
        Next Reply
     
        'create a new assessment if site has assessmens but none matched PAX
        If CreateNew And Len(FinalAnswer) <> 15 Then
            SiteID = MasterRecord
            URL = Replace("https://na68.salesforce.com/<ID>/e?retURL=<ID>", "<ID>", SiteID)
                    Set IE = navigate2page_wait2load(IE, URL)
                    Set FieldResult = Fetch_Fields(IE, "CF00N1300000BLnhG_lkid")
                    LinkField = FieldResult(0).Value
            URL = "https://na68.salesforce.com/a1l/e?retURL=%2Fa1l%2Fo&RecordType=01213000001WIqF&ent=01Ia0000002Ky1A&Name=WT+Housing+Validation&CF00N1300000BLnhV=Site&CF00N1300000BLnhV_lkid="
            URL = URL & SiteID & "&00N1300000BLnhq=" & PAXSeason & "&00N1300000BLnhn=" & PAXYear & "&CF00N1300000BLnhl=LandlordName&CF00N1300000BLnhl_lkid=" & LinkField
            Set IE = navigate2page_wait2load(IE, URL)
            createnewassessmentsuccessfull = HitSave(IE)
            FinalAnswer = Right(IE.LocationURL, 15)
        End If
      
    End If
End If
    FindOneTrueValidation = FinalAnswer
IE.Quit
Set IE = Nothing
End Function
Private Function FindRecordDetails(RecordList As Collection) As Collection
Dim ListofFields As New Collection
Dim URL As String
Dim Record As Collection
Dim ReturnedFields As Object
Dim IE As Object
Dim IsFirst As Boolean
Dim FieldTagTypes As Variant
Set IE = CreateObject("InternetExplorer.Application")
IE.Visible = False
IsFirst = True
 
For Each Record In RecordList
    If IsFirst Then
        IsFirst = False
    Else
        'start making sure enough info exists to look up
        If Record.count > 1 Then
        If UBound(Record(2)) > 0 Then
  
            If Len(Record(2)(1)) = 15 Then
                URL = "https://na68.salesforce.com/" & Record(2)(1) & "/e?"
               Set IE = navigate2page_wait2load(IE, URL)
                'MsgBox "this should be the assessment page"
          
                FieldTagTypes = Array("INPUT", "SELECT", "TEXTAREA")
                For Each TagType In FieldTagTypes
                    Set ReturnedFields = IE.document.getelementsbytagname(TagType)
                        Set ListofFields = ParseReturnedFields(ReturnedFields)
                        For Each Entry In ListofFields
                            Record.Add Entry
                        Next Entry
                Next TagType
            End If
        'close out making sure enough info exists
        End If
        End If
    End If
Next Record
Set FindRecordDetails = RecordList
IE.Quit
Set IE = Nothing
End Function
Private Function ParseReturnedFields(ListOfields As Object) As Collection
Dim ProccessedFields As New Collection
Dim Info As Variant
    For Each Field In ListOfields
        If Field.Tagname = "INPUT" Then
           Info = Array(Field.Value, Field.ID)
            ProccessedFields.Add Info
        End If
  
        If Field.Tagname = "SELECT" Then
            Info = Array(Field.Value, Field.ID)
            ProccessedFields.Add Info
        End If
  
        If Field.Tagname = "TEXTAREA" Then
            Info = Array(Field.innerhtml, Field.ID)
            ProccessedFields.Add Info
        End If
    Next Field
Set ParseReturnedFields = ProccessedFields
End Function
Private Function PullFieldfromList(RecordTable As Collection, Fields As Variant) As Collection
Dim Row As Collection
Dim Entry As Variant
Dim fieldneeded As Variant
Dim Results As Collection
On Error Resume Next
    For Each Row In RecordTable
        For Each Entry In Row
            Set Results = New Collection
            If UBound(Entry) > 0 Then
                For Each fieldneeded In Fields
                    If Entry(1) = fieldneeded Then
                    Results.Add Entry(0)
                    End If
                Next fieldneeded
            End If
            Entry.Add Results
        Next Entry
    Next Row
Set PullFieldfromList = Results
End Function
Private Function AddressParse(Street As String, Unit As String, City As String, State As String, Zip As String, Optional Country As String = "USA") As Variant
Dim StreetIndex As Collection
    Set StreetIndex = List_of_street_name_substitutions()
Dim HouseNumber As String
Dim Quadrant As String
Dim StreetName As String
Dim StreetDesignation As String
Dim CardinalDirection As String
Dim UnitInformation As Variant
Dim Spaces(7) As String
Dim Teerts As String
Dim Length As Double
Dim LastWord As String
Dim FirstWord As String
Dim FullStreet As String
Dim Is_US_Route As Boolean
Dim Is_AK_milemarker As Boolean
Dim Is_POBOX As Boolean
Dim UTDirectional As Boolean
Dim directions As New Collection
Dim F As Double
Dim i As Double
Dim SevereAddressCorrectionRequired As Boolean
Dim AddressDamaged As Boolean
Dim LegitUnit As Boolean

AddressDamaged = False
SevereAddressCorrectionRequired = False
Is_US_Route = False
Is_AK_milemarker = False
Is_POBOX = False
UTDirectional = False
directions.Add Array("North", "N")
directions.Add Array("South", "S")
directions.Add Array("East", "E")
directions.Add Array("West", "W")
directions.Add Array("NorthWest", "NW")
directions.Add Array("NorthEast", "NE")
directions.Add Array("SouthWest", "SW")
directions.Add Array("SouthEast", "SE")
   
        Zip = left(Zip, 5)
        'note: remove periods if there's a space after them
            'Street = Replace(Street, ". ", " ")
        'note: replaces periods with a space assuming all periods followed by as space are already missing | W.Hiawatha becomes W Hiawatha
       Street = Replace(Street, ".", " ")
   
        'note: find and replace North West with NorthWest?
   
        'note: remove dashes and replace with space
        Street = Replace(Street, "-", " ")
        Street = Trim(Street)
        'note: address fixing - look for city name in address and truncate it
        City = Replace(City, ".", "")
        City = Replace(City, "-", " ")
    
    
        'Detect if the full address was put in the Street field
        '   600 California St, San Francicso, CA
        '   10th Fl
        '   San Francicsco
        '   CA
        
        F = InStr(1, Street, City, vbTextCompare)
        If F > 0 Then
            i = InStr(1, Street, ",", vbTextCompare)
            If i <> 0 And F > i Then
                Street = left(Street, i)
                SevereAddressCorrectionRequired = True
            End If
        End If
   
        'remove extra commas
        Street = Replace(Street, ",", "")
   
        Spaces(0) = 1
        For i = 0 To 4
            F = i + 1
            On Error Resume Next
            Spaces(F) = InStr(Spaces(i), Street, " ", vbTextCompare)
        Next i
   
        Length = Len(Street)
        Teerts = StrReverse(Street)
            'last space
            Spaces(6) = Length - InStr(1, Teerts, " ", vbTextCompare)
        LastWord = Mid(Street, Spaces(6) + 2, Length - Spaces(6))
    
            For Each Direction In directions
                For i = 0 To 1
                    If UCase(LastWord) = UCase(Direction(i)) Then
                        CardinalDirection = Direction(1)
                    End If
                Next i
            Next Direction
   
        HouseNumber = Mid(Street, 1, Spaces(1) - 1)
        'Often times a house number that is just 1 will be spelled out
        HouseNumber = Replace(HouseNumber, "ONE", "1", 1, , vbTextCompare)
            If CardinalDirection = "" Then
                FullStreet = Mid(Street, Spaces(1) + 1, Length - Len(HouseNumber) - 1)
            Else
                FullStreet = Mid(Street, Spaces(1) + 1, Length - Len(LastWord) - Len(HouseNumber) - 2)
            End If
        Teerts = StrReverse(FullStreet)
        Spaces(7) = Len(FullStreet) - InStr(1, Teerts, " ", vbTextCompare)
   
        'If there doesn't seem to be a street suffix/designation, assume what was given is the street name
        'note: The suffix/designation should be compared to the master list to check if it's actuall part of the street name and the designation is missing.
        'note: for example, "501 Van Ness" is missing the designation ST
        'note: Designation is significantly more mandatory when the street name is a number ie: 3rd St vs Ave
        If Spaces(7) < 2 Then
            StreetName = FullStreet
            StreetDesignation = ""
        Else
            StreetName = left(FullStreet, Spaces(7))
            StreetDesignation = Mid(FullStreet, Spaces(7) + 2, Len(FullStreet) - Spaces(7))
        End If
   
        'note: check to see if the first word after the house number is a direction and set it as a quadrant/predirectional element
        Quadrant = ""
            If InStr(1, StreetName, " ", vbTextCompare) > 0 Then
                FirstWord = left(StreetName, InStr(1, StreetName, " ", vbTextCompare) - 1)
                   For Each Direction In directions
                        For i = 0 To 1
                            If UCase(FirstWord) = UCase(Direction(i)) Then
                                Quadrant = Direction(1)
                            End If
                        Next i
                    Next Direction
            End If
   
        If Quadrant <> "" Then
            StreetName = Right(StreetName, Len(StreetName) - Len(FirstWord) - 1)
       End If
   
        If InStr(1, HouseNumber, "PO", vbTextCompare) > 0 Then
            Is_POBOX = True
        End If
   
        If InStr(1, HouseNumber, "mile", vbTextCompare) > 0 Then
            Is_AK_milemarker = True
        End If
   
        If IsNumeric(StreetDesignation) Then
           Is_US_Route = True
        End If
   
        If StreetDesignation <> "" Then
            If IsNumeric(left(StreetDesignation, Len(StreetDesignation) - 1)) And UCase(Right(StreetDesignation, 1)) = "A" Then
                Is_US_Route = True
            End If
        End If
      
        'This part cleans up the Street vs ST vs St. portion.  First it checks if the format matches the US/Highway/Route style otherwise it just normalizes the designation
        If Is_US_Route Then
        'this checks to see if it uses the UT format of N 1234 W, otherwise it assumes that because the street designation was a number that it's a US Highway
            For Each Direction In directions
                If WorksheetFunction.Proper(HouseNumber) = Direction(0) Then
                    UTDirectional = True
                End If
                If WorksheetFunction.Proper(HouseNumber) = Direction(1) Then
                    UTDirectional = True
                End If
            Next Direction
        
            If UTDirectional = False Then
                StreetName = "US Rte"
            End If
        Else
            For Each Replacement In StreetIndex
                StreetDesignation = Replace(StreetDesignation, Replacement(0), Replacement(1), 1, -1, vbTextCompare)
            Next Replacement
        End If
   
        If IsNumeric(StreetName) Then
            If Right(StreetName, 1) = "1" Then
               StreetName = StreetName & "st"
            End If
            If Right(StreetName, 1) = "2" Then
                StreetName = StreetName & "nd"
            End If
            If IsNumeric(Right(StreetName, 1)) Then
                StreetName = StreetName & "th"
            End If
        End If
    'Note: fix apartment/unit information in a seperate class
    UnitInformation = Normalize_Apt(Unit)
    
    'Flag addresses that are damaged or too incomplete
        If SevereAddressCorrectionRequired Then
            AddressDamaged = True
        End If
        
        If Is_AK_milemarker = False Then
            If HouseNumber = "" Or StreetName = "" Or StreetDesignation = "" Then
                If Quadrant = "" And CardinalDirection = "" Then
                    AddressDamaged = True
                End If
            End If
        End If
        
        If UnitInformation(0) = "" Then
            LegitUnit = False
        Else
            LegitUnit = True
            If InStr(1, UnitInformation(0), HouseNumber, vbTextCompare) > 0 Then
                LegitUnit = False
            End If
        End If
   
    Teerts = "(0)House Number: " & HouseNumber & " | (1)PreDirectional: " & Quadrant & " | (2)StreetName: " & StreetName & " | (3)StreetDes: " & StreetDesignation & " | (4)PostDirectional: " & CardinalDirection & " | (5)Unit Type: " & UnitInformation(1) & " | (6)Unit#: " & UnitInformation(0)
    Teerts = Teerts & " | (7)City: " & City & " | (8)State: " & State & " | (9)Zip: " & Zip & " | (12)IsMileMarker? " & Is_AK_milemarker & " | (14)Adrs AutoCorrected? " & SevereAddressCorrectionRequired & " | (15)Adrs Dmgd: " & AddressDamaged & " | (16)lUnit?: " & LegitUnit
    Debug.Print Teerts
    'HouseNumber, Quadrant,StreetName,StreetDesignation,CardinalDirection,Unit#,UnitDesignation,City, State, ZIP, ISRoute?, IsMilemarker, IsPOBOX, (16)is the unit number legit?
AddressParse = Array(HouseNumber, Quadrant, WorksheetFunction.Proper(StreetName), WorksheetFunction.Proper(StreetDesignation), CardinalDirection, UnitInformation(1), UnitInformation(0), WorksheetFunction.Proper(City), UCase(State), Zip, Country, Is_US_Route, Is_AK_milemarker, Is_POBOX, SevereAddressCorrectionRequired, AddressDamaged, LegitUnit)
End Function
Function DeConstructAddress(Street As String, Unit As String, City As String, State As String, Zip As String) As String
Dim Address As Variant
Dim R3sults As String
    Address = AddressParse(Street, Unit, City, State, Zip)
    R3sults = Address(0)
    R3sults = R3sults & " " & Address(2) & " " & Address(3)
        If Address(4) <> "" Then
        R3sults = R3sults & " " & Address(4)
        End If
   
        If Address(6) <> "" Then
        R3sults = R3sults & ", "
        'R3sults = R3sults & addRess(5)
        R3sults = R3sults & " " & Address(6)
        End If
    DeConstructAddress = R3sults & ", " & Address(7) & ", " & Address(8) & " " & Address(9)
End Function
Private Function Normalize_Apt(UnitNumber As String) As Variant
Dim Hashtag As Boolean
Dim Keywords As Collection
Dim UnitType As String
Dim Space As Double
Dim Length As Double
Dim UnitDesignation As String
Dim Unit As String
    Unit = UnitNumber
    'note: it's easier to just note if # was part of the unit number than to try to clean up the formatting.
    Unit = Replace(UnitNumber, ".", " ")
    Unit = Replace(UnitNumber, "#", "# ")
    Unit = Replace(UnitNumber, "-", " ")
    Unit = Replace(UnitNumber, "No", "No ")
    Unit = Trim(UnitNumber)
    Space = InStr(1, Unit, " ", vbTextCompare)
    Length = Len(Unit)
   Set Keywords = UnitDesignationWords()
    UnitType = ""
    'note: Cycle through all the unit descripters and standardize the results
    If Space > 0 Then
        Set Keywords = UnitDesignationWords()
            For j = 1 To Keywords.count
                For i = 0 To 1
                    If InStr(1, Unit, Keywords(j)(i), vbTextCompare) > 0 Then
                        UnitType = Keywords(j)(1)
                        'note: this exits the loop since once I've found the unit type I don't need to check the rest
                        i = 2
                        j = Keywords.count + 1
                    End If
                Next i
            Next j
        UnitDesignation = Mid(Unit, Space + 1, Len(Unit) - Space)
    Else
        UnitDesignation = Unit
    End If
   
        
    Normalize_Apt = Array(UnitDesignation, UnitType, UnitNumber)
End Function
Private Function UnitDesignationWords() As Collection
Dim WordBank As New Collection
    WordBank.Add Array("Aparatment", "Apt")
    WordBank.Add Array("Aparment", "Apt")
    WordBank.Add Array("Apartament", "Apt")
    WordBank.Add Array("Apartement", "Apt")
    WordBank.Add Array("Apartman", "Apt")
    WordBank.Add Array("Apartmant", "Apt")
    WordBank.Add Array("apartmen", "Apt")
    WordBank.Add Array("Apartment", "Apt")
    WordBank.Add Array("apatment", "Apt")
    WordBank.Add Array("apertmen", "Apt")
    WordBank.Add Array("Apertment", "Apt")
    WordBank.Add Array("App", "Apt")
    WordBank.Add Array("appartmen", "Apt")
    WordBank.Add Array("Appartment", "Apt")
    WordBank.Add Array("Apper", "Apt")
    WordBank.Add Array("Appt", "Apt")
    WordBank.Add Array("Apr", "Apt")
    WordBank.Add Array("Aprt", "Apt")
    WordBank.Add Array("Apt", "Apt")
    WordBank.Add Array("Basement", "Bsmt")
    WordBank.Add Array("bl", "Block")
    WordBank.Add Array("Bldg", "Bldg")
    WordBank.Add Array("block", "Block")
    WordBank.Add Array("Boy?s", "Boy's")
    WordBank.Add Array("Boys", "Boy's")
    WordBank.Add Array("Bsmt", "Bsmt")
    WordBank.Add Array("Building", "Bldg")
    WordBank.Add Array("Builing", "Bldg")
    WordBank.Add Array("buliding", "Bldg")
    WordBank.Add Array("Cabin", "Cabin")
    WordBank.Add Array("Cabin6", "Cabin")
    WordBank.Add Array("Cabins", "Cabin")
   WordBank.Add Array("Condo", "Unit")
    WordBank.Add Array("cottage", "Cottage")
    WordBank.Add Array("Door", "Unit")
    WordBank.Add Array("dorm", "Dorm")
    WordBank.Add Array("Dormitory", "Dorm")
    WordBank.Add Array("Dorms", "Dorm")
    WordBank.Add Array("Fl", "Floor")
    WordBank.Add Array("flat", "Unit")
    WordBank.Add Array("Floor", "Floor")
    WordBank.Add Array("Girl", "Girl's")
    WordBank.Add Array("No", "Unit")
    WordBank.Add Array("Number", "Unit")
    WordBank.Add Array("PO", "PO BOX")
    WordBank.Add Array("Rm", "Rm")
    WordBank.Add Array("Rn:", "Rm")
    WordBank.Add Array("Rom", "Rm")
    WordBank.Add Array("Romm", "Rm")
    WordBank.Add Array("Room", "Rm")
    WordBank.Add Array("Ste", "Ste")
    WordBank.Add Array("Suite", "Ste")
    WordBank.Add Array("Unit", "Unit")
    WordBank.Add Array("Upper", "Upper")
    WordBank.Add Array("Upperdorm", "Upper")
    WordBank.Add Array("Uppr", "Upper")
Set UnitDesignationWords = WordBank
End Function
Private Function List_of_street_name_substitutions() As Collection
    Dim List As New Collection
    List.Add Array(".", "")
    List.Add Array("ALLEY", "ALY")
    List.Add Array("ANEX", "ANX")
    List.Add Array("ARCADE", "ARC")
    List.Add Array("AVENUE", "AVE")
    List.Add Array("BAYOU", "BYU")
    List.Add Array("BEACH", "BCH")
    List.Add Array("BEND", "BND")
    List.Add Array("BLUFF", "BLF")
    List.Add Array("BLUFFS", "BLFS")
    List.Add Array("BOTTOM", "BTM")
    List.Add Array("BOULEVARD", "BLVD")
    List.Add Array("BRANCH", "BR")
    List.Add Array("BRIDGE", "BRG")
    List.Add Array("BROOK", "BRK")
    List.Add Array("BROOKS", "BRKS")
    List.Add Array("BURG", "BG")
    List.Add Array("BURGS", "BGS")
    List.Add Array("BYPASS", "BYP")
    List.Add Array("CAMP", "CP")
    List.Add Array("CANYON", "CYN")
    List.Add Array("CAPE", "CPE")
    List.Add Array("CAUSEWAY", "CSWY")
    List.Add Array("CENTER", "CTR")
    List.Add Array("CENTERS", "CTRS")
    List.Add Array("CIRCLE", "CIR")
    List.Add Array("CIRCLES", "CIRS")
    List.Add Array("CLIFF", "CLF")
    List.Add Array("CLIFFS", "CLFS")
    List.Add Array("CLUB", "CLB")
    List.Add Array("COMMON", "CMN")
    List.Add Array("COMMONS", "CMNS")
    List.Add Array("CORNER", "COR")
    List.Add Array("CORNERS", "CORS")
   List.Add Array("COURSE", "CRSE")
    List.Add Array("COURT", "CT")
    List.Add Array("COURTS", "CTS")
    List.Add Array("COVE", "CV")
    List.Add Array("COVES", "CVS")
    List.Add Array("CREEK", "CRK")
    List.Add Array("CRESCENT", "CRES")
    List.Add Array("CREST", "CRST")
    List.Add Array("CROSSING", "XING")
    List.Add Array("CROSSROAD", "XRD")
    List.Add Array("CROSSROADS", "XRDS")
    List.Add Array("CURVE ", "CURV")
    List.Add Array("DALE", "DL")
    List.Add Array("DAM", "DM")
    List.Add Array("DIVIDE", "DV")
    List.Add Array("DRIVE", "DR")
    List.Add Array("DRIVES ", "DRS")
    List.Add Array("ESTATE", "EST")
    List.Add Array("ESTATES", "ESTS")
    List.Add Array("EXPRESSWAY", "EXPY")
    List.Add Array("EXTENSION", "EXT")
    List.Add Array("EXTENSIONS", "EXTS")
    List.Add Array("FALL", "FALL")
    List.Add Array("FALLS", "FLS")
    List.Add Array("FERRY", "FRY")
    List.Add Array("FIELD", "FLD")
    List.Add Array("FIELDS", "FLDS")
    List.Add Array("FLAT", "FLT")
    List.Add Array("FLATS", "FLTS")
    List.Add Array("FORD", "FRD")
    List.Add Array("FORDS", "FRDS")
    List.Add Array("FOREST", "FRST")
    List.Add Array("FORGE", "FRG")
    List.Add Array("FORGES", "FRGS")
    List.Add Array("FORK", "FRK")
    List.Add Array("FORKS", "FRKS")
    List.Add Array("FORT", "FT")
    List.Add Array("FREEWAY", "FWY")
    List.Add Array("GARDEN", "GDN")
    List.Add Array("GARDENS", "GDNS")
    List.Add Array("GATEWAY", "GTWY")
    List.Add Array("GLEN", "GLN")
    List.Add Array("GLENS", "GLNS")
    List.Add Array("GREEN", "GRN")
    List.Add Array("GREENS", "GRNS")
    List.Add Array("GROVE", "GRV")
    List.Add Array("GROVES", "GRVS")
    List.Add Array("HARBOR", "HBR")
    List.Add Array("HARBORS", "HBRS")
    List.Add Array("HAVEN", "HVN")
    List.Add Array("HEIGHTS", "HTS")
    List.Add Array("HIGHWAY", "HWY")
    List.Add Array("HILL", "HL")
    List.Add Array("HILLS", "HLS")
    List.Add Array("HOLLOW", "HOLW")
    List.Add Array("INLET", "INLT")
    List.Add Array("ISLAND", "IS")
    List.Add Array("ISLANDS", "ISS")
    List.Add Array("ISLE", "ISLE")
    List.Add Array("JUNCTION", "JCT")
    List.Add Array("JUNCTIONS", "JCTS")
    List.Add Array("KEY", "KY")
    List.Add Array("KEYS", "KYS")
    List.Add Array("KNOLL", "KNL ")
    List.Add Array("KNOLLS", "KNLS")
    List.Add Array("LAKE", "LK")
    List.Add Array("LAKES", "LKS")
    List.Add Array("LAND", "LAND")
    List.Add Array("LANDING", "LNDG")
    List.Add Array("LANE", "LN")
    List.Add Array("LIGHT", "LGT")
    List.Add Array("LIGHTS", "LGTS")
    List.Add Array("LOAF", "LF")
    List.Add Array("LOCK", "LCK")
    List.Add Array("LOCKS", "LCKS")
    List.Add Array("LODGE", "LDG")
    List.Add Array("LOOP", "LOOP")
    List.Add Array("MALL", "MALL")
    List.Add Array("MANOR", "MNR")
    List.Add Array("MANORS", "MNRS")
    List.Add Array("MEADOW", "MDW")
    List.Add Array("MEADOWS", "MDWS")
    List.Add Array("MEWS", "MEWS")
    List.Add Array("MILL", "ML")
    List.Add Array("MILLS", "MLS")
    List.Add Array("MISSION", "MSN")
    List.Add Array("MOTORWAY", "MTWY")
    List.Add Array("MOUNT", "MT")
    List.Add Array("MOUNTAIN", "MTN")
    List.Add Array("MOUNTAINS", "MTNS")
    List.Add Array("NECK", "NCK")
    List.Add Array("ORCHARD", "ORCH")
    List.Add Array("OVAL", "OVAL")
    List.Add Array("OVERPASS", "OPAS")
    List.Add Array("PARK", "PARK")
    List.Add Array("PARKS", "PARK")
    List.Add Array("PARKWAY", "PKWY")
    List.Add Array("PARKWAYS", "PKWY")
    List.Add Array("PASS", "PASS")
    List.Add Array("PASSAGE", "PSGE")
    List.Add Array("PATH", "PATH")
    List.Add Array("PIKE", "PIKE")
    List.Add Array("PINE", "PNE ")
    List.Add Array("PINES", "PNES")
    List.Add Array("PLACE", "PL")
    List.Add Array("PLAIN", "PLN")
    List.Add Array("PLAINS", "PLNS")
    List.Add Array("PLAZA", "PLZ")
    List.Add Array("POINT", "PT")
    List.Add Array("POINTS", "PTS")
    List.Add Array("PORT", "PRT")
    List.Add Array("PORTS", "PRTS")
    List.Add Array("PRAIRIE", "PR")
    List.Add Array("RADIAL", "RADL")
    List.Add Array("RAMP", "RAMP")
    List.Add Array("RANCH", "RNCH")
    List.Add Array("RAPID", "RPD")
    List.Add Array("RAPIDS", "RPDS")
    List.Add Array("REST", "RST")
    List.Add Array("RIDGE", "RDG")
    List.Add Array("RIDGES", "RDGS")
    List.Add Array("RIVER", "RIV")
    List.Add Array("ROAD", "RD")
    List.Add Array("ROADS", "RDS")
    List.Add Array("ROUTE", "RTE")
    List.Add Array("ROW", "ROW")
    List.Add Array("RUE", "RUE")
    List.Add Array("RUN", "RUN")
    List.Add Array("SHOAL", "SHL")
    List.Add Array("SHOALS", "SHLS")
    List.Add Array("SHORE", "SHR")
    List.Add Array("SHORES", "SHRS")
    List.Add Array("SKYWAY", "SKWY")
    List.Add Array("SPRING", "SPG")
    List.Add Array("SPRINGS", "SPGS")
    List.Add Array("SPUR", "SPUR")
    List.Add Array("SPURS", "SPUR")
    List.Add Array("SQUARE", "SQ")
    List.Add Array("SQUARES", "SQS")
    List.Add Array("STATION", "STA")
    List.Add Array("STRAVENUE", "STRA")
    List.Add Array("STREAM", "STRM")
    List.Add Array("STREET", "ST")
    List.Add Array("STREETS", "STS")
    List.Add Array("SUMMIT", "SMT")
    List.Add Array("TERRACE", "TER")
    List.Add Array("THROUGHWAY", "TRWY")
    List.Add Array("TRACE", "TRCE")
    List.Add Array("TRACK", "TRAK")
    List.Add Array("TRAFFICWAY", "TRFY")
    List.Add Array("TRAIL", "TRL")
    List.Add Array("TRAILER", "TRLR")
    List.Add Array("TUNNEL", "TUNL")
    List.Add Array("TURNPIKE", "TPKE")
    List.Add Array("UNDERPASS", "UPAS")
    List.Add Array("UNION", "UN")
    List.Add Array("UNIONS", "UNS")
    List.Add Array("VALLEY", "VLY")
    List.Add Array("VALLEYS", "VLYS")
    List.Add Array("VIADUCT", "VIA")
    List.Add Array("VIEW", "VW")
    List.Add Array("VIEWS", "VWS")
    List.Add Array("VILLAGE", "VLG")
    List.Add Array("VILLAGES", "VLGS")
    List.Add Array("VILLE", "VL")
    List.Add Array("VISTA", "VIS")
    List.Add Array("WALK", "WALK")
    List.Add Array("WALKS", "WALK")
    List.Add Array("WALL", "WALL")
    List.Add Array("WAY", "WAY")
    List.Add Array("WAYS", "WAYS")
    List.Add Array("WELL", "WL ")
    List.Add Array("WELLS", "WLS")
Set List_of_street_name_substitutions = List
End Function
Private Function ListofDirections() As Collection
Dim directions As New Collection
directions.Add Array("North", "N")
directions.Add Array("South", "S")
directions.Add Array("East", "E")
directions.Add Array("West", "W")
directions.Add Array("NorthWest", "NW")
directions.Add Array("NorthEast", "NE")
directions.Add Array("SouthWest", "SW")
directions.Add Array("SouthEast", "SE")

Set ListofDirections = directions
End Function


Private Function AddressWordsDictionary() As Collection
Dim Dictionary As New Collection

Dictionary.Add Array("Direction Word", "d", "NORTH", "N")
Dictionary.Add Array("Direction Word", "d", "SOUTH", "S")
Dictionary.Add Array("Direction Word", "d", "EAST", "E")
Dictionary.Add Array("Direction Word", "d", "WEST", "W")
Dictionary.Add Array("Direction Word", "d", "NORTHWEST", "NW")
Dictionary.Add Array("Direction Word", "d", "NORTHEAST", "NE")
Dictionary.Add Array("Direction Word", "d", "SOUTHWEST", "SW")
Dictionary.Add Array("Direction Word", "d", "SOUTHEAST", "SE")

Dictionary.Add Array("Road Word", "r", "ALLEY", "ALY")
Dictionary.Add Array("Road Word", "r", "ANEX", "ANX")
Dictionary.Add Array("Road Word", "r", "ARCADE", "ARC")
Dictionary.Add Array("Road Word", "r", "AVENUE", "AVE")
Dictionary.Add Array("Road Word", "r", "BAYOU", "BYU")
Dictionary.Add Array("Road Word", "r", "BEACH", "BCH")
Dictionary.Add Array("Road Word", "r", "BEND", "BND")
Dictionary.Add Array("Road Word", "r", "BLUFF", "BLF")
Dictionary.Add Array("Road Word", "r", "BLUFFS", "BLFS")
Dictionary.Add Array("Road Word", "r", "BOTTOM", "BTM")
Dictionary.Add Array("Road Word", "r", "BOULEVARD", "BLVD")
Dictionary.Add Array("Road Word", "r", "BRANCH", "BR")
Dictionary.Add Array("Road Word", "r", "BRIDGE", "BRG")
Dictionary.Add Array("Road Word", "r", "BROOK", "BRK")
Dictionary.Add Array("Road Word", "r", "BROOKS", "BRKS")
Dictionary.Add Array("Road Word", "r", "BURG", "BG")
Dictionary.Add Array("Road Word", "r", "BURGS", "BGS")
Dictionary.Add Array("Road Word", "r", "BYPASS", "BYP")
Dictionary.Add Array("Road Word", "r", "CAMP", "CP")
Dictionary.Add Array("Road Word", "r", "CANYON", "CYN")
Dictionary.Add Array("Road Word", "r", "CAPE", "CPE")
Dictionary.Add Array("Road Word", "r", "CAUSEWAY", "CSWY")
Dictionary.Add Array("Road Word", "r", "CENTER", "CTR")
Dictionary.Add Array("Road Word", "r", "CENTERS", "CTRS")
Dictionary.Add Array("Road Word", "r", "CIRCLE", "CIR")
Dictionary.Add Array("Road Word", "r", "CIRCLES", "CIRS")
Dictionary.Add Array("Road Word", "r", "CLIFF", "CLF")
Dictionary.Add Array("Road Word", "r", "CLIFFS", "CLFS")
Dictionary.Add Array("Road Word", "r", "CLUB", "CLB")
Dictionary.Add Array("Road Word", "r", "COMMON", "CMN")
Dictionary.Add Array("Road Word", "r", "COMMONS", "CMNS")
Dictionary.Add Array("Road Word", "r", "CORNER", "COR")
Dictionary.Add Array("Road Word", "r", "CORNERS", "CORS")
Dictionary.Add Array("Road Word", "r", "COURSE", "CRSE")
Dictionary.Add Array("Road Word", "r", "COURT", "CT")
Dictionary.Add Array("Road Word", "r", "COURTS", "CTS")
Dictionary.Add Array("Road Word", "r", "COVE", "CV")
Dictionary.Add Array("Road Word", "r", "COVES", "CVS")
Dictionary.Add Array("Road Word", "r", "CREEK", "CRK")
Dictionary.Add Array("Road Word", "r", "CRESCENT", "CRES")
Dictionary.Add Array("Road Word", "r", "CREST", "CRST")
Dictionary.Add Array("Road Word", "r", "CROSSING", "XING")
Dictionary.Add Array("Road Word", "r", "CROSSROAD", "XRD")
Dictionary.Add Array("Road Word", "r", "CROSSROADS", "XRDS")
Dictionary.Add Array("Road Word", "r", "CURVE", "CURV")
Dictionary.Add Array("Road Word", "r", "DALE", "DL")
Dictionary.Add Array("Road Word", "r", "DAM", "DM")
Dictionary.Add Array("Road Word", "r", "DIVIDE", "DV")
Dictionary.Add Array("Road Word", "r", "DRIVE", "DR")
Dictionary.Add Array("Road Word", "r", "DRIVES", "DRS")
Dictionary.Add Array("Road Word", "r", "ESTATE", "EST")
Dictionary.Add Array("Road Word", "r", "ESTATES", "ESTS")
Dictionary.Add Array("Road Word", "r", "EXPRESSWAY", "EXPY")
Dictionary.Add Array("Road Word", "r", "EXTENSION", "EXT")
Dictionary.Add Array("Road Word", "r", "EXTENSIONS", "EXTS")
Dictionary.Add Array("Road Word", "r", "FALL", "FALL")
Dictionary.Add Array("Road Word", "r", "FALLS", "FLS")
Dictionary.Add Array("Road Word", "r", "FERRY", "FRY")
Dictionary.Add Array("Road Word", "r", "FIELD", "FLD")
Dictionary.Add Array("Road Word", "r", "FIELDS", "FLDS")
Dictionary.Add Array("Road Word", "r", "FLAT", "FLT")
Dictionary.Add Array("Road Word", "r", "FLATS", "FLTS")
Dictionary.Add Array("Road Word", "r", "FORD", "FRD")
Dictionary.Add Array("Road Word", "r", "FORDS", "FRDS")
Dictionary.Add Array("Road Word", "r", "FOREST", "FRST")
Dictionary.Add Array("Road Word", "r", "FORGE", "FRG")
Dictionary.Add Array("Road Word", "r", "FORGES", "FRGS")
Dictionary.Add Array("Road Word", "r", "FORK", "FRK")
Dictionary.Add Array("Road Word", "r", "FORKS", "FRKS")
Dictionary.Add Array("Road Word", "r", "FORT", "FT")
Dictionary.Add Array("Road Word", "r", "FREEWAY", "FWY")
Dictionary.Add Array("Road Word", "r", "GARDEN", "GDN")
Dictionary.Add Array("Road Word", "r", "GARDENS", "GDNS")
Dictionary.Add Array("Road Word", "r", "GATEWAY", "GTWY")
Dictionary.Add Array("Road Word", "r", "GLEN", "GLN")
Dictionary.Add Array("Road Word", "r", "GLENS", "GLNS")
Dictionary.Add Array("Road Word", "r", "GREEN", "GRN")
Dictionary.Add Array("Road Word", "r", "GREENS", "GRNS")
Dictionary.Add Array("Road Word", "r", "GROVE", "GRV")
Dictionary.Add Array("Road Word", "r", "GROVES", "GRVS")
Dictionary.Add Array("Road Word", "r", "HARBOR", "HBR")
Dictionary.Add Array("Road Word", "r", "HARBORS", "HBRS")
Dictionary.Add Array("Road Word", "r", "HAVEN", "HVN")
Dictionary.Add Array("Road Word", "r", "HEIGHTS", "HTS")
Dictionary.Add Array("Road Word", "r", "HIGHWAY", "HWY")
Dictionary.Add Array("Road Word", "r", "HILL", "HL")
Dictionary.Add Array("Road Word", "r", "HILLS", "HLS")
Dictionary.Add Array("Road Word", "r", "HOLLOW", "HOLW")
Dictionary.Add Array("Road Word", "r", "INLET", "INLT")
Dictionary.Add Array("Road Word", "r", "ISLAND", "IS")
Dictionary.Add Array("Road Word", "r", "ISLANDS", "ISS")
Dictionary.Add Array("Road Word", "r", "ISLE", "ISLE")
Dictionary.Add Array("Road Word", "r", "JUNCTION", "JCT")
Dictionary.Add Array("Road Word", "r", "JUNCTIONS", "JCTS")
Dictionary.Add Array("Road Word", "r", "KEY", "KY")
Dictionary.Add Array("Road Word", "r", "KEYS", "KYS")
Dictionary.Add Array("Road Word", "r", "KNOLL", "KNL")
Dictionary.Add Array("Road Word", "r", "KNOLLS", "KNLS")
Dictionary.Add Array("Road Word", "r", "LAKE", "LK")
Dictionary.Add Array("Road Word", "r", "LAKES", "LKS")
Dictionary.Add Array("Road Word", "r", "LAND", "LAND")
Dictionary.Add Array("Road Word", "r", "LANDING", "LNDG")
Dictionary.Add Array("Road Word", "r", "LANE", "LN")
Dictionary.Add Array("Road Word", "r", "LIGHT", "LGT")
Dictionary.Add Array("Road Word", "r", "LIGHTS", "LGTS")
Dictionary.Add Array("Road Word", "r", "LOAF", "LF")
Dictionary.Add Array("Road Word", "r", "LOCK", "LCK")
Dictionary.Add Array("Road Word", "r", "LOCKS", "LCKS")
Dictionary.Add Array("Road Word", "r", "LODGE", "LDG")
Dictionary.Add Array("Road Word", "r", "LOOP", "LOOP")
Dictionary.Add Array("Road Word", "r", "MALL", "MALL")
Dictionary.Add Array("Road Word", "r", "MANOR", "MNR")
Dictionary.Add Array("Road Word", "r", "MANORS", "MNRS")
Dictionary.Add Array("Road Word", "r", "MEADOW", "MDW")
Dictionary.Add Array("Road Word", "r", "MEADOWS", "MDWS")
Dictionary.Add Array("Road Word", "r", "MEWS", "MEWS")
Dictionary.Add Array("Road Word", "r", "MILL", "ML")
Dictionary.Add Array("Road Word", "r", "MILLS", "MLS")
Dictionary.Add Array("Road Word", "r", "MISSION", "MSN")
Dictionary.Add Array("Road Word", "r", "MOTORWAY", "MTWY")
Dictionary.Add Array("Road Word", "r", "MOUNT", "MT")
Dictionary.Add Array("Road Word", "r", "MOUNTAIN", "MTN")
Dictionary.Add Array("Road Word", "r", "MOUNTAINS", "MTNS")
Dictionary.Add Array("Road Word", "r", "NECK", "NCK")
Dictionary.Add Array("Road Word", "r", "ORCHARD", "ORCH")
Dictionary.Add Array("Road Word", "r", "OVAL", "OVAL")
Dictionary.Add Array("Road Word", "r", "OVERPASS", "OPAS")
Dictionary.Add Array("Road Word", "r", "PARK", "PARK")
Dictionary.Add Array("Road Word", "r", "PARKS", "PARK")
Dictionary.Add Array("Road Word", "r", "PARKWAY", "PKWY")
Dictionary.Add Array("Road Word", "r", "PARKWAYS", "PKWY")
Dictionary.Add Array("Road Word", "r", "PASS", "PASS")
Dictionary.Add Array("Road Word", "r", "PASSAGE", "PSGE")
Dictionary.Add Array("Road Word", "r", "PATH", "PATH")
Dictionary.Add Array("Road Word", "r", "PIKE", "PIKE")
Dictionary.Add Array("Road Word", "r", "PINE", "PNE")
Dictionary.Add Array("Road Word", "r", "PINES", "PNES")
Dictionary.Add Array("Road Word", "r", "PLACE", "PL")
Dictionary.Add Array("Road Word", "r", "PLAIN", "PLN")
Dictionary.Add Array("Road Word", "r", "PLAINS", "PLNS")
Dictionary.Add Array("Road Word", "r", "PLAZA", "PLZ")
Dictionary.Add Array("Road Word", "r", "POINT", "PT")
Dictionary.Add Array("Road Word", "r", "POINTS", "PTS")
Dictionary.Add Array("Road Word", "r", "PORT", "PRT")
Dictionary.Add Array("Road Word", "r", "PORTS", "PRTS")
Dictionary.Add Array("Road Word", "r", "PRAIRIE", "PR")
Dictionary.Add Array("Road Word", "r", "RADIAL", "RADL")
Dictionary.Add Array("Road Word", "r", "RAMP", "RAMP")
Dictionary.Add Array("Road Word", "r", "RANCH", "RNCH")
Dictionary.Add Array("Road Word", "r", "RAPID", "RPD")
Dictionary.Add Array("Road Word", "r", "RAPIDS", "RPDS")
Dictionary.Add Array("Road Word", "r", "REST", "RST")
Dictionary.Add Array("Road Word", "r", "RIDGE", "RDG")
Dictionary.Add Array("Road Word", "r", "RIDGES", "RDGS")
Dictionary.Add Array("Road Word", "r", "RIVER", "RIV")
Dictionary.Add Array("Road Word", "r", "ROAD", "RD")
Dictionary.Add Array("Road Word", "r", "ROADS", "RDS")
Dictionary.Add Array("Road Word", "r", "ROUTE", "RTE")
Dictionary.Add Array("Road Word", "r", "ROW", "ROW")
Dictionary.Add Array("Road Word", "r", "RUE", "RUE")
Dictionary.Add Array("Road Word", "r", "RUN", "RUN")
Dictionary.Add Array("Road Word", "r", "SHOAL", "SHL")
Dictionary.Add Array("Road Word", "r", "SHOALS", "SHLS")
Dictionary.Add Array("Road Word", "r", "SHORE", "SHR")
Dictionary.Add Array("Road Word", "r", "SHORES", "SHRS")
Dictionary.Add Array("Road Word", "r", "SKYWAY", "SKWY")
Dictionary.Add Array("Road Word", "r", "SPRING", "SPG")
Dictionary.Add Array("Road Word", "r", "SPRINGS", "SPGS")
Dictionary.Add Array("Road Word", "r", "SPUR", "SPUR")
Dictionary.Add Array("Road Word", "r", "SPURS", "SPUR")
Dictionary.Add Array("Road Word", "r", "SQUARE", "SQ")
Dictionary.Add Array("Road Word", "r", "SQUARES", "SQS")
Dictionary.Add Array("Road Word", "r", "STATION", "STA")
Dictionary.Add Array("Road Word", "r", "STRAVENUE", "STRA")
Dictionary.Add Array("Road Word", "r", "STREAM", "STRM")
Dictionary.Add Array("Road Word", "r", "STREET", "ST")
Dictionary.Add Array("Road Word", "r", "STREETS", "STS")
Dictionary.Add Array("Road Word", "r", "SUMMIT", "SMT")
Dictionary.Add Array("Road Word", "r", "TERRACE", "TER")
Dictionary.Add Array("Road Word", "r", "THROUGHWAY", "TRWY")
Dictionary.Add Array("Road Word", "r", "TRACE", "TRCE")
Dictionary.Add Array("Road Word", "r", "TRACK", "TRAK")
Dictionary.Add Array("Road Word", "r", "TRAFFICWAY", "TRFY")
Dictionary.Add Array("Road Word", "r", "TRAIL", "TRL")
Dictionary.Add Array("Road Word", "r", "TRAILER", "TRLR")
Dictionary.Add Array("Road Word", "r", "TUNNEL", "TUNL")
Dictionary.Add Array("Road Word", "r", "TURNPIKE", "TPKE")
Dictionary.Add Array("Road Word", "r", "UNDERPASS", "UPAS")
Dictionary.Add Array("Road Word", "r", "UNION", "UN")
Dictionary.Add Array("Road Word", "r", "UNIONS", "UNS")
Dictionary.Add Array("Road Word", "r", "VALLEY", "VLY")
Dictionary.Add Array("Road Word", "r", "VALLEYS", "VLYS")
Dictionary.Add Array("Road Word", "r", "VIADUCT", "VIA")
Dictionary.Add Array("Road Word", "r", "VIEW", "VW")
Dictionary.Add Array("Road Word", "r", "VIEWS", "VWS")
Dictionary.Add Array("Road Word", "r", "VILLAGE", "VLG")
Dictionary.Add Array("Road Word", "r", "VILLAGES", "VLGS")
Dictionary.Add Array("Road Word", "r", "VILLE", "VL")
Dictionary.Add Array("Road Word", "r", "VISTA", "VIS")
Dictionary.Add Array("Road Word", "r", "WALK", "WALK")
Dictionary.Add Array("Road Word", "r", "WALKS", "WALK")
Dictionary.Add Array("Road Word", "r", "WALL", "WALL")
Dictionary.Add Array("Road Word", "r", "WAY", "WAY")
Dictionary.Add Array("Road Word", "r", "WAYS", "WAYS")
Dictionary.Add Array("Road Word", "r", "WELL", "WL")
Dictionary.Add Array("Road Word", "r", "WELLS", "WLS")

Dictionary.Add Array("Unit Word", "u", "#", "#")
Dictionary.Add Array("Unit Word", "u", "APARATMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTAMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTEMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTMAN", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTMANT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTMEN", "Apt")
Dictionary.Add Array("Unit Word", "u", "APARTMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APATMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APERTMEN", "Apt")
Dictionary.Add Array("Unit Word", "u", "APERTMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APP", "Apt")
Dictionary.Add Array("Unit Word", "u", "APPARTMEN", "Apt")
Dictionary.Add Array("Unit Word", "u", "APPARTMENT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APPER", "Apt")
Dictionary.Add Array("Unit Word", "u", "APPT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APR", "Apt")
Dictionary.Add Array("Unit Word", "u", "APRT", "Apt")
Dictionary.Add Array("Unit Word", "u", "APT", "Apt")
Dictionary.Add Array("Unit Word", "u", "BASEMENT", "Bsmt")
Dictionary.Add Array("Unit Word", "u", "BL", "Block")
Dictionary.Add Array("Unit Word", "u", "BLDG", "Bldg")
Dictionary.Add Array("Unit Word", "u", "BLOCK", "Block")
Dictionary.Add Array("Unit Word", "u", "BOY?S", "Boy's")
Dictionary.Add Array("Unit Word", "u", "BOYS", "Boy's")
Dictionary.Add Array("Unit Word", "u", "BSMT", "Bsmt")
Dictionary.Add Array("Unit Word", "u", "BUILDING", "Bldg")
Dictionary.Add Array("Unit Word", "u", "BUILING", "Bldg")
Dictionary.Add Array("Unit Word", "u", "BULIDING", "Bldg")
Dictionary.Add Array("Unit Word", "u", "CABIN", "Cabin")
Dictionary.Add Array("Unit Word", "u", "CABIN6", "Cabin")
Dictionary.Add Array("Unit Word", "u", "CABINS", "Cabin")
Dictionary.Add Array("Unit Word", "u", "ONDO", "Unit")
Dictionary.Add Array("Unit Word", "u", "COTTAGE", "Cottage")
Dictionary.Add Array("Unit Word", "u", "DOOR", "Unit")
Dictionary.Add Array("Unit Word", "u", "DORM", "Dorm")
Dictionary.Add Array("Unit Word", "u", "DORMITORY", "Dorm")
Dictionary.Add Array("Unit Word", "u", "DORMS", "Dorm")
Dictionary.Add Array("Unit Word", "u", "FL", "Floor")
Dictionary.Add Array("Unit Word", "u", "FLAT", "Unit")
Dictionary.Add Array("Unit Word", "u", "FLOOR", "Floor")
Dictionary.Add Array("Unit Word", "u", "GIRL", "Girl's")
Dictionary.Add Array("Unit Word", "u", "NO", "Unit")
Dictionary.Add Array("Unit Word", "u", "NUMBER", "Unit")
Dictionary.Add Array("Unit Word", "u", "PO", "PO BOX")
Dictionary.Add Array("Unit Word", "u", "RM", "Rm")
Dictionary.Add Array("Unit Word", "u", "RN:", "Rm")
Dictionary.Add Array("Unit Word", "u", "ROM", "Rm")
Dictionary.Add Array("Unit Word", "u", "ROMM", "Rm")
Dictionary.Add Array("Unit Word", "u", "ROOM", "Rm")
Dictionary.Add Array("Unit Word", "u", "STE", "Ste")
Dictionary.Add Array("Unit Word", "u", "SUITE", "Ste")
Dictionary.Add Array("Unit Word", "u", "UNIT", "Unit")
Dictionary.Add Array("Unit Word", "u", "UPPER", "Upper")
Dictionary.Add Array("Unit Word", "u", "UPPERDORM", "Upper")
Dictionary.Add Array("Unit Word", "u", "UPPR", "Upper")

Dictionary.Add Array("State Name", "s", "Maine", "ME")
Dictionary.Add Array("State Name", "s", "Vermont", "VT")
Dictionary.Add Array("State Name", "s", "New Hampshire", "NH")
Dictionary.Add Array("State Name", "s", "Massachusetts", "MA")
Dictionary.Add Array("State Name", "s", "Rhode Island", "RI")
Dictionary.Add Array("State Name", "s", "Connecticut", "CT")
Dictionary.Add Array("State Name", "s", "New York", "NY")
Dictionary.Add Array("State Name", "s", "New Jersey", "NJ")
Dictionary.Add Array("State Name", "s", "Delaware", "DE")
Dictionary.Add Array("State Name", "s", "Pennsylvania", "PA")
Dictionary.Add Array("State Name", "s", "Maryland", "MD")
Dictionary.Add Array("State Name", "s", "Washington DC", "DC")
Dictionary.Add Array("State Name", "s", "Ohio", "OH")
Dictionary.Add Array("State Name", "s", "West Virginia", "WV")
Dictionary.Add Array("State Name", "s", "Virginia", "VA")
Dictionary.Add Array("State Name", "s", "North Carolina", "NC")
Dictionary.Add Array("State Name", "s", "South Carolina", "SC")
Dictionary.Add Array("State Name", "s", "Georgia", "GA")
Dictionary.Add Array("State Name", "s", "Florida", "FL")
Dictionary.Add Array("State Name", "s", "Montana", "MT")
Dictionary.Add Array("State Name", "s", "Wyoming", "WY")
Dictionary.Add Array("State Name", "s", "North Dakota", "ND")
Dictionary.Add Array("State Name", "s", "South Dakota", "SD")
Dictionary.Add Array("State Name", "s", "Nebraska", "NE")
Dictionary.Add Array("State Name", "s", "Kansas", "KS")
Dictionary.Add Array("State Name", "s", "Oklahoma", "OK")
Dictionary.Add Array("State Name", "s", "Texas", "TX")
Dictionary.Add Array("State Name", "s", "New Mexico", "NM")
Dictionary.Add Array("State Name", "s", "Arizona", "AZ")
Dictionary.Add Array("State Name", "s", "Minnesota", "MN")
Dictionary.Add Array("State Name", "s", "Iowa", "IA")
Dictionary.Add Array("State Name", "s", "Missouri", "MO")
Dictionary.Add Array("State Name", "s", "Arkansas", "AR")
Dictionary.Add Array("State Name", "s", "Louisiana", "LA")
Dictionary.Add Array("State Name", "s", "Michigan", "MI")
Dictionary.Add Array("State Name", "s", "Wisconsin", "WI")
Dictionary.Add Array("State Name", "s", "Illinois", "IL")
Dictionary.Add Array("State Name", "s", "Indiana", "IN")
Dictionary.Add Array("State Name", "s", "Kentucky", "KY")
Dictionary.Add Array("State Name", "s", "Tennessee", "TN")
Dictionary.Add Array("State Name", "s", "Mississippi", "MS")
Dictionary.Add Array("State Name", "s", "Alabama", "AL")
Dictionary.Add Array("State Name", "s", "Washington", "WA")
Dictionary.Add Array("State Name", "s", "Oregon", "OR")
Dictionary.Add Array("State Name", "s", "Idaho", "ID")
Dictionary.Add Array("State Name", "s", "California", "CA")
Dictionary.Add Array("State Name", "s", "Nevada", "NV")
Dictionary.Add Array("State Name", "s", "Utah", "UT")
Dictionary.Add Array("State Name", "s", "Colorado", "CO")
Dictionary.Add Array("State Name", "s", "Alaska", "AK")
Dictionary.Add Array("State Name", "s", "Hawaii", "HI")

Set AddressWordsDictionary = Dictionary
End Function

Sub Test_NewReportType()
Dim resulting_row As Integer
Dim listofreports As Object
resulting_row = 4


resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Rdj", resulting_row, "Fix Engagement Region Info", "reg")

'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095mjc", resulting_row, "Fill in positions missing hours", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Iy7", resulting_row, "Ask for Unit number after check-in Confirmation", "reg")

'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095eV4", resulting_row, "Offer Docusign Via Match", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095eV4", resulting_row, "Offer Docusign Via Match", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095X67", resulting_row, "Issue HC Roster", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095jga", resulting_row, "Sevis Error S2129", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095fBe", resulting_row, "Sevis Error Too Many Boxes", "reg")


'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092UoJ", resulting_row, "Duplicate Housing Validations Part 1", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091Cxv", resulting_row, "Ownership", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091CvG", resulting_row, "Ownership", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091EI6", resulting_row, "Ownership", "reg")


'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095kai", resulting_row, "PAHR/Xplorer/Xanterra Fix", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095h8m", resulting_row, "Overdue MC in Wait External Assign to Andrew", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095h7j", resulting_row, "Position_Infos Missing Work Travel in Intrax Programs", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095eV4", resulting_row, "Offer Docusign Via Match", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098P9E", resulting_row, "Populate missing Confirmed Dates on Check Ins", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095cXX", resulting_row, "Fix Premium Matchs at IP HC", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098bSS", resulting_row, "Generate Overdue Monthly Contact Cases 00|", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000098U07", resulting_row, "Add Match to Case", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O130000091Ei9", resulting_row, "Contact4Case", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Wir", resulting_row, "Proccess CheckIns - Confirmed", "reg")
'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095X67", resulting_row, "Issue HC Roster", "reg")

If False Then
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Wir", resulting_row, "Proccess CheckIns - Confirmed", "reg")
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095UMq", resulting_row, "Fix SEVIS - 01 - Housing Site", "reg")
    
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SBy", resulting_row, "Email PAX about uncooperative Landlord", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095SSX", resulting_row, "New PAHR", "reg")
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095RDC", resulting_row, "Recalculate All PAX on an Assessment", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Rdj", resulting_row, "Fix Engagment Region Info", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Rau", resulting_row, "Re-assign PAHR cases to Fieldstaff 05|", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095Pwo", resulting_row, "PAHR - Program Cancelation - Handoff cases to fieldstaff", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099V8O", resulting_row, "Critical Housing Plans - 03 2nd Warning Email", "reg")
    
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095PVT", resulting_row, "New PAHR", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095PVT", resulting_row, "PAHR - Reject Plan for Rejected Housing Validations", "reg")
    
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099Vdb", resulting_row, "New PAHR - HousingPlan Initiated", "reg")
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095SSX", resulting_row, "New PAHR", "reg")
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099Qb6", resulting_row, "Cancellation Risk due to lack of Housing Plan", "reg")
    'https://na68.salesforce.com/00O1B0000099SOY
    'https://na68.salesforce.com/00O1B0000099SbX
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099SOY", resulting_row, "Critical Housing Plans - 00 Case Creation and 1st email", "reg")
    'Housing_Overcrowding_and_Info - Priority Score Housing Validations
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099RrF", resulting_row, "Screen IsCurrent housing", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092ZdL", resulting_row, "Priority Score Housing Validations", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092YvT", resulting_row, "Request Housing for Confirmed not yet filled out Housing Plans", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092YNv", resulting_row, "Applied Matches with Completed Docusigns", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092HZL", resulting_row, "Duplicate Housing Validations Part 11 - Fix Not Initiated Housing Plans", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092TF8", resulting_row, "Send Housing Plan Link", "reg")
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092TU3", resulting_row, "PAX Record Integrity Check", "reg")
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092TF8", resulting_row, "Send Housing Plan Link2", "reg")
    
    'resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000099Vdb", resulting_row, "Housing Notification Fixed", "reg")
    '
    resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000092Wir", resulting_row, "Proccess CheckIns - Confirmed", "reg")
    
    'Proccess_CheckIn(AssessmentID As String)
    'MsgBox "Operation Compmlete", , "Status"
End If
End Sub

Sub Cycle_SEVIS_Corrections()
Dim resulting_row As Integer

resulting_row = 4

resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095jga", resulting_row, "Sevis Error S2129", "reg")
resulting_row = Collect_Data("https://na68.salesforce.com/00O1B0000095fBe", resulting_row, "Sevis Error Too Many Boxes", "reg")


End Sub
Private Function Get_Site_Details(IE As Object, SiteID As String) As Variant
Dim URL As String
Dim FieldList As Variant
Dim FieldInfo As Object
URL = "https://na68.salesforce.com/" & SiteID & "/e?retURL=" & SiteID
'MsgBox URL, , "Debugging"
Set IE = navigate2page_wait2load(IE, URL)
        
            'Street, street2, city, state, postal code, address comments, landlord name
            FieldList = Array("00N30000009ot82", "00Na000000B2eGP", "00N30000009ot7d", "00N30000009ot7x", "00N30000009ot7s", "00N1300000BLnh3", "CF00N1300000BLnhG")
       
            For i = 0 To UBound(FieldList)
                Set FieldInfo = Fetch_Fields(IE, (FieldList(i)))
                    'MsgBox FieldInfo.ID & FieldInfo.innerhtml & FieldInfo.Value, , "testing"
                If FieldInfo.Tagname = "TEXTAREA" Then
                    FieldList(i) = FieldInfo.innerhtml
                Else
                    FieldList(i) = FieldInfo.Value
                End If
            Next i
Get_Site_Details = FieldList
End Function
Private Function ReadPositionInfo(IE As Object) As Variant
Dim ListOfields As Variant
Dim FieldInfo As Object
Dim NumberofBlanks As Double
Dim Length As Double
NumberofBlanks = 0
    ListOfields = Array(Array("Company Name", "00Na0000009s155", "Value"), _
                        Array("Street", "00Na0000009s159", "Value"), _
                        Array("City", "00Na0000009s152", "Value"), _
                        Array("State", "00Na0000009s158", "Value"), _
                        Array("Postal", "00Na0000009s157", "Value"), _
                        Array("Sup First Name", "00Na0000009s15H", "Value"), _
                        Array("Sup Last Name", "00Na0000009s15I", "Value"), _
                        Array("Sup Phone", "00Na0000009s15J", "Value"), _
                        Array("Sup Email", "00Na0000009s15G", "Value"), _
                        Array("Company Phone", "00Na0000009s156", "Value"), _
                        Array("Website", "00Na0000009s15B", "Value"), _
                        Array("EIN", "00N1300000BRdfg", "Value"), _
                        Array("Position Title", "00Na0000009s15F", "Value"), _
                        Array("Payrate", "00N1300000BQpYv", "Value"), _
                        Array("PositionInfo Application", "CF00Na0000009s13r_lkid", "Value"), _
                        Array("PositionInfo Engagement", "CF00N1300000BQnuw_lkid", "Value"), _
                        Array("PositionInfo Record ID", "ID", "Value"), _
                        Array("Season", "ID", "Value"), _
                        Array("Year", "ID", "Value"), _
                        Array("Clean Address", "None", ""), _
                        Array("Number of blanks", "None", ""), _
                        Array("Employment Start", "00N1300000BQpYw", ""), _
                        Array("Employment End", "00N1300000BQpYq", ""), _
                        Array("Engagement Start", "", ""), _
                        Array("Engagement End", "", ""))
                        
                    
    For i = 0 To 15
        Set FieldInfo = Fetch_Fields(IE, (ListOfields(i)(1)))
        Debug.Print "Result from PosInfo field collection(" & i & "): " & FieldInfo.Value
            ListOfields(i)(2) = FieldInfo.Value
            If FieldInfo.Value = "" Then
                NumberofBlanks = NumberofBlanks + 1
            End If
    Next i
    
    For i = 21 To 22
        Set FieldInfo = Fetch_Fields(IE, (ListOfields(i)(1)))
        Debug.Print "Result from PosInfo field collection(" & i & "): " & FieldInfo.Value
            ListOfields(i)(2) = FieldInfo.Value
    Next i
 
    
        'make sure manager name isn't in the wrong format
    If UCase(ListOfields(5)(2)) = UCase(ListOfields(6)(2)) Then
        Length = InStr(1, ListOfields(5)(2), " ", vbTextCompare)
            If Length > 0 Then
                ListOfields(5)(2) = left(ListOfields(5)(2), Length - 1)
                ListOfields(6)(2) = Right(ListOfields(5)(2), Length - Len(ListOfields(5)(2)))
            End If
    End If
 
    ListOfields(19)(2) = NumberofBlanks
ReadPositionInfo = ListOfields
End Function
Private Function GenerateJobTaggingReport(PositionInfoID As String) As String
Dim IEofPosInfo As Object
Dim IEResearcher As Object
Dim JobInfo As Variant
Dim MasterSearchReturnList As Collection
Dim URL As String
Dim SearchTerms As Collection
Dim Results As Collection
Dim Candidates As Collection
Dim SearchType As String
Dim Length As Double
Dim RatingMultiplyer As Double
Dim ResultID As String
Dim HighestSearchRank As Double
Dim HighestRankedResult As String
Dim Fields As Variant
Dim FieldInfo As Object
Dim HCOpp As String
Dim OppInfo(7) As String
Dim OppMatched As Boolean
Dim ReportInfo As Collection
Dim RelatedPositions As Collection
Dim PositionDetails(12) As String
Dim HCname As String
Dim Report4Publishing As String
Dim IsResultRelevant As Boolean
Dim MatchPoints As String
Dim HCaccount As Variant
Dim ProccessingTime As Date
Dim BestOppStage As Double
Dim Results2Publish As Collection
Dim MatchFound As Boolean
Dim GeographicalRestrictions As Variant
Dim NewPositionInfoName As String

ProccessingTime = Now
Set IEResearcher = CreateObject("InternetExplorer.Application")
Set IEofPosInfo = CreateObject("InternetExplorer.Application")
IEofPosInfo.Visible = False
Call CheckifLoggedin
' pull fields from position info ReadPositionInfo
URL = "https://na68.salesforce.com/" & PositionInfoID & "/e?retURL=" & PositionInfoID
Call opNAV(IEofPosInfo, "nav", URL)
JobInfo = ReadPositionInfo(IEofPosInfo)
If JobInfo(19)(2) > 10 Then
'position info is blank
GoTo CouldNotComplete
End If
Debug.Print (JobInfo(15)(0)) & (JobInfo(15)(1)) & (JobInfo(15)(2))
JobInfo(16)(2) = (PositionInfoID)
' format fields
JobInfo(0)(2) = FixAmp(JobInfo(0)(2))

Set SearchTerms = New Collection
JobInfo(7)(2) = CleanPhone((JobInfo(7)(2)))
    SearchTerms.Add Array(JobInfo(7)(2)(0), "Manager Phone", "001")
    SearchTerms.Add Array(JobInfo(7)(2)(0), "Manager Phone", "003")
JobInfo(9)(2) = CleanPhone((JobInfo(9)(2)))
    SearchTerms.Add Array(JobInfo(9)(2)(0), "company Phone", "001")
    SearchTerms.Add Array(JobInfo(9)(2)(0), "company Phone", "003")
JobInfo(19)(2) = AddressParse((JobInfo(1)(2)), "", (JobInfo(2)(2)), (JobInfo(3)(2)), (JobInfo(4)(2)))
'address search is house number, street name, direction city and state
    SearchTerms.Add Array(JobInfo(8)(2), "email", "003")
  
    
    SearchTerms.Add Array((JobInfo(19)(2)(0)) & " " & (JobInfo(19)(2)(2)) & " " & left((JobInfo(19)(2)(3)), 2) & "* " & (JobInfo(19)(2)(4)) & " " & (JobInfo(19)(2)(7)) & " " & (JobInfo(19)(2)(8)) & " " & (JobInfo(19)(2)(9)), "addr complex", "001")
    SearchTerms.Add Array(Replace((JobInfo(19)(2)(0)) & " " & (JobInfo(19)(2)(2)) & " " & (JobInfo(19)(2)(4)) & " " & (JobInfo(19)(2)(7)) & " " & (JobInfo(19)(2)(8)), "US Route", "", 1, , vbTextCompare), "addr simple", "001")
    
 
    If Len((JobInfo(11)(2))) > 8 Then
        SearchTerms.Add Array((JobInfo(11)(2)), "EIN", "001")
    End If
 
'search the hc name, just to see what comes up MakeNameSearchable
    SearchTerms.Add Array(MakeNameSearchable((JobInfo(0)(2))) & " " & (JobInfo(19)(2)(7)), "company name", "001")
 
    SearchTerms.Add Array(JobInfo(5)(2) & " " & JobInfo(6)(2), "Manager's Name", "003")
 
' conduct searches on submitted job info
    Set MasterSearchReturnList = New Collection
  
    
    For i = 1 To SearchTerms.count
        If (SearchTerms(i)(0)) <> "" Then
            Set Results = SFDC_Search_Table((SearchTerms(i)(0)), (SearchTerms(i)(2)))
            
            Debug.Print "Search type name is " & SearchTerms(i)(1)
            
            If UBound(Results(2)(1)) < 1 Then
                    SearchType = "None"
                    Debug.Print SearchTerms(i)(1) & " and counter is  " & " | Number of searchable items " & SearchTerms.count
                        If SearchTerms(i)(1) = "addr complex1" Then
                           SearchTerms.Add Array(Replace((JobInfo(19)(2)(0)) & " " & (JobInfo(19)(2)(2)) & " " & (JobInfo(19)(2)(4)) & " " & (JobInfo(19)(2)(7)) & " " & (JobInfo(19)(2)(8)), "US Route", "", 1, , vbTextCompare), "addr simple", "001"), , , SearchTerms.count
                           SearchTerms.Remove (i)
                           i = i - 1
                        End If
                        If SearchTerms(i)(1) = "addr complex" Then
                        'If SearchTerms(i)(1) = "addr simple1" Then
                            SearchTerms.Add Array((JobInfo(19)(2)(0)) & " " & (JobInfo(19)(2)(7)) & " " & (JobInfo(19)(2)(8)), "addr basic", "001"), , , SearchTerms.count
                            SearchTerms.Remove (i)
                           i = i - 1
                        End If
            Else
                If Results.count > 1 Then
                    For j = 2 To Results.count
                        IsResultRelevant = True
                      
                        'Debug.Print "Result stuff= " & Results(j).Count
                        If Results(j).count > 3 Then
                        ' analyze search results
                                SearchType = (SearchTerms(i)(2))
                          
                            If SearchType = "003" Then
                                If UBound(Results(j)(4)) > 0 Then
                                    ResultID = (Results(j)(4)(1))
                                Else
                                    Debug.Print "ID was not returned for contacts's HC"
                                End If
                                HCname = (Results(j)(4)(0))
                                    If (Results(j)(3)(0)) = "Inactive" Then
                                        IsResultRelevant = False
                                    End If
                            End If
                            If SearchType = "001" Then
                                ResultID = (Results(j)(2)(1))
                                HCname = (Results(j)(2)(0))
                                    If (Results(j)(4)(0)) <> "Host Company" Then
                                        Debug.Print (Results(j)(4)(0)) & " was not host company"
                                        IsResultRelevant = False
                                    End If
                            End If
                         
                                If ResultID = "00130000015zoAS" Or ResultID = "0011300001jIqoK" Then
                                    ' This returns false positives as the SYSTEM ACCOUNT DO NOT DELETE! Master account for all authenticated site user
                                    ' THe 2nd one is the IWT Housing Leads account
                                    IsResultRelevant = False
                                End If
                              
                                'this section will award a bonus to address matches; and if a complex match isn't found, request a simple, and if simple doesn't work, use a basic
                                If SearchTerms(i)(1) = "addr complex" Then
                                    Debug.Print "Is Milemarker flag = " & (JobInfo(19)(2)(12))
                                    If JobInfo(19)(2)(12) Then
                                        Debug.Print "Address match penalized"
                                        RatingMultiplyer = 1
                                    Else
                                        Debug.Print "Address match full points awarded"
                                        RatingMultiplyer = 4
                                    End If
                                Else
                                    RatingMultiplyer = 1
                                        If SearchTerms(i)(1) = "addr simple" Then
                                            If JobInfo(19)(2)(12) Then
                                            RatingMultiplyer = 1
                                            Else
                                            RatingMultiplyer = 2.25
                                            End If
                                        End If
                                End If
                            Debug.Print "Golden Answer: " & ResultID
                            'add results to master list and update multiplyer
                         
                            If IsResultRelevant Then
                            Set MasterSearchReturnList = CheckEmployerList(MasterSearchReturnList, ResultID, RatingMultiplyer, (SearchTerms(i)(1)), HCname)
                            Else
                                Debug.Print "Result is not relevant: " & HCname & (Results(j)(2)(0)) & (Results(j)(3)(0))
                            End If
                        End If
                    Next j
                End If
            End If
        End If
    Next i
    'list off search results
    For Each Entry In MasterSearchReturnList
        Debug.Print Entry(0) & " ranked at " & Entry(1) & Entry(2)
    Next Entry
    'add to results and recalculate percentage rating
    ' Pick HC
    'find result with highest rating
    HighestSearchRank = 0
    If MasterSearchReturnList.count < 1 Then
        Debug.Print "Search did not generate any HCs"
        MatchFound = False
    Else
        MatchFound = True
    End If
 
If MatchFound Then
    For i = 1 To MasterSearchReturnList.count
        If MasterSearchReturnList(i)(1) > HighestSearchRank Then
            HighestRankedResult = MasterSearchReturnList(i)(0)
            Debug.Print MasterSearchReturnList(i)(1) & " vs " & HighestSearchRank
            HighestSearchRank = MasterSearchReturnList(i)(1)
            MatchPoints = MasterSearchReturnList(i)(2)
            HCname = FixAmp(MasterSearchReturnList(i)(3))
        End If
    Next i
 
        'Start Building Report
           Set ReportInfo = New Collection
           ReportInfo.Add Array("HC Name", HCname)
           ReportInfo.Add Array("HC ID", HighestRankedResult)
           ReportInfo.Add Array("Match Points", MatchPoints)
           ReportInfo.Add Array("Winning Rank", HighestSearchRank)
           ReportInfo.Add Array("Original Name", (JobInfo(0)(2)))
 
' get the season/year from PAX
        If (JobInfo(15)(2)) <> "000000000000000" Then
            'use engagement ID if available and assume this trumps the application
            URL = (JobInfo(15)(2))
        Else
            'use application ID assume it's valide
            If (JobInfo(14)(2)) <> "000000000000000" Then
                URL = (JobInfo(14)(2))
                Call ApplicationChecker(URL, CDate(JobInfo(21)(2)), CDate(JobInfo(22)(2)))
            Else
                MsgBox "the position info does not appear to be attached to anything", , "Error!"
            End If
        End If
    
        'set which field ids depeneding or record type
        If left(URL, 3) = "a0d" Then
            Fields = Array("00Na000000B2tGW_ileinner", "00Na000000B2KhB_ileinner")
        End If
        If left(URL, 3) = "a0U" Then
            Fields = Array("00Na000000B2tGV_ileinner", "00Na0000009qDo5_ileinner", "00Na0000009qBVG_ileinner", "00Na000000Algwg_ileinner")
        End If
    
        
        
        IEResearcher.Visible = False
        Call opNAV(IEResearcher, "nav", "https://na68.salesforce.com/" & URL)
     
            Set FieldInfo = Fetch_Fields(IEResearcher, (Fields(0)))
                JobInfo(17)(2) = FieldInfo.innerhtml
            Set FieldInfo = Fetch_Fields(IEResearcher, (Fields(1)))
                JobInfo(18)(2) = FieldInfo.innerhtml
                'engagement dates
                        
                
            
   
'get list of available opportunities
    Set Results = Pull_Master_Child(HighestRankedResult, "RelatedOpportunityList", "006")
 
    Set MasterSearchReturnList = New Collection
    If Results(1)(1)(0) <> "No Results" Then
        For i = 2 To Results.count
            If Results(i).count > 2 Then
                If Results(i)(3)(0) = "Work Travel" Then
                    MasterSearchReturnList.Add Results(i)
                End If
            End If
        Next i
    'pick an OPP that matches the PAX's season/Year
        Set Candidates = New Collection
        For i = 1 To MasterSearchReturnList.count
            HCOpp = MasterSearchReturnList(i)(2)(1)
            URL = "https://na68.salesforce.com/" & HCOpp
        
            ' Get picked HC Opp Info
            'season, program year, stage, validator, next step, service level
            Fields = Array("00N30000008QXjl_ileinner", "00N300000068ZDp_ileinner", "opp11_ileinner", "CF00Na000000B33k3_ileinner", "opp10_ileinner", "00N30000007CyH2_ileinner")
            OppMatched = False
        
            Set IEResearcher = navigate2page_wait2load(IEResearcher, URL)
            For j = 0 To UBound(Fields)
                Set FieldInfo = Fetch_Fields(IEResearcher, (Fields(j)))
                Debug.Print "Opp Value= " & FieldInfo.innerhtml
                OppInfo(j) = TAGorAnchor(FieldInfo)(0)
            Next j
            
               Debug.Print "Season/Year Comparison: " & JobInfo(17)(2) & JobInfo(18)(2) & " vs " & OppInfo(0) & OppInfo(1)
            If JobInfo(17)(2) & JobInfo(18)(2) = OppInfo(0) & OppInfo(1) Then
                'Add opportunity to a candidates list as there may be a canceled premium and a valid IP
                Set Results = New Collection
                OppMatched = True
                Results.Add Array("Opp Stage", OppInfo(2))
                Results.Add Array("Validator", OppInfo(3))
                Results.Add Array("Next Step", OppInfo(4))
                Results.Add Array("Opp Service Lvl", OppInfo(5))
                Results.Add Array("Opp ID", HCOpp)
                Candidates.Add Results
                i = MasterSearchReturnList.count
            End If
        Next i
    End If
 
        
        If Candidates.count > 0 Then
            BestOppStage = 0
            For i = 1 To Candidates.count
                Length = IWT_Stage_Rank((Candidates(i)(1)(1)))
                If BestOppStage < Length Then
                    BestOppStage = Length
                End If
            Next i
         
            For i = 1 To Candidates.count
                If IWT_Stage_Rank((Candidates(i)(1)(1))) = BestOppStage Then
                    ReportInfo.Add Array("Opp Stage", (Candidates(i)(1)(1)))
                    ReportInfo.Add Array("Validator", (Candidates(i)(2)(1)))
                    ReportInfo.Add Array("Next Step", (Candidates(i)(3)(0)))
                    ReportInfo.Add Array("Opp Service Lvl", (Candidates(i)(4)(1)))
                    ReportInfo.Add Array("Opp ID", (Candidates(i)(5)(1)))
                End If
            Next i
        End If
 
    
   
   Set RelatedPositions = New Collection
   'pull list of positions
    If OppMatched Then
        Set MasterSearchReturnList = New Collection
        Set Results = Pull_Master_Child(HCOpp, "CF00N30000008RES7", "a0Q")
            If (Results(2)(1)(0)) = "No matches found" Or (Results(2)(1)(0)) = "No records to display." Then
                Debug.Print "List returned no results"
            Else
                For i = 2 To Results.count
                    If Results(i)(9)(0) = "Independent" Then
                        MasterSearchReturnList.Add Array(Results(i)(2)(1), Results(i)(2)(0), Results(i)(8)(0))
                    End If
                Next i
            End If
     
            If MasterSearchReturnList.count > 0 Then
                For i = 1 To MasterSearchReturnList.count
                    URL = "https://na68.salesforce.com/" & MasterSearchReturnList(i)(0)
                 
                     'PC COde, Title, Street, city, state, zip, HC Name
                     Fields = Array("00Na000000B2LkX_ileinner", "00Na000000B2Ecn_ileinner", "00N30000008RCsl_ileinner", "00N30000008RCsq_ileinner", "00N30000008RCsv_ileinner", "00N30000008RCt0_ileinner", "CF00N30000008RES2_ileinner")
                 
                     Set IEResearcher = navigate2page_wait2load(IEResearcher, URL)
                     For j = 0 To UBound(Fields)
                        Set SearchTerms = New Collection
                         Set FieldInfo = Fetch_Fields(IEResearcher, (Fields(j)))
                         Debug.Print "Position Value= " & FieldInfo.innerhtml
                         PositionDetails(j + 3) = TAGorAnchor(FieldInfo)(0)
                     Next j
                     PositionDetails(0) = MasterSearchReturnList(i)(0)
                     PositionDetails(1) = MasterSearchReturnList(i)(1)
                     PositionDetails(2) = MasterSearchReturnList(i)(2)
                     RelatedPositions.Add PositionDetails
                Next i
                ReportInfo.Add Array("Positions", RelatedPositions)
            Else
                Debug.Print "Position List was blank"
            End If
    End If
 
    'pull account information
            HCaccount = Array("00N300000068N8x_ileinner", "acc3_ileinner", "acc17_ileinner")
            URL = "https://na68.salesforce.com/" & HighestRankedResult
            Set IEResearcher = navigate2page_wait2load(IEResearcher, URL)
            For j = 0 To UBound(HCaccount)
                Set FieldInfo = Fetch_Fields(IEResearcher, (HCaccount(j)))
                Debug.Print "HC Page Value(" & j & ")= " & FieldInfo.innerhtml
                HCaccount(j) = FieldInfo.innerhtml
            Next j
                HCaccount(2) = Replace(left(HCaccount(2), 250), "<br>", " ", 1, 1, vbTextCompare)
                Debug.Print HCaccount(2)
                Length = InStr(1, HCaccount(2), "<td>", vbTextCompare)
                Debug.Print "length is " & Length
                If Length > 5 Then
                    HCaccount(2) = Mid(HCaccount(2), Length + 4, InStr(1, HCaccount(2), "</td>", vbTextCompare) - Length - 1)
                    HCaccount(2) = StrReverse(HCaccount(2))
                    Length = InStr(1, HCaccount(2), ">rb<", vbTextCompare)
                    HCaccount(2) = StrReverse(Mid(HCaccount(2), Length + 4, Len(HCaccount(2)) - Length - 1))
                Else
                    HCaccount(2) = "Error: no address on account page"
                End If
                ReportInfo.Add Array("HC Address", HCaccount(2))
             
                If HCaccount(0) = "Terminated" Then
                    ReportInfo.Add Array("Status", "TERMINATED" & Chr(10))
                Else
                    ReportInfo.Add Array("Status", "")
                End If
         
'this end if is for no matches found
End If
   'Report4Publishing = JobTaggingReport(ReportInfo)
 
 
    GeographicalRestrictions = LoadGeographical_Restrictions()
    Dim GeoRestrict As String
    For i = 0 To UBound(GeographicalRestrictions(0))
        If GeographicalRestrictions(0)(i)(0) = JobInfo(3)(2) Then
            GeoRestrict = GeographicalRestrictions(0)(i)(1)
        End If
    Next i
    For i = 0 To UBound(GeographicalRestrictions(1))
        If GeographicalRestrictions(1)(i)(0) = JobInfo(2)(2) & ", " & JobInfo(3)(2) Then
            GeoRestrict = GeographicalRestrictions(1)(i)(1)
        End If
    Next i
    
    
    
    If MatchFound Then
        ReportInfo.Add Array("GeoRestrict", "Geo Notes: " & GeoRestrict)
        Set Results2Publish = JobTaggingReport(ReportInfo)
        If (JobInfo(15)(2)) <> "000000000000000" Then
        NewPositionInfoName = JobTagging_Compare2ExistingJobs((JobInfo(15)(2)), ReportInfo)
        End If
        
        If NewPositionInfoName = "" Then
            NewPositionInfoName = "New Job Submission"
        End If
    Else
        Set Results2Publish = New Collection
        Results2Publish.Add Array("00N1300000BRdfm", Replace("https://www.google.com/search?q=" & (JobInfo(19)(2)(0)) & " " & (JobInfo(19)(2)(2)) & " " & (JobInfo(19)(2)(3)) & " " & (JobInfo(19)(2)(4)) & " " & (JobInfo(19)(2)(7)) & " " & (JobInfo(19)(2)(8)) & " " & (JobInfo(19)(2)(9)), " ", "+") & Chr(10) & "GeoRestrictions: " & GeoRestrict)
    End If
    
    'this clears the PC code so we don't have an old pc code overwriting new information.
    Results2Publish.Add Array("00N1300000BLXVv", "")
    Results2Publish.Add Array("00Na0000009s153", "United States")
    Results2Publish.Add Array("Name", left(NewPositionInfoName, 80))
    
    For Each UpDate In Results2Publish
        'Debug.Print "PI update: " & Update(0) & "=" & Update(1)
        Set FieldInfo = IEofPosInfo.document.getelementbyid(UpDate(0))
            If UpDate(0) = "00N1300000BRdfm" Then
                UpDate(1) = UpDate(1) & " |" & Format(Now() - ProccessingTime, "nn:ss")
            End If
            If UpDate(0) = "00N1300000BQyft" Then
                UpDate(1) = left(UpDate(1) & "|" & FieldInfo.Value, 254)
            End If
        FieldInfo.Value = UpDate(1)
    Next UpDate
   'Set FieldInfo = IEofPosInfo.document.getelementbyid("00N1300000BRdfm")
   'FieldInfo.innerhtml = Report4Publishing & " |" & Format(Now() - ProccessingTime, "nn:ss")
    MatchFound = HitSave(IEofPosInfo)
   Set FieldInfo = IEofPosInfo.document.getelementsbyclassname("btn")
   FieldInfo.Item(0).Click
 
CouldNotComplete:
    IEofPosInfo.Quit
    IEResearcher.Quit
End Function
Private Function JobTagging_Compare2ExistingJobs(EngagementID As String, TagResults As Collection) As String
Dim tValue As Variant
Dim Engagement As Variant
Dim FieldList As New Collection
Dim HCname As String
Dim NewInfoName As String

For i = 1 To TagResults.count
    If TagResults(i)(0) = "HC Name" Then
        HCname = TagResults(i)(1)
    End If
Next i

    FieldList.Add Array("Placement Status", "00Na000000B2Fr2_ileinner")
    FieldList.Add Array("Matches", "_00Na0000009s14h")
    
Engagement = Retrieve_Page_Info(EngagementID, FieldList)

tValue = PageInfoF(Engagement, "Matches")

If IsArray(tValue) Then
For i = 0 To UBound(tValue)
    If CleanHTMLEmail((PageInfoF(tValue(i), "Host Account")(0))) = HCname Then
        NewInfoName = NewInfoName & "T: " & CleanHTMLEmail((PageInfoF(tValue(i), "Host Account")(0) & " | " & PageInfoF(tValue(i), "Offer Status")(0) & PageInfoF(tValue(i), "Stage")(0)))
    End If
Next i
End If

JobTagging_Compare2ExistingJobs = NewInfoName
End Function
Private Function CleanPhone(Number As String) As Variant
Dim PhoneNum As String
Dim Gauntlet As Collection
Dim eXtention As String
Dim Length As Double
 
PhoneNum = Number
Set Gauntlet = New Collection
    Gauntlet.Add Array("-", "")
    Gauntlet.Add Array(" ", "")
    Gauntlet.Add Array(".", "")
    Gauntlet.Add Array("(", "")
    Gauntlet.Add Array(")", "")
    Gauntlet.Add Array("+", "")
    Gauntlet.Add Array("/", "")
    Gauntlet.Add Array("ext", "x")
 
    For i = 1 To Gauntlet.count
        PhoneNum = Replace(PhoneNum, Gauntlet(i)(0), Gauntlet(i)(1), 1, , vbTextCompare)
   Next i
 
    If left(PhoneNum, 1) = "1" Then
        PhoneNum = Right(PhoneNum, Len(PhoneNum) - 1)
    End If
 
    Length = InStr(1, PhoneNum, "x", vbTextCompare)
    If Length > 0 Then
        eXtention = Right(PhoneNum, Len(PhoneNum) - Length)
        PhoneNum = left(PhoneNum, 10)
    End If
 
    If IsNumeric(left(PhoneNum, 3)) Then
        CleanPhone = Array(PhoneNum, eXtention, Number)
    Else
        CleanPhone = Array("", eXtention, Number)
    End If
Debug.Print "Final phone Number= " & PhoneNum & " |x " & eXtention
 
    End Function
Sub TestJobTagging()
Dim PositionInfo2TestID As String
Dim Result As String
PositionInfo2TestID = "a1h1B000002jB5g"
Result = GenerateJobTaggingReport(PositionInfo2TestID)
End Sub
Private Function MakeNameSearchable(HCname As String) As String
Dim NewName As String
Dim Space As Double
    NewName = HCname
    NewName = Replace(NewName, "the ", "", 1, , vbTextCompare)
    NewName = Replace(NewName, "`", "'", 1, , vbTextCompare)
    NewName = Replace(NewName, "'s", "*", 1, , vbTextCompare)
    NewName = Replace(NewName, "'", "", 1, , vbTextCompare)
    NewName = Replace(NewName, ".", " ", 1, , vbTextCompare)
    NewName = Replace(NewName, "-", " ", 1, , vbTextCompare)
 
    Space = 1
    For i = 1 To 10
        If Space > 0 Then
            Space = InStr(Space, NewName, " ", vbTextCompare)
            If Space > 0 Then
                If Mid(NewName, Space - 1, 1) = "s" Then
                    NewName = Replace(NewName, "s", "*", Space - 1, 1, vbTextCompare)
                End If
            End If
        End If
    Next i
Debug.Print "HC Name was converted from " & HCname & " |to| " & NewName
MakeNameSearchable = NewName
End Function
Private Function CheckEmployerList(List As Collection, NewID As String, Multiplier As Double, MatchPoint As String, HostCompanyName As String)
Dim OnList As Boolean
 
    'check to see if HC ID is already on the list and if it is, then add multiplyer to new entry and remove the old one.
 
    OnList = False
    For i = 1 To List.count
        If List(i)(0) = NewID Then
            OnList = True
            List.Add Array(List(i)(0), List(i)(1) + Multiplier, List(i)(2) & "|" & MatchPoint, HostCompanyName)
            List.Remove i
            i = List.count
        End If
    Next i
 
    If OnList = False Then
        List.Add Array(NewID, Multiplier, MatchPoint, HostCompanyName)
    End If
 
Set CheckEmployerList = List
End Function
Private Function JobTaggingReport(Info As Collection) As Collection
Dim Template As String
Dim Report As String
Dim PositionEntry As String
Dim Updates2Return As Collection
Dim QualityMatch As Double
Dim OldName As String
Dim NewName As String
 
Set Updates2Return = New Collection
Template = "{Status}{HC Name} ({Opp Service Lvl})" & Chr(10) _
        & "{Opp Stage} -> {Next Step} ({Validator})" & Chr(10) _
        & "{HC Address}" & Chr(10) _
        & "{GeoRestrict}" & Chr(10) _
        & Chr(10) _
        & "https://na68.salesforce.com/acc/account_hierarchy.jsp?id={HC ID}" & Chr(10) _
        & "{Positions}" & Chr(10) _
        & Chr(10) & "[{Winning Rank}] " & "{Match Points}"
Report = Template
    For i = 1 To Info.count
        Debug.Print "report entry being printd: " & Info(i)(0)
        'If info(i).Count > 0 Then
         
                If Info(i)(0) = "Positions" Then
                    If Info(i)(1).count > 0 Then
                        For j = 1 To Info(i)(1).count
                            PositionEntry = PositionEntry & Chr(10) & "-= " & Info(i)(1)(j)(3) & " /" & Info(i)(1)(j)(4) & " - " & Replace(Info(i)(1)(j)(2), "USD ", "$", 1, -1, vbTextCompare) & " =-"
                            PositionEntry = PositionEntry & Chr(10) & "https://na68.salesforce.com/" & Info(i)(1)(j)(0)
                        Next j
                        Report = Replace(Report, "{" & Info(i)(0) & "}", PositionEntry, 1, -1, vbTextCompare)
                    End If
                Else
                    Report = Replace(Report, "{" & Info(i)(0) & "}", Info(i)(1), 1, -1, vbTextCompare)
                End If
             
            If Info(i)(0) = "Winning Rank" Then
                If Info(i)(1) * 1 > 4 Then
                    QualityMatch = Info(i)(1)
                End If
            End If
         
            If Info(i)(0) = "Original Name" Then
                OldName = Info(i)(1)
            End If
            If Info(i)(0) = "HC Name" Then
                NewName = Info(i)(1)
            End If
        'End If
    Next i
 
    If QualityMatch > 4 Then
        Updates2Return.Add Array("00Na0000009s155", NewName)
        Updates2Return.Add Array("00N1300000BQyft", OldName)
        Report = Report & Chr(10) & OldName
    Else
        If QualityMatch < 3 Then
            Report = "WARNING: Low Match Score" & Chr(10) & Chr(10) & Report
        End If
    End If
    Updates2Return.Add Array("00N1300000BRdfm", Report)
    Set JobTaggingReport = Updates2Return
End Function
Private Function IWT_Stage_Rank(Stage As String) As Double
Dim StageList As Collection
Dim Result As Double
Set StageList = New Collection
StageList.Add Array("8", "Closed Won")
StageList.Add Array("7", "Finalization")
StageList.Add Array("6", "Processing")
StageList.Add Array("5", "Qualified")
StageList.Add Array("4", "Review")
StageList.Add Array("3", "Prospecting")
StageList.Add Array("2", "Closed Cancel")
StageList.Add Array("1", "Closed Lost")
    For i = 1 To StageList.count
        If StageList(1)(1) = Stage Then
            Result = StageList(i)(0)
        End If
    Next i
    IWT_Stage_Rank = Result
End Function
Private Function Housing_AnalyeOvercrowding(AssessmentID As String, VerifyPAX As Boolean) As Variant
Dim IE As Object
Dim URL As String
Dim TotalPAXExpected As String
Dim ListofPAX As Collection
Dim FieldInfo As Object
Dim Report As Variant
Dim Overcrowded As Boolean
Dim Updates2Push As Collection
Dim XML As String
Dim PAXResearch As Collection
Dim ValidationSeason As String
Dim PAXInfo As Variant
Dim DuplicatePAX As Boolean
Dim navresults As Boolean




navresults = opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e?retURL=" & AssessmentID)
'get expected count of pax
Set FieldInfo = IE.document.getelementbyid("00N1300000BRYQM")
TotalPAXExpected = FieldInfo.Value
Debug.Print "Assessment has reportd " & TotalPAXExpected & " PAX"
    If TotalPAXExpected = "" Then
        TotalPAXExpected = 1
    End If
'get list of pax currently matched to assessment
Set ListofPAX = Pull_Master_Child(AssessmentID, "CF00N1300000BLnhS", "a0T")
Debug.Print "Overcrowding list says: " & ListofPAX(1)(1)(0) & " and " & ListofPAX(2)(1)(0)
If ListofPAX(2).count < 3 Then
    Debug.Print "PAX list was Empty"
Else
    'check each pax to make sure season matches up and that there are no duplicates
    Set PAXResearch = New Collection
    If VerifyPAX Then
        ValidationSeason = Fetch_Fields(IE, "00N1300000BLnhq").Value
        ValidationSeason = ValidationSeason & Fetch_Fields(IE, "00N1300000BLnhn").Value
        Debug.Print "Housing Validation Season: " & ValidationSeason
            For i = 2 To ListofPAX.count
            PAXInfo = Array("Season", "Year", "Intrax ID", "Accommodation ID", "Damaged")
                URL = "https://na68.salesforce.com/" & ListofPAX(i)(3)(1)
                navresults = opNAV(IE, "nav", URL)
                PAXInfo(0) = Fetch_Fields(IE, "00Na000000B2tGW_ileinner").innerhtml
                PAXInfo(1) = Fetch_Fields(IE, "00Na000000B2KhB_ileinner").innerhtml
                PAXInfo(2) = Fetch_Fields(IE, "00Na000000B2kL8_ileinner").innerhtml
                PAXInfo(3) = ListofPAX(i)(1)(1)
                DuplicatePAX = False
              
                    If PAXResearch.count < 1 Then
                        PAXInfo(4) = False
                        PAXResearch.Add PAXInfo
                    Else
                        For j = 1 To PAXResearch.count
                            If PAXResearch(j)(2) = PAXInfo(2) Then
                                DuplicatePAX = True
                                'dupli
                            End If
                        Next j
                      
                        If DuplicatePAX Or ValidationSeason <> PAXInfo(0) & PAXInfo(1) Then
                            PAXInfo(4) = True
                        Else
                            PAXInfo(4) = False
                        End If
                       
                        PAXResearch.Add PAXInfo
                    End If
            Next i
          
        For i = 1 To PAXResearch.count
            If PAXResearch(i)(4) = True Then
                Debug.Print "Identified a "; PAXResearch(i)(0) & PAXResearch(i)(1) & " accommodation at https://na68.salesforce.com/" & PAXResearch(i)(3)
            Else
                Debug.Print "Identified a good accommodation at https://na68.salesforce.com/" & PAXResearch(i)(3)
            End If
        Next i
    End If
 
        If ListofPAX.count - 1 > TotalPAXExpected Then
            Overcrowded = True
        Else
            Overcrowded = False
        End If
     
    
    Report = Array(Array("Expected", TotalPAXExpected), _
                    Array("Count", ListofPAX.count - 1), _
                    Array("Rooster Ver", "False"), _
                    Array("2ManyPAX", Overcrowded), _
                    Array("Date of Count", Format(Now(), "MM/DD/YYYY")), _
                    Array("Version", "1"))
                 
    Set Updates2Push = New Collection
        If Overcrowded Then
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e?retURL=" & AssessmentID & "&00Na000000B2Kfj=Incomplete")
            Set FieldInfo = IE.document.getelementbyid("00Na000000B369A")
            Updates2Push.Add Array("00Na000000B369A", "Overcrowded" & Chr(10) & FieldInfo.Value)
        Else
            Set IE = navigate2page_wait2load(IE, "https://na68.salesforce.com/" & AssessmentID & "/e?retURL=" & AssessmentID)
        End If
     
     
     If 1 = 2 Then
        XML = "<PAHRV>"
        For i = 0 To UBound(Report)
            XML = XML & "<" & Report(i)(0) & ">" & (Report(i)(1)) & "</" & Report(i)(0) & ">"
        Next i
       XML = XML & "</PAHRV>"
     
        Updates2Push.Add Array("00N1300000BLnhp", XML)
     
        For Each UpDate In Updates2Push
            Set FieldInfo = IE.document.getelementbyid(UpDate(0))
                FieldInfo.Value = UpDate(1)
        Next UpDate
     
       Overcrowded = HitSave(IE)
    End If
End If
 
IE.Quit
Set IE = Nothing
AnalyeOvercrowding = Report
End Function
Sub Z_SurveyDispatcher()
Dim SurveyList As Variant
Dim FieldList As New Collection
Dim TaskList As Collection
Dim CTask As Collection
Dim cList As String
Dim IE As Object
Dim MasterTask As String
Dim KeepProccessing As Boolean
Dim i As Double

MasterTask = "00T1B00005h0Ax6"
Set FieldList = New Collection
    FieldList.Add Array("List", "tsk6")
SurveyList = Retrieve_Page_Info(MasterTask, FieldList)

Set TaskList = Sequencer((PageInfoF(SurveyList, "List")(0)), Chr(10) & "<br>")

KeepProccessing = True
i = 0
Do While KeepProccessing And i <= TaskList.count
    i = i + 1
    Set CTask = Sequencer(TaskList(i), ",")
    
    If CTask(3) = "" Then
        KeepProccessing = False
    End If

Loop

If i > TaskList.count Then
    Debug.Print "List must be done?"
Else
  cList = CTask(2)
        TaskList.Remove i
        TaskList.Add CTask(1) & "," & CTask(2) & "," & Format(Now(), "mm/dd/yy hh:nn") & ","
        
        Set FieldList = New Collection
            FieldList.Add Array("tsk6", Collection2String(TaskList, True, Chr(10)))
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MasterTask & "/e")
        Call PushUpdates2Page(IE, FieldList, True)
        
        Call Emailv3_SurveySender("00X1B000001s9Ha", "https://s-78fbf4-i.sgizmo.com/s3/i-<ID>-2821510?sguid=<ID>", cList)
        Call Emailv3SOS("Housing2018 List Confirmation - " & cList, "Emails sent for https://na68.salesforce.com/" & cList, "0031B00002bteMh", "5001B00001Ciu9M")
        
        Set FieldList = New Collection
            FieldList.Add Array("List", "tsk6")
        SurveyList = Retrieve_Page_Info(MasterTask, FieldList)
        
        Set TaskList = Sequencer((PageInfoF(SurveyList, "List")(0)), Chr(10) & "<br>")
        
        For i = 1 To TaskList.count
            Set CTask = Sequencer(TaskList(i), ",")
            
            If CTask(2) = cList Then
                TaskList.Remove i
                TaskList.Add CTask(1) & "," & cList & "," & CTask(3) & "," & "F-" & Format(Now(), "dd/mm/yy hh:nn")
                
                Set FieldList = New Collection
                    FieldList.Add Array("tsk6", Collection2String(TaskList, True, Chr(10)))
                Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MasterTask & "/e")
                Call PushUpdates2Page(IE, FieldList, True)
            End If
            
        Next i
End If

Call opNAV(IE, "quit")
End Sub
Sub Z_SurveyDispatcher2()
Dim SurveyList As Variant
Dim FieldList As New Collection
Dim TaskList As Collection
Dim CTask As Collection
Dim cList As String
Dim IE As Object
Dim MasterTask As String
Dim KeepProccessing As Boolean
Dim i As Double

MasterTask = "5001B00001Ekbxa"
KeepProccessing = True

Do While KeepProccessing
    Set FieldList = New Collection
        FieldList.Add Array("Status", "cas7")
        FieldList.Add Array("Activity History", "_RelatedHistoryList")
    SurveyList = Retrieve_Page_Info(MasterTask, FieldList)
    
    
    SurveyList = PageInfoF(SurveyList, "Activity History")
    
    If IsArray(SurveyList) Then
        SurveyList = SurveyList(0)
        cList = PageInfoF(SurveyList, "Subject")(1)
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & cList & "/e")
        Set FieldList = New Collection
            FieldList.Add Array("tsk3_lkid", "5001B00001Ekcty")
            FieldList.Add Array("tsk5", PageInfoF(SurveyList, "Subject")(0) & "- Started: " & Format(Now(), "mm/dd/yy hh:nn"))
        Call PushUpdates2Page(IE, FieldList)
    
        'https://s-0091fa-i.sgizmo.com/s3/i-<ID>-2850881?sguid=<ID>

        Call Emailv3_SurveySender("00X1B000001s9zh", "https://s-0091fa-i.sgizmo.com/s3/i-<ID>-2850881?sguid=<ID>", cList)
        Call Emailv3SOS("Housing2018 List Confirmation - " & cList, "Emails sent for https://na68.salesforce.com/" & cList, "0031B00002bteMh", "5001B00001Ciu9M")
            
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & cList & "/e")
        Set FieldList = New Collection
            FieldList.Add Array("tsk5", PageInfoF(SurveyList, "Subject")(0) & "- Completed: " & Format(Now(), "mm/dd/yy hh:nn"))
        Call PushUpdates2Page(IE, FieldList)
    Else
        KeepProccessing = False
        Debug.Print "No more sets found"
    End If
Loop


Call opNAV(IE, "quit")
End Sub
Sub Testing_General()
Dim Assessment As String
Dim Results As Collection
Dim Accommodation As String
Dim HousingAssessment As String
Dim Engagement As String
Dim Opp As New Collection
Dim tVar As Variant
Dim EmailTemplate


Call PAHRv3_Master("a0d1B00000ZeydW")
'PAHR_ConvertLandlord2018toAccount2019 ("a4g1B000001Maa5")

If False Then
    tVar = HC_Roster_Builder("0061B00001UcA2Z", True)
    Call HC_Roster_Recruitment(tVar)
    
    Call Emailv3_Delivery("00X1B000001s5zi", tVar, "0031B00002iqSXM", , False)
    
    
    'Call PAHRv3_Master("a0d1B00000ZezPh")
End If
 
End Sub
Private Sub MoveSite2Forest(SiteID As String)
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim Summary As Variant
Dim FinalReport As String
Dim Saving As Boolean
Dim SiteIDValid As Boolean
If Len(SiteID) = 15 And left(SiteID, 3) = "a0c" Then
SiteIDValid = True
Else
SiteIDValid = False
Debug.Print "MoveSite 2 Forest ID is invalid"
End If
If SiteIDValid Then
        Summary = Array(Array("Date", "", "date goes here", ""), _
                        Array("PLandlordID", "CF00N1300000BLnhG_lkid", "", "a4g1B000001MaTx"), _
                        Array("PandlordName", "CF00N1300000BLnhG", "", "King of the Forest of Duplicates"), _
                        Array("Old", "00Na000000B2LkG", "", ""))
     
        URL = "https://na68.salesforce.com/" & SiteID & "/e?retURL=" & SiteID
     
        Set IE = CreateObject("InternetExplorer.Application")
        IE.Visible = False
        Set IE = navigate2page_wait2load(IE, URL)
     
            For i = 0 To UBound(Summary)
                Debug.Print "field is " & Summary(i)(1)
                If Summary(i)(1) <> "" Then
                    Set FieldInfo = IE.document.getelementbyid((Summary(i)(1)))
                    Summary(i)(2) = FieldInfo.Value
                    Debug.Print Summary(i)(0) & " === " & FieldInfo.Value
                        If Summary(i)(3) <> "" Then
                            FieldInfo.Value = Summary(i)(3)
                        End If
                End If
            Next i
     
            Summary(0)(2) = Format(Now(), "mm/dd/yyyy")
         
        FinalReport = "<KofF>"
            For i = 0 To UBound(Summary)
                Debug.Print "XML Builder | " & Summary(i)(0) & " = " & Summary(i)(2)
                If Summary(i)(2) <> "" Then
                    FinalReport = FinalReport & Replace(Replace("<{FIELD}>{VALUE}</{FIELD}>", "{FIELD}", Summary(i)(0), 1, -1, vbBinaryCompare), "{VALUE}", Summary(i)(2), 1, -1, vbBinaryCompare)
                End If
            Next i
        FinalReport = FinalReport & "</KofF>"
     
        Set FieldInfo = IE.document.getelementbyid("00Na000000B2LkG")
            FieldInfo.Value = left(FinalReport, 255)
         
        Saving = HitSave(IE)
     
        
        IE.Quit
        Set IE = Nothing
End If
End Sub
Private Function HitSave(IEofOpenPage As Object) As Boolean
Dim FieldInfo As Object
Dim CurrentAddress As String
Dim Loading As Boolean
Dim Counter As Double
Dim CurrentTitle As String
Dim StartTime As Date
Dim PageLength As Double
Dim Name_of_button_being_pressed As String
Dim Is_there_still_a_SAVE_button As Boolean
Dim NewRecord As Boolean
Dim NumberObuttons As Double
Dim NewRecordSuccess As Boolean
 
NewRecordSuccess = False
StartTime = Now()
 
'IEofOpenPage.Visible = True
'MsgBox "hello", , "Debugging"
Loading = True
 
    PageLength = Len(IEofOpenPage.document.Body.innerhtml)
    'Debug.Print "Initial page size: " & PageLength
    Debug.Print "Initial page URL: " & IEofOpenPage.LocationURL
    CurrentAddress = IEofOpenPage.LocationURL
    If CurrentAddress Like "https://na68.salesforce.com/???/e*" Then
        If InStr(1, CurrentAddress, "/00T/", vbBinaryCompare) = 0 Then
            NewRecord = True
        End If
        Debug.Print "Link detected as a create new record URL"
    Else
        NewRecord = False
    End If
  
   If IsObject(IEofOpenPage.document) Then
    If IsObject(IEofOpenPage.document.Body) Then
        If IsObject(IEofOpenPage.document.getelementsbyclassname("btn")) Then
            Set FieldInfo = IEofOpenPage.document.getelementsbyclassname("btn")
            NumberObuttons = 0
            For Each ButtonFound In FieldInfo
                NumberObuttons = NumberObuttons + 1
            Next ButtonFound
           
            Is_there_still_a_SAVE_button = False
               
            If NumberObuttons > 0 Then
                For i = 0 To 2
                'For Each xbutton In FieldInfo
                'Debug.Print "Button found named: " & xbutton.Name
                    If FieldInfo(i).Name = "save" Or FieldInfo(i).Name = "send" Then
                        Name_of_button_being_pressed = FieldInfo(i).Value
                    FieldInfo(i).Click
                        Debug.Print "Pressed save button (" & Counter & ") " & Name_of_button_being_pressed
                        Is_there_still_a_SAVE_button = True
                        i = 5
                    End If
                Counter = Counter + 1
                Next i
            End If
        End If
    End If
End If
Counter = 0
  
   
    'If InStr(1, IEofOpenPage.document.body.innerhtml, "Insufficient Privileges</span>", vbBinaryCompare) > 0 Then
     '   Loading = False
      '  Debug.Print "Do not have permission to view this record " & IEofOpenPage.locationURL
   'Else
     '   Set FieldInfo = IEofOpenPage.document.getelementsbyclassname("btn")
      '      Name_of_button_being_pressed = FieldInfo.Item(0).Name
       '     Debug.Print "Save Button Found and Pressed"
    'End If
  
   IEofOpenPage.Visible = False
Application.Wait (Now + 0.000008)

'Debug.Print "Hit Save entering the big wait loop"


'Set FieldInfo = IE.document.getelementsbyclassname("error")
   ' For Each ErrorClass In FieldInfo
        'IEofOpenPage.Visible = True
       ' MsgBox "Page had an error: " & ErrorClass.ID
  '  Next ErrorClass

Do While Loading And Counter < 5000
    Do While IEofOpenPage.busy
        Counter = Counter + 1
    Loop
    
    Do While IsPageStillLoading(IEofOpenPage) And Counter < 4000
            Counter = Counter + 1
    Loop
        
    Do While IsObject(IEofOpenPage.document) = False And Counter < 4500
        Counter = Counter + 1
        Do While IsObject(IEofOpenPage.document.Body) = False And Counter < 4000
            Counter = Counter + 1
            Do While IsObject(IEofOpenPage.document.Body.innerhtml) = False And Counter < 3500
                Counter = Counter + 1
            Loop
        Loop
    Loop
   
   'IEofOpenPage.Visible = True
   If NewRecord Then
        Debug.Print "Hit save entering New Record"
        
        Application.Wait (Now + #12:00:01 AM#)
        
        Debug.Print CurrentTitle
        Do While NewRecordSuccess = False
        CurrentTitle = IEofOpenPage.LocationURL
        IEofOpenPage.Visible = False
            If CurrentTitle Like "https://na68.salesforce.com/???/e*" Then
                NewRecordSuccess = False
            Else
                If Len(CurrentTitle) = 43 Then
                    NewRecordSuccess = True
                    Loading = False
                End If
            End If
            Counter = Counter + 1
        Loop
    Else
        If IEofOpenPage.LocationURL <> "" Then
            Loading = False
        Else
            Counter = Counter + 1
        End If
    End If
   
 
 
    Counter = Counter + 1
Loop
Debug.Print Format(Now() - StartTime, "nn:ss") & " Save Button Counter = " & Counter
Counter = 0
HitSave = Loading
End Function
Private Sub MoveAssess2Forest(SiteID As String)
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim Summary As Variant
Dim FinalReport As String
Dim Saving As Boolean
Dim SiteIDValid As Boolean
If Len(SiteID) = 15 And left(SiteID, 3) = "a1l" Then
SiteIDValid = True
Else
SiteIDValid = False
Debug.Print "MoveSite 2 Forest ID is invalid"
End If
If SiteIDValid Then
        Summary = Array(Array("Date", "", Format(Now(), "mm/dd/yyyy"), ""), _
                        Array("PLandlordID", "CF00N1300000BLnhl_lkid", "", "a4g1B000001MaTx"), _
                        Array("PandlordName", "CF00N1300000BLnhl", "", "King of the Forest of Duplicates"), _
                        Array("Old", "CF00N1300000BLnhl", "", ""), _
                        Array("Name", "Name", "", "(DUP) Housing Validation"), _
                        Array("Flag", "00Na000000B2Kek", "", "Duplicate Flagged " & Format(Now(), "mm/dd/yyyy")), _
                        Array("BirthSiteID", "CF00N1300000BLnhV_lkid", "", "a0c1B00000EgUFO"), _
                        Array("BirthSite", "CF00N1300000BLnhV", "", "Forest of Duplicates, Work Travel, Intrax, 00000"))
     
        URL = "https://na68.salesforce.com/" & SiteID & "/e?retURL=" & SiteID
     
        Set IE = CreateObject("InternetExplorer.Application")
        IE.Visible = False
        Set IE = navigate2page_wait2load(IE, URL)
     
            For i = 0 To UBound(Summary)
                Debug.Print "field is " & Summary(i)(1)
                If Summary(i)(1) <> "" Then
                    Set FieldInfo = IE.document.getelementbyid((Summary(i)(1)))
                    Summary(i)(2) = FieldInfo.Value
                    Debug.Print Summary(i)(0) & " === " & FieldInfo.Value
                        If Summary(i)(3) <> "" Then
                            FieldInfo.Value = Summary(i)(3)
                        End If
                End If
            Next i
         
        FinalReport = "<KofF>"
            For i = 0 To UBound(Summary)
                Debug.Print "XML Builder | " & Summary(i)(0) & " = " & Summary(i)(2)
                If Summary(i)(2) <> "" Then
                    FinalReport = FinalReport & Replace(Replace("<{FIELD}>{VALUE}</{FIELD}>", "{FIELD}", Summary(i)(0), 1, -1, vbBinaryCompare), "{VALUE}", Summary(i)(2), 1, -1, vbBinaryCompare)
                End If
            Next i
        FinalReport = FinalReport & "</KofF>"
      
        Set FieldInfo = IE.document.getelementbyid("00Na000000B369A")
            FieldInfo.Value = left(FinalReport, 1200)
         
        Saving = HitSave(IE)
     
        
        IE.Quit
        Set IE = Nothing
End If
End Sub
Private Sub Banish_with_XML_Log(RecordID As String, IE As Object, Instructions As Variant, LogField As Variant)
Dim IE As Object
Dim URL As String
Dim FieldInfo As Object
Dim Summary As Variant
Dim FinalReport As String
Dim Saving As Boolean
Dim SiteIDValid As Boolean
 
        URL = "https://na68.salesforce.com/" & RecordID & "/e?retURL=" & RecordID
     
        Set IE = CreateObject("InternetExplorer.Application")
        IE.Visible = False
        Set IE = navigate2page_wait2load(IE, URL)
     
            For i = 0 To UBound(Instructions)
                Debug.Print "field is " & Instructions(i)(1)
                If Instructions(i)(1) <> "" Then
                    Set FieldInfo = IE.document.getelementbyid((Instructions(i)(1)))
                    Instructions(i)(2) = FieldInfo.Value
                    Debug.Print Instructions(i)(0) & " === " & FieldInfo.Value
                        If Instructions(i)(3) <> "" Then
                            FieldInfo.Value = Instructions(i)(3)
                        End If
                End If
            Next i
         
        FinalReport = "<KofF>"
            For i = 0 To UBound(Instructions)
                Debug.Print "XML Builder | " & Instructions(i)(0) & " = " & Instructions(i)(2)
                If Instructions(i)(2) <> "" Then
                    FinalReport = FinalReport & Replace(Replace("<{FIELD}>{VALUE}</{FIELD}>", "{FIELD}", Instructions(i)(0), 1, -1, vbBinaryCompare), "{VALUE}", Instructions(i)(2), 1, -1, vbBinaryCompare)
                End If
            Next i
        FinalReport = FinalReport & "</KofF>"
     
        Set FieldInfo = IE.document.getelementbyid(LogField(0))
            FieldInfo.Value = left(FinalReport, LogField(1))
         
        Saving = HitSave(IE)
     
        
        IE.Quit
        Set IE = Nothing
 
End Sub
Private Function HFA_Pull_Camp_Tree(CampID As String) As Variant
Dim Camplist As New Collection
Dim CampPage As Variant
Dim FieldList As Collection
Dim CampaignHierarchy As Variant
Dim CurrentCamp As Variant
Dim Matches As New Collection
Dim CurrentMatch As Variant

Set FieldList = New Collection
    FieldList.Add Array("Start Date", "cpn5_ileinner")
    FieldList.Add Array("Campaign Hierarchy", "_RelatedCampaignHierarchyList")

CampaignHierarchy = Retrieve_Page_Info(CampID, FieldList)

CampaignHierarchy = PageInfoF(CampaignHierarchy, "Campaign Hierarchy")


'Debug.Print "Camp A count: " & UBound(CampaignHierarchy)
'Debug.Print "Camp B count: " & UBound(CampaignHierarchy(2))
'Debug.Print "Camp 2 count: " & UBound(CampaignHierarchy(2)(1))
For i = 0 To UBound(CampaignHierarchy)
Debug.Print "Camp 3 count: " & CampaignHierarchy(i)(0)

Next i




If UBound(CampaignHierarchy) > 1 Then
    For i = 1 To UBound(CampaignHierarchy)
        Debug.Print "Adding... " & PageInfoF(CampaignHierarchy(i), "Campaign Name")(0)
        Camplist.Add CampaignHierarchy(i)
    Next i
Else
    Debug.Print "Adding no sub... " & CampaignHierarchy(0)
    Camplist.Add CampaignHierarchy
End If

    Set FieldList = New Collection
        FieldList.Add Array("Start Date", "cpn5_ileinner")
        FieldList.Add Array("Matches", "_00N1300000BQr6p")
For i = 1 To Camplist.count
    CampPage = Retrieve_Page_Info((Camplist(i)(1)), FieldList)
    CurrentCamp = PageInfoF(CampPage, "Matches")
    If UBound(CurrentCamp) > 1 Then
        For j = 0 To UBound(CurrentCamp)
            CurrentCamp(j) = PageInfo_RR(CurrentCamp(j), "Campaign", Camplist(i))
            Matches.Add CurrentCamp(j)
        Next j
    End If
Next i


HFA_Pull_Camp_Tree = CollectionConverter(Matches)

End Function
Private Function AA_HFAPullerBeta(CampaignID As String) As Variant

Dim Campaign As Variant
Dim FieldList As Collection
Dim TempHolder As Variant
Dim PosContent As Variant
Dim MatchContent As Variant
Dim MatchList As New Collection
Dim TestCollection As New Collection
 
If Len(CampaignID) = 15 And left(CampaignID, 3) = "701" Then
SiteIDValid = True
Else
SiteIDValid = False
Debug.Print "Camp ID failed test"
End If

If SiteIDValid Then
    Set FieldList = New Collection
        FieldList.Add Array("Parent Campaign", "Parent_ileinner")
        FieldList.Add Array("Start Date", "cpn5_ileinner")
        FieldList.Add Array("End Date", "cpn6_ileinner")
        'Fieldlist.Add Array("Campaign Positions", "_00Na000000B2RrS")
        FieldList.Add Array("Matches", "_00N1300000BQr6p")
        FieldList.Add Array("Campaign Hierarchy", "_RelatedCampaignHierarchyList")
        
    Campaign = Retrieve_Page_Info(CampaignID, FieldList)
    
    
    
    TempHolder = PageInfoF(Campaign, "Matches")
    If 1 = 2 Then
        
        Set MatchList = Pull_Master_Child(CampaignID, "00N1300000BQr6p", "a0R")
        Debug.Print MatchList.count
        For i = 1 To MatchList.count
            Debug.Print "Checking... " & MatchList(i)(2)(0)
            TestCollection.Add CollectionConverter(MatchList(i))
        Next i
        TempHolder = CollectionConverter(TestCollection)
    End If
    
    Set FieldList = New Collection
        FieldList.Add Array("Position", "00Na000000B2LkX_ileinner")
        FieldList.Add Array("Matches", "_00N30000008REJy")
        
        For i = 0 To UBound(TempHolder)
            'MatchList.Add PageInfoF(TempHolder(i), "Engagement Name")

            Debug.Print "Match ID should be: " & PageInfoF(TempHolder(i), "Engagement Name")(1)
            'PosContent = Retrieve_Page_Info((TempHolder(i)(1)), FieldList)
                'MatchContent = PageInfoF(PosContent, "Matches")
               ' For j = 0 To UBound(MatchContent)
                  '  MatchList.Add PageInfoF(MatchContent(j), "Engagement Name")(1)
               ' Next j
       Next i
    
End If


AA_HFAPullerBeta = TempHolder
End Function
Sub XXX_HFATest()
Dim Camplist As New Collection
Dim TestPAX As Variant

'TestPAX = HFA_Info_Collector("a0d1B00000TwzRf")


'CampList.Add "7011B000002Z9HO"
'CampList.Add "7011B000002Z9HT"
'Camplist.Add "7011B000002Z8iO"
Camplist.Add "7011B000002NGBe"


For i = 1 To Camplist.count
    Call HFA_Maker(Camplist(i))
Next i



End Sub

Private Sub HFA_Maker(CampID As String)
Dim Results As String
Dim MatchList As Variant

Dim StartTime As Date
Dim Updates As Collection
Dim FakePAX As Variant
Dim HTML As New Collection


StartTime = Now()


'CampID = "7011B000002dJLE"
'MatchList = AA_HFAPullerBeta(CampID)
MatchList = HFA_Pull_Camp_Tree(CampID)



Debug.Print "Issue check #1: " & UBound(MatchList)
Debug.Print "Issue check #2: " & UBound(MatchList(1))
Debug.Print "Issue check #3: " & UBound(MatchList(1)(2))
Debug.Print "Issue check #4: " & MatchList(1)(0)

Set Updates = New Collection
For i = 0 To UBound(MatchList)
    Updates.Add Array(PageInfoF(MatchList(i), "Engagement Name")(1), MatchList(i))
Next i

MatchList = MergeSort(Updates)

For i = 0 To UBound(MatchList)
    FakePAX = HFA_Info_Collector((PageInfoF(MatchList(i)(1), "Engagement Name")(1)))
    If PageInfoF(FakePAX, "HFA")(0) <> "" Then
        HTML.Add Array(PageInfoF(PageInfoF(PageInfoF(FakePAX, "Application"), "PersonInfo"), "First Name")(0), PageInfoF(PageInfoF(PageInfoF(FakePAX, "Application"), "PersonInfo"), "Last Name")(0), PageInfoF(FakePAX, "Intrax ID")(0), PageInfoF(MatchList(i)(1), "Position Name")(0), PageInfoF(FakePAX, "Partner")(0), PageInfoF(MatchList(i)(1), "Campaign")(0), ConvertHTML2Text((PageInfoF(FakePAX, "HFA")(0))))
    End If
Next i


For i = 1 To HTML.count
Set Updates = New Collection

    For j = 0 To 60
        If (i) > HTML.count Then
        Else
            Updates.Add HTML(i)
            i = i + 1
        End If
    Next j
    
    
        Results = HC_Roster_Print_Table("Bargain Brand HFAs", Array("First Name", "Last Name", "ID", "Position Name", "Partner", "Campaign", "HTML"), CollectionConverter(Updates))
        
        'Results = "<div style=""background-color: #ccffcc;"">" & Results & "</div>"
        
        FakePAX = PAXbasicInfo("", "", "", 0)
            FakePAX(2, 1) = "Particpant Info Sheets"
            FakePAX(3, 1) = "Dear Andrew,<br/><br/>Below are the PAx info sheets generated on " & Format(StartTime, "mm/dd/yy hh:nn") & " taking aprox " & Format(Now() - StartTime, "nn:ss") & " to complete " & HTML.count & " PAX.<br/><br/><br/>" & Results
            'FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", MatchID, 1)
            FakePAX(39, 2) = "5001B000012W3Wz"
            FakePAX(20, 2) = "0031B00002bteMh"
            FakePAX(1, 1) = "chronogib@gmail.com"
        
        Set Updates = New Collection
            'Updates.Add Array("00Na000000B2SUq", "Offered")
            'Updates.Add Array("00N30000008RERi", "Applied")
        
        Call Send_HTMLEmail(FakePAX, "NoReply", Updates)
    
Next i

Debug.Print Results
End Sub
Private Function ConvertHTML2Text(Code As String) As String
Dim TextOnly As String
Dim SubList As New Collection

SubList.Add Array("&", "&#38;")
SubList.Add Array("<", "&#60;")
SubList.Add Array(">", "&#62;")

TextOnly = Code
For i = 1 To SubList.count
    TextOnly = Replace(TextOnly, SubList(i)(0), SubList(i)(1), 1, -1, vbTextCompare)
Next i

ConvertHTML2Text = TextOnly
End Function
Private Function HFA_Info_Collector(EngagementID As String) As Variant
Dim PAXn As Variant
Dim FieldList As Collection
Dim IPUs As Variant
Dim Pics As New Collection
Dim HTMLPackage As String

PAXn = PAHR_CollectInfo(EngagementID, "HFA")
If PageInfoF(PAXn, "Status")(0) <> "Cancelled" Then
    PAXn = PageInfo_RR(PAXn, "Application", HFA_Add_App((PageInfoF(PAXn, "Applications")(0)(1))))
    
    Set FieldList = New Collection
    
    IPUs = PageInfoF(PAXn, "Intrax Program Uploads")
    If IsArray(IPUs(0)) Then
        For i = 0 To UBound(IPUs)
            If PageInfoF(IPUs(i), "Document Type")(0) = "Participant-Photo" Then
                FieldList.Add HFA_PicBuilder(IPUs(i))
            End If
        Next i
    End If
    
    Debug.Print "Found " & FieldList.count & " pictures!"
    
    PAXn = PageInfo_RR(PAXn, "Photos", Array("PhotoList", ""))
    If FieldList.count > 0 Then
        PAXn = PageInfo_RR(PAXn, "Photos", CollectionConverter(FieldList))
    Else
        Debug.Print "No Pictures found"
        IPUs = Array("Missing Picture", "ID", Array(Array("missing", "id", Array("", ""))))
        IPUs = PageInfo_RR(IPUs, "Link", Array("", ""))
        PAXn = PageInfo_RR(PAXn, "Photos", Array(IPUs))
    End If
    HTMLPackage = HFA_Builder(PAXn)
Else
    Debug.Print "Engagement is Cancelled"
    HTMLPackage = ""
End If

PAXn = PageInfo_RR(PAXn, "HFA", Array(HTMLPackage, ""))
HFA_Info_Collector = PAXn
End Function
Private Function HFA_Builder(PAXn As Variant) As String
Dim HTML As New Collection
Dim FullPage As String
Dim SubPackage As Variant
Debug.Print "Starting HFA HTML generation."
HTML.Add "<table class=""HFA"">"
HTML.Add "<tr>"
HTML.Add "<td colspan=""3""><h1>Work Travel Hiring Profile</h1></td></tr>"

HTML.Add "<tr>"
HTML.Add "<td style=""width: 2.5in; vertical-align: baseline;"">" 'Start the sidebar
    HTML.Add "<div><img src="""
    HTML.Add PageInfoF(PageInfoF(PAXn, "Photos")(0), "Link")(1)
    HTML.Add """ alt=""Pax Photo"" width=""200""></img></div>"
    'thumbnails
        HTML.Add "<div>"
        SubPackage = PageInfoF(PAXn, "Photos")
        For i = 0 To UBound(SubPackage)
            HTML.Add "<div style=""display: inline;""><img src="""
            HTML.Add PageInfoF(SubPackage(i), "Link")(1)
            HTML.Add """ alt=""Pax Photo"" width=""50""></img>"
            HTML.Add "</div>"
        Next i
        HTML.Add "</div>"
    
HTML.Add "<div>"
    HTML.Add "<br/><br/><br/>How did your interview go?<br/>(a) <br/>(b) Hired for other position:<br/>(c) Not hired<br/><br/>Match Start Date:<br/>Match End Date:<br/><br/>Notes:<br/><br/>"
    HTML.Add "Content for sidebar"
HTML.Add "</div>"
HTML.Add "</td>"
HTML.Add "<td><table><tr>" 'start the actual profile

'actual profile
   'pictures
   If False Then
    HTML.Add "<tr><td colspan=""2""><table><tr>"
        SubPackage = PageInfoF(PAXn, "Photos")
        For i = 0 To UBound(SubPackage)
            HTML.Add "<td><img src="""
            HTML.Add PageInfoF(SubPackage(i), "Link")(1)
            HTML.Add """ alt=""Pax Photo"" width=""50""></img>"
            HTML.Add "</td>"
        Next i
    HTML.Add "</tr></table>"
    HTML.Add "</td></tr>"
    End If
    
 
HTML.Add "<tr><td colspan=""3""><h2>Biographical Information</h2></td></tr>"

HTML.Add "<tr><td><b>First Name</b></td><td><b>Gender</b></td><td><b>Email</b></td></tr>"
HTML.Add "<tr><td>" & PageInfoF(PageInfoF(PageInfoF(PAXn, "Application"), "PersonInfo"), "First Name")(0) & "</td>"
HTML.Add "<td>" & PageInfoF(PAXn, "Gender")(0) & "</td>"
HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Account"), "Email")(0) & "</td></tr>"

HTML.Add "<tr><td><b>Middle Name</b></td><td><b>Birth Date</b></td><td><b>Skype</b></td></tr>"
HTML.Add "<tr><td>" & PageInfoF(PageInfoF(PageInfoF(PAXn, "Application"), "PersonInfo"), "Middle Name")(0) & "</td>"
HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Account"), "Birthdate")(0) & "</td>"
HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Account"), "Skype ID")(0) & "</td></tr>"

HTML.Add "<tr><td><b>Last Name</b></td><td><b>Country of Citizenship</b></td><td><b>&nbsp;</b></td></tr>"
HTML.Add "<tr><td>" & PageInfoF(PageInfoF(PageInfoF(PAXn, "Application"), "PersonInfo"), "Last Name")(0) & "</td>"
HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Account"), "Citizenship")(0) & "</td></tr>"
HTML.Add "<td>&nbsp;</td>"

HTML.Add "<tr><td colspan=""3""><h2>Program Preferences</h2></td></tr>"
    HTML.Add "<tr><td><b>Has Flexible Dates?</b></td><td><b>Earliest Start Date</b></td><td><b>Preferred Start Date</b></td></tr>"
    HTML.Add "<tr><td>" & PageInfoF(PAXn, "Flexible Dates")(0) & "</td>"
    HTML.Add "<td>" & PageInfoF(PAXn, "Engagement Start")(0) & "</td>"
    HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Primary Match"), "Start Date")(0) & "</td>"
    
    HTML.Add "<tr><td><b>&nbsp;</b></td><td><b>Latest End Date</b></td><td><b>Preferred End Date</b></td></tr>"
    HTML.Add "<tr><td>&nbsp;</td>"
    HTML.Add "<td>" & PageInfoF(PAXn, "Engagement End")(0) & "</td>"
    HTML.Add "<td>" & PageInfoF(PageInfoF(PAXn, "Primary Match"), "End Date")(0) & "</td>"

HTML.Add "<tr><td colspan=""3""><h2>Education & Language Skills</h2></td></tr>"
    HTML.Add "<tr><td><b>College or University Name</b></td><td colspan=""2""><b>Language of the Destination Country</b></td></tr>"
    HTML.Add "<tr><td>" & PageInfoF(PageInfoF(PAXn, "Application"), "School_Name")(0) & "</td>"
    HTML.Add "<td colspan=""2"">" & PageInfoF(PageInfoF(PAXn, "Application"), "Language 1")(0) & ", " & PageInfoF(PageInfoF(PAXn, "Application"), "Language 1 Proficiency")(0) & "</td>"
    
    HTML.Add "<tr><td><b>Field of Study</b></td><td colspan=""2""><b>Additional Language(s)</b></td></tr>"
    HTML.Add "<tr><td>" & PageInfoF(PageInfoF(PAXn, "Application"), "Major")(0) & "</td>"
    HTML.Add "<td colspan=""2"">" & "</td>"


HTML.Add "<tr><td colspan=""3""><h2>Work Experience</h2></td></tr>"
If PageInfoF(PageInfoF(PAXn, "Application"), "Has Experience?")(1) = 1 Then
    SubPackage = PageInfoF(PageInfoF(PAXn, "Application"), "Experience")
    For i = 0 To UBound(SubPackage)
            HTML.Add "<tr><td colspan=""3"">"
            HTML.Add "<span style=""font-size: 120%""><b>" & PageInfoF(SubPackage(i), "Employer Name")(0) & "</b></span>"
            HTML.Add "&nbsp;&nbsp;in&nbsp;&nbsp;" & PageInfoF(SubPackage(i), "City")(0) & ", " & PageInfoF(SubPackage(i), "Country")(0)
            HTML.Add "</td></tr>"
            HTML.Add "<tr><td><b>Position Title</b></td><td colspan=""2""><b>Position Dates</b><td></tr>"
            HTML.Add "<tr><td>" & PageInfoF(SubPackage(i), "Title")(0) & "</td><td colspan=""2"">"
            HTML.Add PageInfoF(SubPackage(i), "Start")(0) & "&nbsp;-&nbsp;" & PageInfoF(SubPackage(i), "End")(0)
            HTML.Add "<td></tr>"
            HTML.Add "<tr><td colspan=""3""><b>Position Description</b></td></tr>"
            HTML.Add "<tr><td colspan=""3"">"
            HTML.Add PageInfoF(SubPackage(i), "Description")(0) & "</td></tr>"
                If i < UBound(SubPackage) Then
                    HTML.Add "<tr><td colspan=""3"">&nbsp;</td></tr>"
                End If
        Next i
End If

HTML.Add "<tr><td colspan=""3""><h2>Essays</h2></td></tr>"
    SubPackage = PageInfoF(PageInfoF(PAXn, "Application"), "Essays")
        For i = 0 To UBound(SubPackage)
            HTML.Add "<tr><td colspan=""3"">"
            HTML.Add "<b>" & PageInfoF(SubPackage(i), "Label")(0) & "</b></td></tr>"
            HTML.Add "<tr><td colspan=""3"">"
            HTML.Add PageInfoF(SubPackage(i), "Narrative")(0) & "</td></tr>"
        Next i

HTML.Add "</table></td></tr></table>"
HTML.Add "<p style=""page-break-after: always;""></p>"

For i = 1 To HTML.count
    FullPage = FullPage & HTML(i)
Next i

HFA_Builder = FullPage
End Function
Private Function HFA_PicBuilder(IPU As Variant) As Variant
Dim IE As Object
Dim Picture As Variant
Dim URL As String
Dim FileExtension As String
Dim URL4Wait As String
Dim WaitingOnPhoto As Boolean


Picture = PageInfoF(IPU, "View File")
Debug.Print "Picture is " & Picture(0) & " | " & Picture(1)

URL = Picture(1)
Call opNAV(IE, "nav", URL)
URL4Wait = IE.LocationURL

WaitingOnPhoto = True
IE.Visible = False
Do While WaitingOnPhoto
    If InStr(1, IE.LocationURL, "intraxpublicdocumentsprod.s3.amazonaws.com", vbTextCompare) > 0 Then
        WaitingOnPhoto = False
    Else
        Application.Wait (Now + #12:00:01 AM#)
    End If
Loop

FileExtension = PageInfoF(IPU, "Intrax Program Upload Name")(0)
FileExtension = Replace(Right(FileExtension, 4), ".", "", 1, , vbTextCompare)

FileExtension = Replace(FileExtension, ".jpg", ".jpeg", 1, -1, vbTextCompare)

Picture = PageInfo_RR(IPU, "Link", Array(URL, IE.LocationURL))
'Picture = PageInfo_RR(IPU, "Link", Array(URL, "https://intraxpublicdocumentsprod.s3.amazonaws.com/temp/" & Right(URL, 36) & FileExtension))

Call opNAV(IE, "quit")
HFA_PicBuilder = Picture
End Function
Private Function HFA_Add_App(AppID As String) As Variant
Dim FieldList As Collection
Dim Application As Variant
Dim Essay As Variant

Set FieldList = New Collection
    FieldList.Add Array("School_Name", "00N30000008RrqF_ileinner")
    FieldList.Add Array("Major", "00N30000008RrqU_ileinner")
    FieldList.Add Array("Experience", "_00Na0000009s13q")
    FieldList.Add Array("Essays", "_00Na0000009qGsh")
    FieldList.Add Array("Language 1", "00Na0000009s13w_ileinner")
    FieldList.Add Array("Language 1 Proficiency", "00Na0000009s13v_ileinner")
    FieldList.Add Array("Person_Info", "_00Na0000009qBKX")

Application = Retrieve_Page_Info(AppID, FieldList)
Debug.Print "Completed retrieving app"

    Set FieldList = New Collection
        FieldList.Add Array("Essay Name", "Name_ileinner")
        FieldList.Add Array("Label", "00Na0000009qGsi_ileinner")
        FieldList.Add Array("Narrative", "00Na0000009qGsl_ileinner")
    
    Essay = PageInfoF(Application, "Essays")
    
    For i = 0 To UBound(Essay)
        If left((Essay(i)(1)), 3) = "a0k" Then
            Essay(i) = Retrieve_Page_Info((Essay(i)(1)), FieldList)
        End If
    Next i

Application = PageInfo_RR(Application, "Essays", Essay)

    Set FieldList = New Collection
        FieldList.Add Array("Employer Name", "00Na0000009s14Y_ileinner")
        FieldList.Add Array("Title", "00Na0000009s14c_ileinner")
        FieldList.Add Array("Description", "00Na0000009s14b_ileinner")
        FieldList.Add Array("City", "00Na0000009s14W_ileinner")
        FieldList.Add Array("Country", "00Na0000009s14X_ileinner")
        FieldList.Add Array("Start", "00Na0000009s14e_ileinner")
        FieldList.Add Array("End", "00Na0000009s14Z_ileinner")
    
    Debug.Print "Moving on to Xperience section"
    Essay = PageInfoF(Application, "Experience")
    
    Application = PageInfo_RR(Application, "Has Experience?", Array(False, 0))
    If IsArray(Essay(0)) Then
    If left(Essay(0)(1), 3) = "a1f" Then
        For i = 0 To UBound(Essay)
            Essay(i) = Retrieve_Page_Info((Essay(i)(1)), FieldList)
        Next i
        Application = PageInfo_RR(Application, "Has Experience?", Array(True, 1))
        Application = PageInfo_RR(Application, "Experience", Essay)
    End If
    End If
    
    Set FieldList = New Collection
        FieldList.Add Array("First Name", "00Na0000009qBTt_ileinner")
        FieldList.Add Array("Middle Name", "00Na0000009qBKs_ileinner")
        FieldList.Add Array("Last Name", "00Na0000009qBU3_ileinner")
    Essay = PageInfoF(Application, "Person_Info")
    For i = 0 To UBound(Essay)
        If PageInfoF(Essay(i), "Role")(0) = "Student" Then
            Application = PageInfo_RR(Application, "PersonInfo", Retrieve_Page_Info((Essay(i)(1)), FieldList))
        End If
    Next i

HFA_Add_App = Application
End Function
 
Private Function OmniHousing(EngagementID As String)
Dim URL As String
Dim IE As Object
Dim PAXHousing(50) As Variant
Dim NavResult As Boolean
Dim Notification As Collection
Dim Accommodation As Collection
Dim Assessment As Collection
Dim IsMissing As Boolean
Dim HousingStatus As String
Dim TransparencyStatus As String
Dim EngagementPlanStatus As String
Dim MatchStatus As String
Dim Fi3ld As Object
Dim Skipper As String
Dim emergencyexit As Boolean
Dim PageUpdates As Collection
Dim WorkerIE As Object
Dim FieldList As Variant
Dim TaskFound As Boolean
Dim StatusTable As Collection
 
    PAXHousing(0) = Array("Engagement", "Engagement ID", "ID", "_lkid", Array(EngagementID), "")
    PAXHousing(1) = Array("Engagement", "Status", "Field", "00Na0000009s14S", Array(""), "")
    PAXHousing(2) = Array("Engagement", "Placement Status", "Field", "00Na000000B2Fr2", Array(""), "")
    PAXHousing(3) = Array("Engagement", "Start Date", "Field", "00Na0000009s14D", Array(""), "")
    PAXHousing(4) = Array("Engagement", "Accommodation Plan Status", "Field", "00N1B00000BLynM", Array(""), "")
    PAXHousing(5) = Array("Engagement", "Notification", "List", "", Array(""), "")
    PAXHousing(6) = Array("Engagement", "Accommodation", "List", "", Array(""), "")
    PAXHousing(7) = Array("Engagement", "Assessment", "List", "", Array(""), "")
    PAXHousing(8) = Array("", "", "", "", Array(""), "")
    PAXHousing(9) = Array("", "", "", "", Array(""), "")
    PAXHousing(10) = Array("", "", "", "", Array(""), "")
    PAXHousing(11) = Array("Notification", "Notificaiton ID", "ID", "_lkid", Array(""), "")
    PAXHousing(12) = Array("Notification", "Housing Plan", "Field", "CF00Na000000B379K_lkid", Array(""), "")
    PAXHousing(13) = Array("Notification", "Status", "Field", "00Na000000B2KhX", Array(""), "")
    PAXHousing(14) = Array("Notification", "Body", "Field", "00Na0000009s14p", Array(""), "")
    PAXHousing(15) = Array("", "", "", "", Array(""), "")
    PAXHousing(16) = Array("Housing Plan", "Housing Plan ID", "ID", "_lkid", Array(""), "")
    PAXHousing(17) = Array("Housing Plan", "Status", "Field", "00Na000000B2KgF", Array(""), "")
    PAXHousing(18) = Array("Housing Plan", "Rejection Reason", "Field", "00Na000000B369A", Array(""), "")
    PAXHousing(19) = Array("Housing Plan", "Accommodation Plan", "Field", "00N1300000BLbZG", Array(""), "")
    PAXHousing(20) = Array("Housing Plan", "Accommodation Option", "Field", "CF00N1300000BLbZF_lkid", Array(""), "")
    PAXHousing(21) = Array("Housing Plan", "Housing Type", "Field", "00Na000000B3D66", Array(""), "")
    PAXHousing(22) = Array("Housing Plan", "Housing Business", "Field", "00Na000000B3D65", Array(""), "")
    PAXHousing(23) = Array("Housing Plan", "Street", "Field", "00Na000000B34SF", Array(""), "")
    PAXHousing(24) = Array("Housing Plan", "Street 2", "Field", "00Na000000B34SE", Array(""), "")
    PAXHousing(25) = Array("Housing Plan", "City", "Field", "00Na000000B34S5", Array(""), "")
    PAXHousing(26) = Array("Housing Plan", "State", "Field", "00Na000000B34SD", Array(""), "")
    PAXHousing(27) = Array("Housing Plan", "Zip", "Field", "00Na000000B34SC", Array(""), "")
    PAXHousing(28) = Array("Housing Plan", "Landlord Name", "Field", "00N1300000BLbZK", Array(""), "")
    PAXHousing(29) = Array("Housing Plan", "Landlord Phone", "Field", "00N1300000BLbZJ", Array(""), "")
    PAXHousing(30) = Array("Housing Plan", "Landlord Email", "Field", "00N1300000BLbZI", Array(""), "")
    PAXHousing(31) = Array("Housing Plan", "Landlord Website", "Field", "00N1300000BLbZL", Array(""), "")
    PAXHousing(32) = Array("", "", "", "", Array(""), "")
    PAXHousing(33) = Array("Accommodation", "Accommodation ID", "ID", "_lkid", Array(""), "")
    PAXHousing(34) = Array("Accommodation", "is Planned", "Field", "00N1300000BLnhT", Array(""), "")
    PAXHousing(35) = Array("Accommodation", "Housing Validation", "Field", "CF00N1300000BLnhS_lkid", Array(""), "")
    PAXHousing(36) = Array("Accommodation", "Housing Site", "Field", "CF00N30000009ot87_lkid", Array(""), "")
    PAXHousing(37) = Array("", "", "", "", Array(""), "")
    PAXHousing(38) = Array("Housing Validation", "Housing Validation", "ID", "_lkid", Array(""), "")
    PAXHousing(39) = Array("Housing Validation", "Performed By", "Field", "00Na000000B2Kfy", Array(""), "")
    PAXHousing(40) = Array("Housing Validation", "Status", "Field", "00Na000000B2KgF", Array(""), "")
    PAXHousing(41) = Array("Housing Validation", "Completed Date", "Field", "00N1300000BLZwS", Array(""), "")
    PAXHousing(42) = Array("Housing Validation", "Completed with Note", "Field", "00N1300000BLnhb", Array(""), "")
    PAXHousing(43) = Array("Housing Validation", "Overall Assessment", "Field", "00Na000000B2Kfj", Array(""), "")
    PAXHousing(44) = Array("Housing Validation", "Rejection Reason", "Field", "00Na000000B369A", Array(""), "")
    PAXHousing(45) = Array("", "", "", "", Array(""), "")
    PAXHousing(46) = Array("", "", "", "", Array(""), "")
    PAXHousing(47) = Array("", "", "", "", Array(""), "")
    PAXHousing(48) = Array("", "", "", "", Array(""), "")
    PAXHousing(49) = Array("", "", "", "", Array(""), "")
    PAXHousing(50) = Array("", "", "", "", Array(""), "")
 
   
If left(EngagementID, 3) = "a0d" Then
    NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID)
    emergencyexit = False
     
        
    '(0)Record (1)Field Name (2)Type (3)FieldID (4)Value (5)Notes
    For i = 0 To UBound(PAXHousing)
        If PAXHousing(i)(0) = "Engagement" Then
            If PAXHousing(i)(2) = "Field" Then
            PAXHousing(i)(4) = TAGorAnchor(Fetch_Fields(IE, (PAXHousing(i)(3) & "_ileinner")))
            End If
         
            If PAXHousing(i)(2) = "List" And PAXHousing(i)(1) = "Notification" Then
            Set Notification = Pull_Master_Child(EngagementID, "CF00Na000000B2KhT", "a1g")
                IsMissing = True
                If Notification(2).count > 1 Then
                    For j = 2 To Notification.count
                        Debug.Print "Notification #" & j & Notification(j)(2)(0) & " | " & Notification(j)(3)(0)
                        If Notification(j)(3)(0) = "Housing Plan" Then
                        PAXHousing(11)(4) = Array(Notification(j)(2)(1))
                        PAXHousing(5)(4) = Array(Notification(j)(2)(1))
                        IsMissing = False
                        End If
                    Next j
                End If
                    If IsMissing Then
                    PAXHousing(11)(4) = Array("000000000000000")
                    PAXHousing(16)(4) = Array("000000000000000")
                    PAXHousing(5)(4) = Array("000000000000000")
                    PAXHousing(11)(5) = "missing"
                    'i = UBound(PAXHousing)
                    End If
                Debug.Print PAXHousing(11)(4)(0)
           End If
         
            If PAXHousing(i)(2) = "List" And PAXHousing(i)(1) = "Assessment" Then
            Set Assessment = Pull_Master_Child(EngagementID, "CF00Na000000B2Kf5", "a1l")
                IsMissing = True
                If Assessment(2).count > 1 Then
                    For j = 2 To Assessment.count
                    Debug.Print "Assessment: " & Assessment(j)(1)(0) & " | " & Assessment(j)(3)(0)
                        If Assessment(j)(3)(0) = "WT PT Housing Plan" Then
                        PAXHousing(16)(4) = Array(Assessment(j)(1)(1))
                        PAXHousing(7)(4) = Array(Assessment(j)(1)(1))
                        IsMissing = False
                        End If
                    Next j
                End If
                    If IsMissing Then
                    PAXHousing(16)(4) = Array("000000000000000")
                    PAXHousing(7)(4) = Array("Could not find housing plan assessment")
                    PAXHousing(16)(5) = "missing"
                    End If
            End If
         
            If PAXHousing(i)(2) = "List" And PAXHousing(i)(1) = "Accommodation" Then
            Set Accommodation = Pull_Master_Child(EngagementID, "CF00Na000000B2kKt", "a0T")
                IsMissing = True
     
                If Accommodation(2).count > 4 Then
                    For j = 2 To Accommodation.count
                        Debug.Print "This accommodation isplanned status is " & Accommodation(j)(5)(0)
                        If Accommodation(j)(5)(0) = "CHECKED" Then
                        PAXHousing(33)(4) = Array(Accommodation(j)(1)(1))
                        PAXHousing(6)(4) = Array(Accommodation(j)(1)(1))
                        IsMissing = False
                        End If
                    Next j
                End If
                  
            End If
        'end engagement section
        End If
     
        If PAXHousing(i)(0) <> "Engagement" And PAXHousing(i)(0) <> "" Then
            If PAXHousing(i)(1) = "Housing Plan ID" Then
            PAXHousing(16)(4) = PAXHousing(12)(4)
            End If
         
                'Run One true validation if housing plan comes from HC based accommodation option
                    If i = 21 And left(PAXHousing(20)(4)(0), 3) = "a1p" And PAXHousing(33)(4)(0) <> "000000000000000" Then
                        PAXHousing(35)(4)(0) = FindOneTrueValidation((PAXHousing(33)(4)(0)), True)
                            Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/" & (PAXHousing(33)(4)(0)) & "/e?")
                            Set PageUpdates = New Collection
                            PageUpdates.Add Array("CF00N1300000BLnhS_lkid", (PAXHousing(35)(4)(0)))
                            Call PushUpdates2Page(WorkerIE, PageUpdates)
                        WorkerIE.Quit
                        Set WorkerIE = Nothing
                    End If
            
            If i = 37 And IsMissing Then
                PAXHousing(33)(4) = Array(HousingPlan_CreateAccommodation(EngagementID))
            End If
            If i = 38 And PAXHousing(11)(4)(0) <> "000000000000000" Then
             'This section tries to DeDup and properly catalogue the PAX then create a new validation
                 'this does not run if an accommodation was created using the trip.
                 
                If PAXHousing(33)(4)(0) = "000000000000000" And PAXHousing(17)(4)(0) = "Complete" Then
                'create an accommodation for confirmed housing plans
                    Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/a0T/e?00N1300000BQr6R=0&00N1300000BLnhT=1")
                        Set PageUpdates = New Collection
                            PageUpdates.Add Array("CF00Na000000B2kKt_lkid", EngagementID)
                            PageUpdates.Add Array("00N1300000BLnhT", "1")
                            PageUpdates.Add Array("00N1300000BQr6R", "0")
                            PageUpdates.Add Array("00N1300000BLnhT", "1")
                            PageUpdates.Add Array("CF00N30000009ot87_lkid", "a0c1B00000EgUFO")
                            PageUpdates.Add Array("CF00N1300000BLnhN_lkid", PAXHousing(16)(4)(0))
                            PageUpdates.Add Array("00N30000008RH1X", "Accommodation Created for Complete Housing Plan")
                    PAXHousing(33)(4) = Array(Right(PushUpdates2Page(WorkerIE, PageUpdates), 15))
                End If
                
                 If PAXHousing(23)(4)(0) <> "" And PAXHousing(33)(4)(0) <> "000000000000000" And (PAXHousing(33)(4)(0)) <> "" Then
                    PAXHousing(36)(4)(0) = Housing_Proccess_Housing_Plan((PAXHousing(16)(4)(0)))
                        Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/" & (PAXHousing(33)(4)(0)) & "/e?")
                        Set PageUpdates = New Collection
                        PageUpdates.Add Array("CF00N30000009ot87_lkid", (PAXHousing(36)(4)(0)))
                        Call PushUpdates2Page(WorkerIE, PageUpdates)
                     
                    PAXHousing(35)(4)(0) = FindOneTrueValidation((PAXHousing(33)(4)(0)), True)
                        Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/" & (PAXHousing(33)(4)(0)) & "/e?")
                        Set PageUpdates = New Collection
                        PageUpdates.Add Array("CF00N1300000BLnhS_lkid", (PAXHousing(35)(4)(0)))
                        Call PushUpdates2Page(WorkerIE, PageUpdates)
                    WorkerIE.Quit
                 End If
            
                PAXHousing(38)(4) = PAXHousing(35)(4)
                If Len(PAXHousing(35)(4)(0)) < 15 Or (PAXHousing(35)(4)(0)) = "000000000000000" Then
                    PAXHousing(38)(5) = "missing"
                End If
            End If
          
            If PAXHousing(i)(2) = "ID" Then
            Debug.Print "housing id (" & i & ") is " & PAXHousing(i)(4)(0)
            'And PAXHousing(i)(5) <> "missing"
                If PAXHousing(i)(4)(0) <> "000000000000000" And PAXHousing(i)(4)(0) <> "" Then
                    Debug.Print "Navigating to new object"
                    NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & (PAXHousing(i)(4)(0)) & "/e?")
                Else
                    Skipper = PAXHousing(i)(0)
                End If
            End If
         
            If PAXHousing(i)(2) = "Field" And PAXHousing(i)(5) <> "missing" And PAXHousing(i)(0) <> Skipper Then
            PAXHousing(i)(4) = Array(Fetch_Fields(IE, (PAXHousing(i)(3))).Value)
            End If
        End If
        If PAXHousing(i)(0) <> "" Then
        Debug.Print "(" & i & ") " & PAXHousing(i)(0) & PAXHousing(i)(1) & PAXHousing(i)(2) & PAXHousing(i)(3) & PAXHousing(i)(4)(0)
        End If
    Next i
    
    
    If PAXHousing(11)(5) = "missing" Then
        If PAXHousing(33)(4)(0) = "" Then
            HousingStatus = "01.0"
        Else
            HousingStatus = "01.1"
        End If
    End If
    If PAXHousing(13)(4)(0) = "Not Initiated" Then
    HousingStatus = "02.0"
    End If
    If PAXHousing(17)(4)(0) = "Not Yet Started" Then
    HousingStatus = "03.0"
    End If
    If PAXHousing(17)(4)(0) = "Incomplete" Then
    HousingStatus = "04.1"
        If PAXHousing(18)(4)(0) <> "" Then
        HousingStatus = "04.2"
        End If
        If PAXHousing(38)(4)(0) <> "000000000000000" Then
        HousingStatus = "04.3"
        End If
    End If
    If PAXHousing(17)(4)(0) = "Complete" Then
        HousingStatus = "05.0"
    End If
    If PAXHousing(17)(4)(0) = "Confirmed" Then
        If PAXHousing(33)(4)(0) <> "000000000000000" Then
                HousingStatus = "06.1"
        Else
            If PAXHousing(17)(4)(0) = "Finalizing" Or PAXHousing(17)(4)(0) = "Actively searching" Then
                HousingStatus = "06.2"
            Else
                HousingStatus = "05.9"
            End If
        End If
    End If
    If left(PAXHousing(38)(4)(0), 3) = "a1l" Then
        If PAXHousing(41)(4)(0) = "" Then
        HousingStatus = "07.0"
        End If
       
        If PAXHousing(41)(4)(0) <> "" Then
        HousingStatus = "08.1"
            If PAXHousing(42)(4)(0) <> "" Then
            HousingStatus = "08.2"
            End If
        End If
       
        If PAXHousing(40)(4)(0) = "Complete" Then
        HousingStatus = "09.0"
        End If
       
        If PAXHousing(40)(4)(0) = "Confirmed" Then
        HousingStatus = "10.0"
        End If
       
        If PAXHousing(40)(4)(0) = "Confirmed" & PAXHousing(43)(4)(0) = "Rejected" Then
        HousingStatus = "11.0"
        End If
       
        If PAXHousing(40)(4)(0) = "Incomplete" Then
        HousingStatus = "12.0"
        End If
    End If
    
    Set StatusTable = New Collection
        StatusTable.Add Array("01.0", "Housing Notification not Created.", "Awaiting Notification.", "Awaiting Notification.")
        StatusTable.Add Array("01.1", "Housing Notification not Created but Trip has housing.", "Awaiting Notification / Housing found on Trip.", "Awaiting Notification.")
        StatusTable.Add Array("02.0", "Housing Notification is not initiated. (check match status?)", "Notification not initiated.", "Awaiting Notification.")
        StatusTable.Add Array("03.0", "Housing Plan has not been started by PAX.", "Housing Plan is Not Started", "Housing Plan Status: Not Started")
        StatusTable.Add Array("04.0", "Housing Plan is incomplete.", "Housing Plan is Incomplete", "Housing Plan Status: Working")
        StatusTable.Add Array("04.1", "Housing Plan is incomplete.   Rejection: " & PAXHousing(18)(4)(0), "Housing Plan is Incomplete", "Housing Plan Status: Working")
        StatusTable.Add Array("04.2", "Housing Plan is incomplete.  Previous housing was rejected by validator.", "Housing Plan is Incomplete", "Housing Plan Status: Working")
        StatusTable.Add Array("05.0", "Housing Plan is complete and awaiting confirmation.", "Housing Plan is Complete not yet Confirmed", "Housing Plan Status: In-Review")
        StatusTable.Add Array("06.1", "Housing Plan is confirmed but validation has not been initiated.", "Housing Plan is Pending", "Housing Validation Stage: Prospecting")
        StatusTable.Add Array("06.2", "Housing Plan is confirmed, but plan is " & PAXHousing(17)(4)(0), "Housing Plan is Pending", "Housing Plan Status: In-Review")
        StatusTable.Add Array("05.9", "Housing Plan is confirmed but no accommodation was created.", "Housing Plan is Pending", "Housing Plan Status: In-Review")
        StatusTable.Add Array("07.0", "Housing Validation is awaiting Google search.", "Housing Validation Stage: Prospecting", "Housing Validation Stage: Prospecting")
        StatusTable.Add Array("08.0", "Housing Validation is awaiting call with Landlord.", "Housing Validation Stage: Review", "Housing Validation Stage: Review")
        StatusTable.Add Array("08.1", "Housing Validation is awaiting call with Landlord.", "Housing Validation Stage: Review", "Housing Validation Stage: Review")
        StatusTable.Add Array("08.2", "Housing Validation is awaiting call with Landlord.   Note: " & PAXHousing(42)(4)(0), "Housing Validation Stage: Qualified", "Housing Validation Stage: Qualified")
        StatusTable.Add Array("09.0", "Housing Validation is complete but awaiting final approval.  " & PAXHousing(39)(4)(0) & " / " & PAXHousing(42)(4)(0), "Housing Validation Stage: Prospecting", "Housing Validation Stage: Prospecting")
        StatusTable.Add Array("10.0", "Housing Validation has been approved.  Note: " & PAXHousing(39)(4)(0) & " / " & PAXHousing(42)(4)(0), "Housing Validation Stage: Closed Won", "Housing Validation Stage: Closed Won")
        StatusTable.Add Array("11.0", "Housing Validation has been rejected.  " & PAXHousing(44)(4)(0), "Housing Validation Stage: Closed Lost", "Housing Validation Stage: Closed Lost")
        StatusTable.Add Array("12.0", "Housing Validation requires further follow-up due to popularity.  " & PAXHousing(44)(4)(0), "Housing Validation needs followup regarding popularity", "Housing Validation Stage: Prospecting")
    
    
    For k = 1 To StatusTable.count
    Debug.Print HousingStatus & " = " & StatusTable(k)(0)
        If HousingStatus = (StatusTable(k)(0)) Then
            TransparencyStatus = (StatusTable(k)(1))
            EngagementPlanStatus = (StatusTable(k)(2))
            MatchStatus = (StatusTable(k)(3))
            k = StatusTable.count + 1
        End If
    Next k
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID & "/e?")
        Set PageUpdates = New Collection
        PageUpdates.Add Array("00N1B00000BLynM", EngagementPlanStatus)
        Call PushUpdates2Page(IE, PageUpdates, True)
    
    'old engagement update
    If 1 = 2 Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID & "/e?")
        Set PageUpdates = New Collection
        PageUpdates.Add Array("00N1B00000BLynM", HousingStatus)
        Call PushUpdates2Page(IE, PageUpdates)
    End If
    
    'find report
    Set PageUpdates = Pull_Master_Child(EngagementID, "Task", "00T")
        If UBound(PageUpdates(2)(1)) < 1 Then
            TaskFound = False
        Else
            URL = ""
            For i = 2 To PageUpdates.count
                If PageUpdates(i)(2)(0) = "PAHR Transparency Report" Then
                    URL = PageUpdates(i)(1)(1)
                    i = PageUpdates.count + 1
                End If
            Next i
            If URL = "" Then
                TaskFound = False
            Else
                TaskFound = True
            End If
        End If
        
        'prep info to be udpated
        Set PageUpdates = New Collection
        Set WorkerIE = Nothing
        If TaskFound = False Then
            Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/00T/e?&RecordType=01230000000seeI&ent=Task")
                PageUpdates.Add Array("tsk3_lkid", EngagementID)
                PageUpdates.Add Array("tsk10", "Housing Transparency")
                PageUpdates.Add Array("tsk5", "PAHR Transparency Report")
                PageUpdates.Add Array("reminder_select_check", "0")
                PageUpdates.Add Array("tsk12", "Not Started")
                PageUpdates.Add Array("tsk13", "Low")
                PageUpdates.Add Array("00Na0000009rURo", "Pre-Arrival Housing")
        Else
            Call opNAV(WorkerIE, "nav", "https://na68.salesforce.com/" & URL & "/e")
        End If
            PageUpdates.Add Array("tsk6", TransparencyStatus)
            PageUpdates.Add Array("tsk4", Format(Now(), "mm/dd/yyyy"))
        Call PushUpdates2Page(WorkerIE, PageUpdates, True)
        WorkerIE.Quit
            
    IE.Quit
    Set IE = Nothing
    Set WorkerIE = Nothing
End If
'do nothing if the engagementid is not an engagement id
End Function
Private Function HousingPlan_CreateAccommodation(EngagementID As String) As String
Dim ObjList As Collection
Dim FieldList As Collection
Dim PAX As Variant
Dim UseHousingPlan As Boolean
Dim IE As Object

Debug.Print "Look for Trips"

PAX = Array("", "", "Landlord", "Address")

Set ObjList = Pull_Master_Child(EngagementID, "CF00Na000000B2KbB", "a0O")
    If UBound(ObjList(2)(1)) > 0 Then
        Set FieldList = New Collection
            FieldList.Add Array("Street", "00N1300000BCX5l_ileinner")
            FieldList.Add Array("City", "00N1300000BCX5g_ileinner")
            FieldList.Add Array("State", "00N1300000BCX5j_ileinner")
            FieldList.Add Array("Zip", "00N1300000BCX5i_ileinner")
            FieldList.Add Array("Mod", "LastModifiedBy_ileinner")
        PAX(0) = Retrieve_Page_Info((ObjList(2)(1)(1)), FieldList)
    Else
        PAX(0) = Array("No Trip", "n0Tr1p", Array(Array("Street", "##", Array("", ""))))
    End If
    
Set ObjList = Pull_Master_Child(EngagementID, "CF00Na000000B2Kf5", "a1l")
    Set FieldList = New Collection
        FieldList.Add Array("Street", "00Na000000B34SF_ileinner")
        FieldList.Add Array("City", "00Na000000B34S5_ileinner")
        FieldList.Add Array("State", "00Na000000B34SD_ileinner")
        FieldList.Add Array("Zip", "00Na000000B34SC_ileinner")
        FieldList.Add Array("Mod", "LastModifiedBy_ileinner")
        FieldList.Add Array("Landlord Name", "00N1300000BLbZK_ileinner")
        FieldList.Add Array("Landlord Phone", "00N1300000BLbZJ_ileinner")
        FieldList.Add Array("Landlord Email", "00N1300000BLbZI_ileinner")

    For i = 2 To ObjList.count
        If ObjList(i)(3)(0) = "WT PT Housing Plan" Then
            Debug.Print ObjList(i)(1)(0) & " is " & ObjList(i)(1)(1)
            PAX(1) = Retrieve_Page_Info((ObjList(i)(1)(1)), FieldList)
        End If
    Next i
    
'Figure out which one to use PAX(0) is the trip and Pax(1) is the housing plan
Debug.Print "Trip Street = " & PageInfoF(PAX(0), "Street")(0) & " | Plan Street = " & PageInfoF(PAX(1), "Street")(0)

If PageInfoF(PAX(0), "Street")(0) <> "" Then
    If PageInfoF(PAX(1), "Street")(0) = "" Then
        UseHousingPlan = False
    Else
        If CDate(PageInfoF(PAX(1), "Mod")(2)) > CDate(PageInfoF(PAX(0), "Mod")(2)) Then
            UseHousingPlan = True
        Else
            UseHousingPlan = False
        End If
    End If
Else
    UseHousingPlan = True
End If

'setup the landlord and address information
If UseHousingPlan Then
    Debug.Print "Street value = " & PageInfoF(PAX(1), "Street")(0)
    PAX(2) = Housing_Landlord_DeDup_Search((PageInfoF(PAX(1), "Landlord Name")(0)), CleanPhone((PageInfoF(PAX(1), "Landlord Phone")(0))), (PageInfoF(PAX(1), "Landlord Email")(0)))
    PAX(3) = AddressParse((PageInfoF(PAX(1), "Street")(0)), "", (PageInfoF(PAX(1), "City")(0)), (PageInfoF(PAX(1), "State")(0)), (PageInfoF(PAX(1), "Zip")(0)))
Else
    PAX(2) = ""
    PAX(3) = AddressParse((PageInfoF(PAX(0), "Street")(0)), "", (PageInfoF(PAX(0), "City")(0)), (PageInfoF(PAX(0), "State")(0)), (PageInfoF(PAX(0), "Zip")(0)))
End If

'Figure out the prime Site
PAX(3) = Housing_Search_for_Prime_Site(PAX(3), (PAX(2)))


Call opNAV(IE, "nav", "https://na68.salesforce.com/a0T/e?00N1300000BQr6R=0&00N1300000BLnhT=1")
Set FieldList = New Collection
    FieldList.Add Array("CF00Na000000B2kKt_lkid", EngagementID)
    FieldList.Add Array("00N1300000BLnhT", "1")
    FieldList.Add Array("00N1300000BQr6R", "0")
    FieldList.Add Array("00N1300000BLnhT", "1")
    FieldList.Add Array("CF00N30000009ot87_lkid", PAX(3))
    FieldList.Add Array("00N30000008RH1X", "Accommodation Created for Housing Plan")
HousingPlan_CreateAccommodation = Right(PushUpdates2Page(IE, FieldList), 15)

End Function
Private Function opNAV(IEinstance As Object, Instruction As String, Optional URL As String = "") As Boolean
Dim Counter As Double
Dim Info As String
Dim TimetoWait As Date
Dim StartTime As Date
Dim TimeOut As Date
Dim StartTitle As String
Dim CurrentTitle As String
Dim PageLoading As Boolean
Dim PagelengthOLD As Double
Dim PagelengthNEW As Double
Dim Navigate As Boolean
Dim IsQA As Boolean



If UCase(Instruction) = "NAV" Or UCase(Instruction) = "QA" Then
Navigate = True
Else
Navigate = False
End If

If UCase(Instruction) = "QA" Then
IsQA = True
Else
IsQA = False
End If
  
    StartTime = Now()
    TimeOut = StartTime + 0.00104
    TimetoWait = 0.00000058
    'TimetoWait = #12:00:01 AM#
   'Debug.Print "Time to wait = " & Now() + TimetoWait
    'Debug.Print "Will be complete at: " & Format(Now() + TimetoWait, "dd/mm/yyyy hh:nn:ss")
    Counter = 0
    PageLoading = True
    PagelengthOLD = 1
  
    If IEinstance Is Nothing Then
        Set IEinstance = CreateObject("InternetExplorer.Application")
        IEinstance.Visible = False
        Debug.Print "New IE application was initialized"
    End If
  
'IEinstance.Visible = True
If Navigate Then
    Do While PageLoading And Now() < TimeOut
        If URL <> "" Then
            IEinstance.Navigate URL
            
            If ExtraSafeBrowsingControl(IEinstance, URL) Then
                opNAV = True
            Else
                opNAV = False
            End If
            
            
            If InStr(1, URL, "https://c.na68.visual.force.com/apex/DocViewer?", vbTextCompare) > 0 Then 'doesn't wait for page on imageviewer
                Debug.Print "Image view launched"
                Application.Wait (Now() + TimetoWait)
                PageLoading = False
            Else
              Do While IEinstance.busy And Now() < TimeOut
                  Application.Wait (Now() + TimetoWait)
              Loop
              
              
              Do While IEinstance.readystate <> 4 And Now() < TimeOut
                  Application.Wait (Now() + TimetoWait)
              Loop
              
              If IsQA Then
              Else
                If InStr(1, URL, ".visual.force.com/apex/WT", vbTextCompare) = 0 Then 'guard for docusign
                If IsObject(IEinstance.document.Title) Then
                  Do While IEinstance.document.Title = "" And Now() < TimeOut
                      Application.Wait (Now() + TimetoWait)
                  Loop
                
                  Do While IEinstance.document.Title = StartTitle And Now() < TimeOut
                      Application.Wait (Now() + TimetoWait)
                  Loop
                End If
                End If
              End If
            
              Do While PageLoading And Now() < TimeOut
                  PagelengthNEW = Len(IEinstance.document.Body.innerhtml)
                  If PagelengthNEW = PagelengthOLD Then
                      PageLoading = False
                  Else
                      Application.Wait (Now() + TimetoWait)
                      PagelengthOLD = PagelengthNEW
                  End If
              Loop
            End If
  
            
        Else
            Info = Info & " bad URL "
        End If
   
    If InStr(1, IEinstance.LocationURL, "https://login.salesforce.com/", vbTextCompare) Then
        Call CheckifLoggedin
        PageLoading = True
    End If
   
    Loop
End If

If UCase(Instruction) = "QUIT" Then
    IEinstance.Quit
    Set IEinstance = Nothing
End If

If PageLoading Then
Info = "Page took too long to load.  "
Else
Info = ""
End If
Info = Info & " | Renedered in " & Format(Now() - StartTime, "nn:ss") & " | " & URL
Debug.Print Info
'opNAV = PageLoading
End Function
Private Function opNAV2(IEinstance As Object, Instruction As String, Optional URL As String = "") As Boolean
Dim Counter As Double
Dim Info As String
Dim TimetoWait As Date
Dim StartTime As Date
Dim TimeOut As Date
Dim StartTitle As String
Dim CurrentTitle As String
Dim PageLoading As Boolean
Dim PagelengthOLD As Double
Dim PagelengthNEW As Double
  
    StartTime = Now()
    TimeOut = StartTime + 0.00104
    TimetoWait = 0.00000058
    'TimetoWait = #12:00:01 AM#
   'Debug.Print "Time to wait = " & Now() + TimetoWait
    'Debug.Print "Will be complete at: " & Format(Now() + TimetoWait, "dd/mm/yyyy hh:nn:ss")
    Counter = 0
    PageLoading = True
    PagelengthOLD = 1
  
    If IEinstance Is Nothing Then
        Set IEinstance = CreateObject("InternetExplorer.Application")
        IEinstance.Visible = False
        Debug.Print "New IE application was initialized"
    End If
  
Do While PageLoading And Now() < TimeOut
    If Instruction = "nav" Or Instruction = "NAV" Then
        If URL <> "" Then
            IEinstance.Navigate URL
            
            
            Do While IsPageStillLoading(IEinstance) And Now() < TimeOut
                Application.Wait (Now() + TimetoWait)
            Loop
          
            Do While PageLoading And Now() < TimeOut
                PagelengthNEW = Len(IEinstance.document.Body.innerhtml)
                If PagelengthNEW = PagelengthOLD Then
                    PageLoading = False
                Else
                    Application.Wait (Now() + TimetoWait)
                    PagelengthOLD = PagelengthNEW
                End If
            Loop
  
            
        Else
            Info = Info & " bad URL "
        End If
    End If
   
    If InStr(1, IEinstance.LocationURL, "https://login.salesforce.com/", vbTextCompare) Then
        Call CheckifLoggedin
        PageLoading = True
    End If
   
Loop
If PageLoading Then
Info = "Page took too long to load.  "
Else
Info = ""
End If
Info = Info & " | Renedered in " & Format(Now() - StartTime, "nn:ss") & " | " & URL
Debug.Print Info
opNAV = PageLoading
End Function
Private Function IsPageStillLoading(IE As Object) As Boolean
IsPageStillLoading = True
Dim ReportLoader As Boolean
Dim PageInfo As Object

ReportLoader = False
On Error GoTo PageStillLoading
'IE.Visible = True
If IE.busy = False Then
ReportLoader = False
    If IsObject(IE.document) Then
        If IsObject(IE.document.Body) Then
            'Debug.Print "Has body"
            PageCount = Len(IE.document.Body.innerhtml)
            If PageCount > 2000 Then
                'If IE.document.Title = "" Then
                'End If
                
                If False Then
                If IsObject(IE.document.getelementsbyclassname("loading-item")) Then
                    If IsObject(IE.document.getelementsbyclassname("loading-item")(0).getelementsbyclassname("loading-spinner")) Then
                        ReportLoader = True
                        Debug.Print "Spinner Found!!!"
                    End If
                End If
                End If
                
                If ReportLoader = False Then
                    Set PageInfo = IE.document.getelementsbytagname("div")
                    IsPageStillLoading = False
                    
                End If
                    'Debug.Print IE.document.body.innerhtml
                    'Application.Wait (Now + #12:00:10 AM#)
            Else
                Debug.Print "not enough characters"
            End If
        End If
    End If
End If

PageStillLoading:
End Function
Private Function ExtraSafeBrowsingControl(IE As Object, URL As String) As Boolean
Dim eLog As New Collection
Dim TimeOut As Date
Dim CycleLock As Boolean
Dim StartTime As Date
Dim ReloadCounter As Double
Dim CycleCounter As Double

StartTime = Now()
TimeOut = StartTime + TimeValue("00:00:04")

CycleLock = True
ReloadCounter = 0

ExtraSafeBrowsingControl = True

Do While CycleLock
    CycleCounter = CycleCounter + 1
    If IsPageStillLoading(IE) = False Then
        CycleLock = False
    End If
    
    If Now() > TimeOut Then
        'IE.Visible = True
        IE.Navigate URL
        TimeOut = Now() + TimeValue("00:00:015")
        ReloadCounter = ReloadCounter + 1
        'Debug.Print "Reloading page"
        eLog.Add "Trying To reload Page"
    End If
    
    If ReloadCounter > 2 Then
        CycleLock = False
        eLog.Add "Failed to load page: " & URL
        IE.Navigate "Google.com"
        ExtraSafeBrowsingControl = False
    End If
Loop

Debug.Print Collection2String(eLog, True)

End Function

Private Sub Housing_InquireAboutApartment_Master(EngagementID As String, Optional AssessmentID As String = "")
Dim IE As Object
Dim URL As String
Dim PAXInfo As Variant
Dim CasePack As Variant
Dim Caseinfo As Collection
Dim FunctionResults As String
Dim NavigationResult As Boolean
Dim CaseID As String
Dim HousingInstructions As Variant
Dim ePAX As Variant

 
PAXInfo = PAHR_CollectInfo(EngagementID, "Case")

PAXInfo = Housing_InquireAboutApartment_ProccessCase(PAXInfo)

If PageInfoF(PAXInfo, "Needs Email?")(0) = "False" Then
    'find prime site and get criteria
    PAXInfo = PageInfo_RR(PAXInfo, "Housing", Housing_Address_Instructions((PageInfoF(PAXInfo, "IsCurrent Accommodation")(1))))
    Debug.Print
    'evaluate housing
    HousingInstructions = PageInfoF(PageInfoF(PAXInfo, "Housing"), "Prime Site")
    
    If InStr(1, (PageInfoF(HousingInstructions, "Reporting Requirement")(0)), "need unit", vbTextCompare) Then
        If PageInfoF(PageInfoF(PAXInfo, "Housing"), "Address Parse")(16) Then
            'requirements met
        Else
            'address is still an issue
        End If
    End If
    'possibly set email to true
End If

ePAX = PAXn2Legacy(PAXInfo)

ePAX = AddTemplate(ePAX, FetchEmailTemplate("00X1B000001qZKF"))
ePAX(39, 1) = PageInfoF(PAXInfo, "Missing Unit Case")(1)
Debug.Print "Case should be at " & ePAX(39, 2)
ePAX(3, 2) = Replace(ePAX(3, 2), "Case: https://na68.salesforce.com/", "Case: https://na68.salesforce.com/" & ePAX(39, 2), 1, , vbTextCompare)
 
    Set Caseinfo = New Collection
    Caseinfo.Add Array("00N1300000BLavQ", ePAX(40, 1))
    Caseinfo.Add Array("00N1300000BLavV", "Wait for PAX to submit a new Address")
Call Send_HTMLEmail(ePAX, "NoReply", Caseinfo)
 
'mark assessment as email sent
If AssessmentID <> "" Then
    NavigationResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e?00Na000000B369A=Followup Case at https://na68.salesforce.com/" & PAXInfo(39, 2))
    NavigationResult = HitSave(IE)
End If
 
Call opNAV(IE, "quit")
End Sub
Private Function Housing_Address_Instructions(SiteID As String) As Variant
Dim FieldList As Collection
Dim Housing As Variant
Dim IE As Object
Dim Package As Variant


Set FieldList = New Collection
    FieldList.Add Array("Street", "00N30000009ot82_ileinner")
    FieldList.Add Array("Unit", "00Na000000B2eGP_ileinner")
    FieldList.Add Array("City", "00N30000009ot7d_ileinner")
    FieldList.Add Array("State", "00N30000009ot7x_ileinner")
    FieldList.Add Array("Zip", "00N30000009ot7s_ileinner")
    FieldList.Add Array("Landlord", "CF00N1300000BLnhG_ileinner")
    FieldList.Add Array("Reporting Requirement", "00N1B00000BLzmP_ileinner")
    FieldList.Add Array("Address Comments", "00N1300000BLnh3_ileinner")
Housing = Retrieve_Page_Info(SiteID, FieldList)



Address = AddressParse((PageInfoF(Housing, "Street")(0)), (PageInfoF(Housing, "Unit")(0)), (PageInfoF(Housing, "City")(0)), (PageInfoF(Housing, "State")(0)), (PageInfoF(Housing, "Zip")(0)))
Package = Housing
Package = PageInfo_RR(Package, "Address Parse", Address)

If Address(15) Then
    Housing = PageInfo_RR(Housing, "Damaged?", Array(True, "1"))
Else
    Housing = Retrieve_Page_Info(Housing_Search_for_Prime_Site(Address, ""), FieldList)
    Housing = PageInfo_RR(Housing, "Blacklist", Array(False, "0"))
    
    If InStr(1, (PageInfoF(Housing, "Address Comments")(0)), "black", vbTextCompare) > 0 Then
        Housing = PageInfo_RR(Housing, "Blacklist", Array(True, "1"))
    Else
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & (PageInfoF(Housing, "Landlord")(1)))
            If FetchField(IE, "00N1300000BLnhy_ileinner")(1) = 1 Then
                Housing = PageInfo_RR(Housing, "Blacklist", Array(True, "1"))
            End If
        Call opNAV(IE, "quit")
    End If
    
    Housing = PageInfo_RR(Housing, "Reporting Requirement", PageInfoF(Housing, "Reporting Requirement"))
    Housing = PageInfo_RR(Housing, "Damaged?", Array(False, "0"))
End If

Package = PageInfo_RR(Package, "Prime Site", Housing)
Housing_Address_Instructions = Package
End Function

Private Function Housing_InquireAboutApartment_ProccessCase(PAXn) As Variant
Dim CasePack As Variant
Dim CaseID As String
Dim IE As Object
Dim Caseinfo As Collection

CasePack = PageInfoF(PAXn, "Cases")

CaseID = ""
If IsArray(CasePack) Then
Debug.Print "Casepack is Valid"
If UBound(CasePack(0)) > 1 Then
    For i = 0 To UBound(CasePack)
    Debug.Print "Existing case: " & PageInfoF(CasePack(i), "Subject")(0) & " | " & PageInfoF(CasePack(i), "Subject")(1)
        If PageInfoF(CasePack(i), "Subject")(0) = "Missing Unit Number Case" Then
            CaseID = PageInfoF(CasePack(i), "Subject")(1)
        End If
    Next i
End If
End If

PAXn = PageInfo_RR(PAXn, "Needs Email?", Array(False, "0"))
Debug.Print "Case is being proccessed as " & CaseID
If CaseID = "" Then
   Call opNAV(IE, "nav", "https://na68.salesforce.com/500/e?&ent=Case&RecordType=012a0000001NbNh&retURL=%2Fa0d1B00000TwpNQQAZ")
     
        Set Caseinfo = New Collection
            Caseinfo.Add Array("cas3_lkid", PageInfoS(PAXn, "Opportunity.Primary Contact")(1))
            Caseinfo.Add Array("CF00Na000000B2eGi_lkid", PageInfoF(PAXn, "Primary Match")(1))
            Caseinfo.Add Array("cas5", "Housing")
            Caseinfo.Add Array("00Na000000B3Ieg", "Amenities (facilities, bed, room,…)")
            Caseinfo.Add Array("cas11", "Web")
            Caseinfo.Add Array("cas7", "Closed")
            Caseinfo.Add Array("cas8", "Low")
            Caseinfo.Add Array("cas14", "Missing Unit Number Case")
            Caseinfo.Add Array("00N1300000BLavV", "Send Reminder Email to PAX")
            Caseinfo.Add Array("CF00Na000000B2eGh_lkid", PAXn(1))
            
            PAXn = PageInfo_RR(PAXn, "Needs Email?", Array(True, "1"))
            
            If AssessmentID <> "" Then
                Caseinfo.Add Array("CF00Na000000B34SG_lkid", AssessmentID)
            End If
    CaseID = PushUpdates2Page(IE, Caseinfo)
    
    Call opNAV(IE, "quit")
End If

If left(CaseID, 3) <> "500" Then
    PAXn = PageInfo_RR(PAXn, "Has Missing Unit Case?", Array(False, "0"))
Else
    PAXn = PageInfo_RR(PAXn, "Missing Unit Case", Collector_CaseUpgrader(CaseID))
    PAXn = PageInfo_RR(PAXn, "Has Missing Unit Case?", Array(True, "1"))
End If

Housing_InquireAboutApartment_ProccessCase = PAXn
End Function
 
Private Sub CheckIn_Followup_on_missing_Unit_Number(EngagementID As String, CaseID As String)
Dim IE As Object
Dim NavResult As Boolean
Dim Accommodations As Collection
Dim IsCurrentID As String
Dim Field As Object
Dim URL As String
Dim Address As Variant
Dim CaseUpdates As Collection
Dim FullAddress As String
Dim SiteID As String
 
Set Accommodations = Pull_Master_Child(EngagementID, "CF00Na000000B2kKt", "a0T")
 
IsCurrentID = ""
 
For i = 2 To Accommodations.count
    If Accommodations(i)(4)(0) = "CHECKED" Then
    IsCurrentID = Accommodations(i)(1)(1)
    End If
Next i
 
If IsCurrentID <> "" Then
    NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & IsCurrentID)
    Set Field = Fetch_Fields(IE, "CF00N30000009ot87_ileinner")
    SiteID = TAGorAnchor(Field)(1)
    NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & SiteID)
    '                   Street                              Street2                 City                        State                       Zip
    Address = Array("00N30000009ot82_ileinner", "00Na000000B2eGP_ileinner", "00N30000009ot7d_ileinner", "00N30000009ot7x_ileinner", "00N30000009ot7s_ileinner")
  
        For i = 0 To UBound(Address)
            Address(i) = Fetch_Fields(IE, (Address(i))).innerhtml
        Next i
  
    If InStr(1, Address(0), Address(1), vbTextCompare) < 1 And Address(1) <> "&nbsp;" Then
        Set CaseUpdates = New Collection
        CaseUpdates.Add Array("00N1300000BLavV", "Unit Found")
        URL = DeConstructAddress((Address(0)), (Address(1)), (Address(2)), (Address(3)), (Address(4)))
        URL = Address(0) & Chr(10) & Address(1) & Chr(10) & Address(2) & ", " & Address(3) & " " & Address(4) & Chr(10) & Chr(10) & "https://na68.salesforce.com/" & SiteID & Chr(10) & Chr(10) & URL
        CaseUpdates.Add Array("cas15", URL)
        CaseUpdates.Add Array("cas7", "Open")
        NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & CaseID & "/e?retURL=" & CaseID)
        'IE.Visible = True
        URL = PushUpdates2Page(IE, CaseUpdates)
        Application.Wait (Now + #12:00:03 AM#)
        'NavResult = HitSave(IE)
        NavResult = opNAV(IE, "nav", "https://na68.salesforce.com/" & CaseID & "/a?newOwn=Cuong&newOwn_lkid=005a000000A7Qwu")
        NavResult = HitSave(IE)
    End If
IE.Quit
Set IE = Nothing
End If
End Sub
 
Private Function Housing_Search_for_Prime_Site(Address As Variant, LandlordID As String) As String
Dim IE As Object
Dim URL As String
Dim NavResult As Boolean
Dim ResultList As Collection
Dim Addresslist As Collection
Dim AddressFields As Variant
Dim Fields As Variant
Dim CleanAddress As Variant
Dim MatchCriteria As Variant
Dim NeedAssessment As Boolean
Dim HousingValidationList As Collection
Dim Site_with_Assessments As String
Dim SitePackage As Variant
Dim AddressConsideredMatching As Boolean
Dim RedirectionAddress As String
Dim PushFields As New Collection
Dim BlackListed As Boolean
Dim MissingLandlord As Variant
Dim RedirectionCount As Double
 
BlackListed = False
SitePackage = Array("Fields", "address match", "Identical", "other")
 
 
MatchCriteria = Array(0, 2, 3, 4, 8, 7)
 
URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=a0c&str=" & Address(0) & " " & Address(2) & " " & Address(4) & " " & Address(8) & " " & Address(9)
Call opNAV(IE, "nav", URL)
Set ResultList = PullTable(URL)
                        '0comments                          1street                   2street2                     3city                        4state                   5zip                                  6landlord
AddressFields = Array("00N1300000BLnh3_ileinner", "00N30000009ot82_ileinner", "00Na000000B2eGP_ileinner", "00N30000009ot7d_ileinner", "00N30000009ot7x_ileinner", "00N30000009ot7s_ileinner", "CF00N1300000BLnhG_ileinner")
Fields = Array("", "", "", "", "", "", "", "", "", "")
 
Set Addresslist = New Collection
 
NeedAssessment = True
 
If UBound(ResultList(2)(1)) > 0 Then
        For i = 2 To ResultList.count
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ResultList(i)(2)(1))
                For j = 0 To UBound(AddressFields)
                    Fields(j) = FetchField(IE, (AddressFields(j)))
                    'Debug.Print "Test: " & Fields(j)(0) & " | " & Fields(j)(1)
                        If j <> 6 Then
                            Fields(j) = Fields(j)(0)
                            'Debug.Print "landlord ID from location is " & Fields(j)
                        Else
                        
                        End If
                        If InStr(1, Fields(0), "blacklist", vbTextCompare) > 0 Then
                            BlackListed = True
                        End If
                Next j
                    CleanAddress = AddressParse((Fields(1)), (Fields(2)), (Fields(3)), (Fields(4)), (Fields(5)))
                    Fields(8) = CleanAddress(0) & " " & CleanAddress(2) & " " & CleanAddress(3) & " " & CleanAddress(4) & " " & CleanAddress(6) & " " & CleanAddress(7) & ", " & CleanAddress(8) & " " & CleanAddress(9)
                    Fields(9) = ResultList(i)(2)(1)
                    SitePackage(0) = Fields
                   

                    
                    
                   
                    'checks to see if certain address portions match
                    AddressConsideredMatching = True
                    For k = 0 To UBound(MatchCriteria)
                        If Address(MatchCriteria(k)) <> CleanAddress(MatchCriteria(k)) Then
                            'this allows the city (7) and zip code (9) to be interchangable
                            
                            If MatchCriteria(k) = 7 And Address(9) = CleanAddress(9) Then
                            Else
                            AddressConsideredMatching = False
                            Debug.Print "Address match failed on " & k & " because of: " & CleanAddress(MatchCriteria(k))
                            End If
                        End If
                    Next k
                   
                    SitePackage(1) = AddressConsideredMatching
                    AddressConsideredMatching = True
                   
                   If CleanAddress(14) Then
                    'if the address was heavily autocorrected it can't be identical
                    AddressConsideredMatching = False
                   Else
                        For k = 0 To 9
                            If k <> 5 Then
                                If Address(k) <> CleanAddress(k) Then
                                    AddressConsideredMatching = False
                                    k = 10
                                End If
                                
                            End If
                        Next k
                    'checks to see if this address is already being redirect
                        If AddressConsideredMatching Then
                            If InStr(1, Fields(0), "Redirect: a0c", vbTextCompare) > 0 Then
                                RedirectionCount = RedirectionCount + 1
                                RedirectionAddress = Mid(Fields(0), 11, 15)
                                Debug.Print "Set already being redirected to: " & RedirectionAddress
                            End If
                        End If
                    End If
                   
                    SitePackage(2) = AddressConsideredMatching
            Addresslist.Add SitePackage
            
        If RedirectionCount > 50 Then
            i = 26
        End If
        Next i
       
        'check for assessments on existing sites
        If RedirectionAddress = "" Then
            NeedAssessment = True
            For i = 1 To Addresslist.count
                If Addresslist(i)(1) Then
                    If NeedAssessment Then
                        Set HousingValidationList = Pull_Master_Child((Addresslist(i)(0)(9)), "CF00N1300000BLnhV", "a1l")
                        If UBound(HousingValidationList(2)(1)) = 1 Then
                            NeedAssessment = False
                            Debug.Print "Prime Site triggered by finding existing assessments"
                            Site_with_Assessments = (Addresslist(i)(0)(9))
                                Debug.Print "*** Landlord ***" & Addresslist(i)(0)(6)(0)
                                If Addresslist(i)(0)(6)(0) = "" And Len(LandlordID) = 15 Then
                                    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & (Addresslist(i)(0)(9)) & "/e?CF00N1300000BLnhG=Landlord&CF00N1300000BLnhG_lkid=" & LandlordID)
                                    Call HitSave(IE)
                                End If
                        End If
                    End If
                End If
            Next i
        Else
            Site_with_Assessments = RedirectionAddress
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & RedirectionAddress & "/e")
                MissingLandlord = FetchField(IE, "CF00N1300000BLnhG_lkid")
                Debug.Print "Missing landlord check: " & MissingLandlord(0) & " | " & MissingLandlord(1)
                If MissingLandlord(1) = "000000000000000" Then
                    Set PushFields = New Collection
                    PushFields.Add Array("CF00N1300000BLnhG_lkid", LandlordID)
                    Call PushUpdates2Page(IE, PushFields)
                End If
        End If
End If
 
 
'if none of the returned sites had assessements then pick a new prime site of the identical matches
If Site_with_Assessments = "" Then
    For i = 1 To Addresslist.count
       If Addresslist(i)(2) Then
            Site_with_Assessments = Addresslist(i)(0)(9)
            Debug.Print "Prime Site triggered by identical match"
            If LandlordID <> "" Then
                Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Addresslist(i)(0)(9) & "/e?CF00N1300000BLnhG=Landlord&CF00N1300000BLnhG_lkid=" & LandlordID)
                Call HitSave(IE)
            End If
            i = Addresslist.count
        End If
    Next i
End If
 
'if a prime site has still not been chosen, create a new one
If Site_with_Assessments = "" Then
    Set PushFields = New Collection
    URL = ""
    For i = 0 To 4
        If Address(i) <> "" Then
            If i = 0 Then
                URL = Address(0)
            Else
                URL = URL & " " & Address(i)
            End If
        End If
    Next i
   
    If Len(LandlordID) = 15 And left(LandlordID, 3) = "a4g" Then
    PushFields.Add Array("CF00N1300000BLnhG_lkid", LandlordID)
    Else
    Debug.Print "Landlord ID bad or missing: " & LandlordID
    End If
   
    PushFields.Add Array("00N30000009ot82", URL)
    PushFields.Add Array("00N30000009ot7d", Address(7))
    PushFields.Add Array("00N30000009ot7x", Address(8))
    PushFields.Add Array("00N30000009ot7s", Address(9))
    PushFields.Add Array("Name", "Name")
    PushFields.Add Array("00N30000009ot7i", "United States")
    PushFields.Add Array("00N1300000BLnh3", "Prime Accommodation Site")
   
    URL = "https://na68.salesforce.com/a0c/e?retURL=%2Fa0c%2Fo"
    Call opNAV(IE, "nav", URL)
    URL = PushUpdates2Page(IE, PushFields)
   
    Site_with_Assessments = Right(IE.LocationURL, 15)
End If
 
Debug.Print "Prime site at: " & Site_with_Assessments
 
    If True Then
        If Addresslist.count > 1 Then
            For i = 1 To Addresslist.count
                If Addresslist(i)(0)(0) = "" And Addresslist(i)(0)(9) <> Site_with_Assessments Then
                    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Addresslist(i)(0)(9) & "/e?retURL=" & Addresslist(i)(0)(9))
                    Set PushFields = New Collection
                    PushFields.Add Array("00N1300000BLnh3", "Redirect: " & Site_with_Assessments)
                    Call PushUpdates2Page(IE, PushFields)
                End If
            Next i
        End If
    End If
    
    If BlackListed And 1 = 2 Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Site_with_Assessments & "/e?retURL=" & Site_with_Assessments)
        Set PushFields = New Collection
        PushFields.Add Array("00N1300000BLnh3", "Blacklist ")
        Call PushUpdates2Page(IE, PushFields)
    End If
 
For i = 1 To Addresslist.count
    Debug.Print Addresslist(i)(0)(0) & " | " & Addresslist(i)(0)(8) & " | Same: " & Addresslist(i)(1) & " Identical: " & Addresslist(i)(2)
Next i
 
IE.Quit
Set IE = Nothing
Housing_Search_for_Prime_Site = Site_with_Assessments
End Function
Private Function Housing_Proccess_Housing_Plan(HousingPlanID As String) As String
Dim Address As Variant
Dim HousingPlan As String
Dim IE As Object
Dim PlanFields As Variant
Dim navresults As Boolean
Dim URL As String
Dim LandlordSearch As Collection
Dim LandlordID As String
Dim Field As Object
Dim FieldInfo As Variant
Dim phone As String
Dim PrimeSite As String
 
HousingPlan = HousingPlanID
Call opNAV(IE, "nav", "https://na68.salesforce.com/" & HousingPlan)
 
                    '   0street                     1 street2                    2 city                      3 state                          4 zip                         5 name                  6 phone                  7 email
PlanFields = Array("00Na000000B34SF_ileinner", "00Na000000B34SE_ileinner", "00Na000000B34S5_ileinner", "00Na000000B34SD_ileinner", "00Na000000B34SC_ileinner", "00N1300000BLbZK_ileinner", "00N1300000BLbZJ_ileinner", "00N1300000BLbZI_ileinner")
 
For i = 0 To UBound(PlanFields)
Set Field = Fetch_Fields(IE, (PlanFields(i)))
FieldInfo = TAGorAnchor(Field)
PlanFields(i) = Replace(FieldInfo(0), "&nbsp;", "", , , vbTextCompare)
Next i

LandlordID = Housing_Landlord_DeDup_Search((PlanFields(5)), CleanPhone((PlanFields(6))), (PlanFields(7)))
 
Address = AddressParse((PlanFields(0)), (PlanFields(1)), (PlanFields(2)), (PlanFields(3)), (PlanFields(4)))
PrimeSite = Housing_Search_for_Prime_Site(Address, LandlordID)
 
IE.Quit
Set IE = Nothing
 
Housing_Proccess_Housing_Plan = PrimeSite
 
End Function
 
Private Function Housing_Landlord_DeDup_Search(LandlordName As String, LandlordPhone As Variant, LandlordEmail As String) As String
Dim LandlordSearch As Collection
Dim ListOLandlords As Collection
Dim Searchables As Collection
Dim Rank As Double
Dim LandlordID As String
Dim IE As Object
Dim URL As String
Dim ReportOutput As String
Dim PageUpdates As Collection
Dim NumberOfRealNames As Double
 

Set Searchables = New Collection
 
If LandlordPhone(0) <> "" Then
Searchables.Add Array(LandlordPhone(0), "Phone")
End If
 
If LandlordEmail <> "" Then
Searchables.Add Array(LandlordEmail, "Email")
End If
 
'If LandlordName <> "" Then
'Searchables.Add Array(LandlordName, "Name")
'End If
 
Set ListOLandlords = New Collection
For h = 1 To Searchables.count
    If Searchables(h)(0) <> "" Then
    URL = "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=a4g&str=" & Searchables(h)(0)
    Set LandlordSearch = PullTable(URL)
    End If
   
    If LandlordSearch(2).count > 1 Then
        If UBound(LandlordSearch(2)(1)) > 0 Then
            For i = 2 To LandlordSearch.count
                                            'ID                         name                 fields
                ListOLandlords.Add Array(LandlordSearch(i)(2)(1), LandlordSearch(i)(2)(0), Searchables(1))
            Next i
        End If
    End If
Next h
 
'compile a list of landlords from the list
 
    Rank = 0
    Set Searchables = New Collection
    For i = 1 To ListOLandlords.count
        Set Searchables = cDictionary(Searchables, Array(ListOLandlords(i)(0), ListOLandlords(i)(1), ListOLandlords(i)(2)))
        Debug.Print "Landlord ID: " & ListOLandlords(i)(1) & " rank is: " & Rank
        If left(ListOLandlords(i)(1), 3) <> "a4g" Then
            Rank = Rank + 1
        End If
    Next i
    
If ListOLandlords.count > 0 Then
    If Rank > 1 Then
        'pick the best landlord from the list
        Rank = 0
        For i = 1 To Searchables.count
           If Searchables(i)(1) > Rank And left(Searchables(i)(0)(1), 3) <> "a4g" Then
                Rank = Searchables(i)(1)
                LandlordID = Searchables(i)(0)(0)
                Debug.Print "Better landlord ("; Rank & ") found at " & Searchables(i)(0)(0)
           End If
        Next i
       
        'create a duplicate landlord report
        NumberOfRealNames = 0
        If Searchables.count > 1 Then
            ReportOutput = "Multiple Landlords found.  Primary record https://na68.salesforce.com/" & LandlordID & Chr(10) & Chr(10) & "All Matches found:" & Chr(10)
                For i = 1 To Searchables.count
                    If left((Searchables(i)(0)(1)), 3) = "a4g" Then
                        NumberOfRealNames = NumberOfRealNames + 1
                    End If
                    ReportOutput = ReportOutput & " o " & Searchables(i)(0)(1) & "  https://na68.salesforce.com/" & Searchables(i)(0)(0) & "/e?retURL=" & Searchables(i)(0)(0) & "&Name=" & LandlordID & Chr(10)
                Next i
            ReportOutput = ReportOutput & Chr(10) & Chr(10) & "Please review duplicates and change Subject."
           
            'Post report to "primary" landlord
            If NumberOfRealNames > 1 Then
                Call opNAV(IE, "nav", "https://na68.salesforce.com/00T/e?title=Call&what_id=" & LandlordID & "&followup=1&tsk5=Call&retURL=%2Fa4g1B000001MaPv&RecordType=01230000000seeI&ent=Task")
                Set PageUpdates = New Collection
                PageUpdates.Add Array("tsk10", "Auto DUP Flagging")
                PageUpdates.Add Array("tsk5", "Multiple Landlords Found")
                PageUpdates.Add Array("00Na0000009rURo", "Duplicates")
                PageUpdates.Add Array("tsk6", ReportOutput)
                PageUpdates.Add Array("reminder_select_check", "0")
                PageUpdates.Add Array("tsk12", "Not Started")
                Call PushUpdates2Page(IE, PageUpdates)
                IE.Quit
                Set IE = Nothing
            End If
        End If
   Else
    If Rank = 1 Then
        LandlordID = Searchables(1)(0)(0)
    End If
   End If
Else
    If LandlordName <> "Error" And LandlordEmail <> "Error" And LandlordName <> "" Then
     Call opNAV(IE, "nav", "https://na68.salesforce.com/a4g/e?")
     Set ListOLandlords = New Collection
         ListOLandlords.Add Array("Name", LandlordName)
         ListOLandlords.Add Array("00N1300000BLni0", LandlordEmail)
         URL = LandlordPhone(0)
             If LandlordPhone(1) <> "" Then
             URL = URL & " x" & LandlordPhone(1)
             End If
     ListOLandlords.Add Array("00N1300000BLni6", URL)
    
     Call PushUpdates2Page(IE, ListOLandlords)
     
     LandlordID = Right(IE.LocationURL, 15)
     
     IE.Quit
     Set IE = Nothing
    End If
End If
 
Housing_Landlord_DeDup_Search = LandlordID
 
End Function
 
Private Function cDictionary(List As Collection, Key As Variant) As Collection
Dim count As Double
Dim Matched As Boolean
'##Explanation
'   Key , count
'   Key(0) = Value to check

If List Is Nothing Then
    Set List = New Collection
    List.Add Array(Key, 1)
Else
    Matched = True
    For i = 1 To List.count
        If List(i)(0)(0) = Key(0) Then
            count = List(i)(1) + 1
        List.Remove (i)
        'Debug.Print List.count
        If List.count > 0 Then
        List.Add Array(Key, count), before:=1
        Else
        List.Add Array(Key, count)
        End If
        Matched = False
        End If
    Next i
   
    If Matched Then
        List.Add Array(Key, 1)
    End If
End If
Set cDictionary = List
 
End Function

Function FetchField(IE As Object, Field_ID As String) As Variant
Dim URL As String
Dim ScrapeResults As Object
Dim anchor As Object
Dim TagType As String
Dim FieldValue As String
Dim FieldLink As String
Dim SelectOptions As Object
Dim RecordDateSpecial As String
Dim Length As Double

RecordDateSpecial = ""

If IsObject(IE.document.getelementbyid(Field_ID)) Then
    If left(IE.LocationURL, 32) <> "https://na68.salesforce.com/home" Then
        Set ScrapeResults = IE.document.getelementbyid(Field_ID)
            TagType = ScrapeResults.Tagname
            If TagType = "DIV" Then
                'Debug.Print "Inside " & ScrapeResults.innerhtml
                If ScrapeResults.innerhtml = "&nbsp;" Then
                FieldLink = ""
                FieldValue = ""
                Else
                    If Field_ID = "RecordType_ileinner" Then 'special check for account record type
                        FieldValue = ScrapeResults.innerhtml
                        FieldValue = Mid(FieldValue, 1, InStr(1, FieldValue, "<a", vbTextCompare) - 1)
                        FieldValue = Replace(FieldValue, "&nbsp;", "", 1, , vbTextCompare)
                        FieldValue = Trim(FieldValue)
                        FieldLink = ""
                    Else
                        If InStr(1, ScrapeResults.innerhtml, " href=""", vbTextCompare) > 0 Then
                        'Debug.Print "href detected"
                        Set anchor = ScrapeResults.getelementsbytagname("a")
                            FieldValue = FixAmp((anchor(0).innerhtml))
                                'If IsObject(Anchor(0).href) Then
                                    FieldLink = Right(anchor(0).HREF, 15)
                                'Else
                                    'FieldLink = ""
                                'End If
                        Else
                        FieldValue = ScrapeResults.innerhtml
                        End If
                    End If
                        'this handles checkboxes
                        If InStr(1, ScrapeResults.innerhtml, "class=""checkImg""", vbTextCompare) > 0 Then
                                If InStr(1, ScrapeResults.innerhtml, "alt=""Checked""", vbTextCompare) > 0 Then
                                    FieldValue = "Checked"
                                    FieldLink = 1
                                End If
                                If InStr(1, ScrapeResults.innerhtml, "alt=""Not Checked""", vbTextCompare) > 0 Then
                                    FieldValue = "Not Checked"
                                    FieldLink = 0
                                End If
                        End If
                        
                        'this handles if the field is a created by or modified by
                        If Field_ID = "CreatedBy_ileinner" Or Field_ID = "LastModifiedBy_ileinner" Then
                            RecordDateSpecial = ScrapeResults.innerhtml
                            Length = InStr(1, RecordDateSpecial, "</a>", vbTextCompare) + 6
                            RecordDateSpecial = Mid(RecordDateSpecial, Length, Len(RecordDateSpecial) - (Length - 1))
                        End If
                End If
            Else
                If InStr(1, Field_ID, "_lkid", vbTextCompare) Then
                    FieldLink = ScrapeResults.Value
                    Set anchor = IE.document.getelementbyid(left(Field_ID, Len(Field_ID) - 5))
                    FieldValue = FixAmp(anchor.Value)
                End If
            End If
            If TagType = "INPUT" Then
                FieldValue = FixAmp(ScrapeResults.Value)
                FieldLink = ""
            End If
            If TagType = "SELECT" Then
                Set SelectOptions = ScrapeResults.getelementsbytagname("Option")
                FieldValue = FixAmp(SelectOptions(ScrapeResults.TabIndex).Value)
                FieldLink = ""
            End If
            If TagType = "TEXTAREA" Then
                FieldValue = FixAmp(ScrapeResults.innerhtml)
                FieldLink = ""
            End If
    End If
End If
    If RecordDateSpecial = "" Then
    Debug.Print "FieldFetcher returned " & FieldValue & " | " & FieldLink
    Else
    Debug.Print "FieldFetcher returned " & FieldValue & " | " & FieldLink & " | " & RecordDateSpecial
    End If
FetchField = Array(FieldValue, FieldLink, RecordDateSpecial)
End Function

Sub DpageExplore()
Dim OppID As String
Dim IE As Object
Dim Page As Object
Dim PageTitleDiv As Object
Dim FormList As Object
Dim AllRows As Object
Dim PAX As Object
Dim CheckBox As Object
Dim Buttons As Object

OppID = "0061300001JxWj7"
OppID = "0061B00001Qq3D6"
'

Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/IP_DocuSign_bulk_Placement?oppid=" & OppID)
IE.Visible = True
Set Page = IE.document.getelementbyid("bodyCell")

Set PageTitleDiv = Page.getelementsbytagname("b")
    If "Offer All IP DocuSign" = PageTitleDiv(0).innerhtml Then
       Set FormList = Page.getelementsbytagname("form")
       'Debug.Print FormList(0).ID
          
          Set AllRows = FormList(0).getelementsbytagname("tr")
            For Each Student In AllRows
                Set PAX = Student.getelementsbytagname("td")
                    For Each TableData In PAX
                        If Right(TableData.ID, 5) = "_id30" Then
                            Set CheckBox = TableData.getelementsbytagname("input")
                                CheckBox(0).Click
                        End If
                    Next TableData
            Next Student
            
            Set Buttons = FormList(0).getelementsbytagname("input")
                For Each Button In Buttons
                    If Button.Name = "j_id0:j_id3:j_id33" Then
                        'Debug.Print "Button Onclick = " & Button.onclick
                        Button.onclick = ""
                        Button.Click
                    End If
                Next Button
                    
    
    End If
    'MsgBox "check page", , "Testing"
    
IE.Quit
Set IE = Nothing
End Sub

Sub HC_DocuSign_SummaryReport()
Dim OppID As String
Dim IE As Object
Dim RawPositions As Collection
Dim PositionList As Collection
Dim FieldList As Collection
Dim Manager As Variant
Dim TempMatchList As Collection
Dim FinalMatchList As Collection
Dim EnvelopeList As Collection
Dim RosterStatus As Collection
Dim DocuSignEnvelope As String
Dim Link As String
Dim EmailBody As String
Dim FakePAX As Variant
Dim HCAcccount As Variant
Dim EmailTemplate As Variant


OppID = "0061300001JxWj7"

FakePAX = PAXbasicInfo("", "", "", 1)


Call opNAV(IE, "nav", "https://na68.salesforce.com/" & OppID)
Manager = FetchField(IE, "CF00N1B00000BLz5L_ileinner")
HCaccount = FetchField(IE, "opp4_ileinner")
FakePAX(29, 1) = HCaccount(0)
FakePAX(29, 2) = HCaccount(1)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Manager(1))
Manager = Array(Manager(0), Manager(1), FetchField(IE, "con15_ileinner")(0))


Set RawPositions = Pull_Master_Child(OppID, "CF00N30000008RES7", "a0Q")

Set PositionList = New Collection
For i = 2 To RawPositions.count
    Debug.Print "Positions status" & RawPositions(i)(4)(0)
    If RawPositions(i)(4)(0) <> "Withdrawn" Then
        PositionList.Add RawPositions(i)(1)(1)
    End If
Next i

Set FinalMatchList = New Collection
For i = 1 To PositionList.count
    Set TempMatchList = Pull_Master_Child(PositionList(i), "CF00N30000008REJy", "a0R")
        For j = 2 To TempMatchList.count
            Debug.Print "Match Stage = " & TempMatchList(j)(4)(0)
            If TempMatchList(j)(4)(0) <> "Withdrawn" Then
                FinalMatchList.Add TempMatchList(j)
            End If
        Next j
Next i

Set RosterStatus = New Collection
For i = 1 To FinalMatchList.count
    Set EnvelopeList = Pull_Master_Child((FinalMatchList(i)(1)(1)), "CF00Na000000B30fn", "a0s")
        If UBound(EnvelopeList(2)(1)) > 0 Then
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EnvelopeList(2)(1)(1))
            DocuSignEnvelope = FetchField(IE, "00Na0000009qOUC_ileinner")(0)
            Link = "https://intraxinc.secure.force.com/intraxappengine/WT_IP_Job_Agreement?mid=" & FinalMatchList(i)(1)(1)
            Link = Link & "&uType=HC&envelopeId=" & DocuSignEnvelope
            Link = Link & "&Name=" & Clean_Text4URL((Manager(0)))
            Link = Link & "&Email=" & Clean_Text4URL((Manager(2)))
            'RosterStatus.Add Array(Array("MatchID", FinalMatchList(i)(1)(1)), Array("Engagement Name", FinalMatchList(i)(3)(0)), Array("Offer Status", FinalMatchList(i)(5)(0)), Array("Start Date", FinalMatchList(i)(7)(0)), Array("End Date", FinalMatchList(i)(8)(0)), Array("Docusign Envelope ID", DocuSignEnvelope), Array("DocuSignLink", Link))
        Else
        DocuSignEnvelope = "no docusign found"
        Link = ""
        End If
        RosterStatus.Add Array(Array("MatchID", FinalMatchList(i)(1)(1)), Array("Engagement Name", FinalMatchList(i)(3)(0)), Array("Offer Status", FinalMatchList(i)(5)(0)), Array("Start Date", FinalMatchList(i)(7)(0)), Array("End Date", FinalMatchList(i)(8)(0)), Array("Docusign Envelope ID", DocuSignEnvelope), Array("DocuSignLink", Link))
Next i

For Each thing In RosterStatus
    For i = 0 To UBound(thing)
        Debug.Print thing(i)(0) & " = " & thing(i)(1)
    Next i
Next thing

EmailBody = GenerateEmail(RosterStatus, Manager)
Debug.Print EmailBody

EmailTemplate = FetchEmailTemplate("00X1B000001qZig")
FakePAX = AddTemplate(FakePAX, EmailTemplate)
                
FakePAX(3, 1) = Replace(FakePAX(3, 1), "<PAX List Table>", EmailBody, 1, , vbTextCompare)
FakePAX(0, 1) = "amey@intraxinc.com"
FakePAX(19, 2) = OppID
FakePAX(20, 1) = Manager(0)
FakePAX(20, 2) = Manager(1)
FakePAX(32, 1) = Manager(0)
FakePAX(39, 2) = OppID
Debug.Print FakePAX(20, 0) & FakePAX(20, 1) & FakePAX(20, 2)

Set FinalMatchList = New Collection
Call Send_HTMLEmail(FakePAX, "noreply", FinalMatchList)

IE.Quit
Set IE = Nothing

End Sub

Private Function GenerateEmail(PAXList As Collection, Manager As Variant) As String
Dim EmailBody As String
Dim Table As String
Dim Row As String

'EmailBody = "Dear " & Manager(0) & ",<br/><br/>Here is a list of the students we currently have for you:<br/><br/><br/>"

'
'Table = "<table cellpadding=""10"" class=""letter""><tr>"
Table = "<table class=""letter""><tr style=""background: #ebf3d8;"">"
For i = 1 To 5
    Row = Row & "<th>" & PAXList(1)(i)(0) & "</th>"
        If i = 1 Then
            Row = Replace(Row, "<th>", "<th style=""width: 18em"">", 1, 1, vbTextCompare)
        End If
Next i
Table = Table & Row & "</tr>"

    For i = 1 To PAXList.count
        Row = "<tr>"
            For j = 1 To 4
                Row = Row & "<td>" & PAXList(i)(j)(1) & "</td>"
            Next j
            If PAXList(i)(2)(1) = "Sent IP JO" Then
            Row = Row & "<td><a href=""" & (PAXList(i)(6)(1)) & """>DocuSign Link</a></td>"
            Else
                If PAXList(i)(2)(1) = "Accepted" Then
                    Row = Row & "<td>Fully Signed</td>"
                Else
                    Row = Row & "<td>You've Signed!</td>"
                End If
            End If
        Row = Row & "</tr>"
        Table = Table & Row
    Next i
Table = Table & "</table>"

EmailBody = Table
' & "<br/><br/>Thank you,<br/>Intrax Work Travel"

GenerateEmail = EmailBody
End Function

Private Sub Accommodation_Based_Unit_Followup(AccommodationID As String)
Dim IE As Object
Dim EngagementID As String
Dim SiteID As String
Dim FieldList As Variant
Dim SiteValues As Variant
Dim pSiteValues As Variant
Dim SiteAddress As Variant
Dim PrimeSiteID As String
Dim Updates As Collection

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AccommodationID)

SiteID = FetchField(IE, "CF00N30000009ot87_ileinner")(1)
EngagementID = FetchField(IE, "CF00Na000000B2kKt_ileinner")(1)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & SiteID)
                            '0street                         1unit #                  2city                        3state                    4zip                             5address comments            6reporting requirement
    FieldList = Array("00N30000009ot82_ileinner", "00Na000000B2eGP_ileinner", "00N30000009ot7d_ileinner", "00N30000009ot7x_ileinner", "00N30000009ot7s_ileinner", "00N1300000BLnh3_ileinner", "00N1B00000BLzmP_ileinner")
    ReDim SiteValues(UBound(FieldList))
    For i = 0 To UBound(FieldList)
        SiteValues(i) = FetchField(IE, (FieldList(i)))
    Next i
    
    SiteAddress = AddressParse((SiteValues(0)(0)), (SiteValues(1)(0)), (SiteValues(2)(0)), (SiteValues(3)(0)), (SiteValues(4)(0)))
PrimeSiteID = Housing_Search_for_Prime_Site(SiteAddress, "")

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PrimeSiteID)
    ReDim pSiteValues(UBound(FieldList))
    For i = 0 To UBound(FieldList)
        pSiteValues(i) = FetchField(IE, (FieldList(i)))
    Next i

    If pSiteValues(6)(0) = "Need Unit" And SiteAddress(6) = "" Then
        Call InquireAboutApartment(EngagementID)
    End If
    If InStr(1, pSiteValues(5)(0), "blacklist", vbTextCompare) > 0 Then
        Debug.Print "Housing is blacklisted and PAX should be informed"
    End If
    
    'update accommodation to show it's been proccessed
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AccommodationID & "/e")
        Set Updates = New Collection
        Updates.Add Array("00N1300000BLnhP", Format(Now(), "mm/dd/yyyy"))
        Updates.Add Array("00N30000008RH1X", "Proccessed using prime site: https://na68.salesforce.com/" & PrimeSiteID)
        Call PushUpdates2Page(IE, Updates)

End Sub

Sub Housing_Landlord_as_Employer()
Dim IE As Object
Dim LandlordID As String
Dim FieldList As Variant
Dim FieldValues As Variant
Dim SearchResults As Collection
Dim ListoContacts As Collection
Dim Report As String
Dim FakePAX As Variant
Dim EmailTemplate As Variant

'Finds contacts based on Landlord ID

LandlordID = "a4g1B000001MahB"

Set ListoContacts = New Collection
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & LandlordID)
        FieldList = Array("Name_ileinner", "00N1300000BLni0_ileinner", "00N1300000BLni6_ileinner")
        ReDim FieldValues(UBound(FieldList))
        For i = 0 To UBound(FieldList)
            FieldValues(i) = FetchField(IE, (FieldList(i)))
            
            Set SearchResults = SFDC_Search_Table((FieldValues(i)(0)), "003")
            
            If UBound(SearchResults(2)(1)) > 0 Then
                For j = 2 To SearchResults.count
                    Debug.Print "Contact status is: " & SearchResults(j)(3)(0)
                    If (SearchResults(j)(3)(0)) <> "Inactive" Then
                        Set ListoContacts = cDictionary(ListoContacts, Array(SearchResults(j)(2)(1), SearchResults(j)(2)(0), SearchResults(j)(4)(0), SearchResults(j)(4)(1)))
                    End If
                Next j
            End If
        Next i
        
Report = Report & "<span><a href=""https://na68.salesforce.com/" & LandlordID & """ >Landlord - <strong>" & LandlordID & "</strong></a><br/><br/></span>"
Report = Report & "<table><strong><tr><th>Contact Name</th><th>Match Count</th><th>Host Company</th></tr></strong>" & Chr(10)
    For i = 1 To ListoContacts.count
        Report = Report & "<tr>"
        Report = Report & "<td><a href=""https://na68.salesforce.com/" & ListoContacts(i)(0)(0) & """ >" & ListoContacts(i)(0)(1) & "</a></td><td>" & ListoContacts(i)(1) & "</td><td><a href=""https://na68.salesforce.com/" & ListoContacts(i)(0)(3) & """ >" & ListoContacts(i)(0)(2) & "</a></td>"
        Report = Report & "</tr>"
    Next i
Report = Report & "</table>"

Debug.Print "***" & Report & "***"

FakePAX = PAXbasicInfo("", "", "", 1)

EmailTemplate = FetchEmailTemplate("00X1B000001qZn7")
FakePAX = AddTemplate(FakePAX, EmailTemplate)
                
FakePAX(3, 1) = Replace(FakePAX(3, 1), "<PAX List Table>", Report, 1, , vbTextCompare)

FakePAX(20, 2) = "0031B00002bteMh"
FakePAX(2, 1) = "Employers found matching Landlord's Info"
FakePAX(39, 2) = LandlordID

Set SearchResults = New Collection
Call Send_HTMLEmail(FakePAX, "noreply", SearchResults)

IE.Quit
Set IE = Nothing
    
End Sub

Sub ApplicationChecker(ApplicationID As String, empStart As Date, empEnd As Date)
Dim IE As Object
Dim FieldList As Variant
Dim EmbassyDates As Collection
Dim PartnerList As Variant
Dim PartnerCountry As String
Dim EmbassyStart As Date
Dim EmbassyEnd As Date
Dim EmbassySeason As String
Dim Duration As Double
Dim ErrorTypes As Collection
Dim engStart As Date
Dim engEnd As Date
Dim Partner As String
Dim Season As String
Dim ErrorReadOut As String
Dim PartnerVerified As Boolean

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ApplicationID)
                    '0Engagement Start                1Engagement End             2Season                      3Year                       4Service Level             5Partner                 6app name            7Country of Study
FieldList = Array("00Na0000009qBVG_ileinner", "00Na000000Algwg_ileinner", "00Na000000B2tGV_ileinner", "00Na0000009qDo5_ileinner", "00Na0000009qDo5_ileinner", "CF00Na000000B2gra_ileinner", "Name_ileinner", "00N1300000BOJVx_ileinner")

For i = 0 To UBound(FieldList)
    FieldList(i) = FetchField(IE, (FieldList(i)))
Next i
Partner = FieldList(5)(0)
engStart = CDate((FieldList(0)(0)))
engEnd = CDate((FieldList(1)(0)))


Set EmbassyDates = LoadEmbassyDates()
PartnerList = LoadPARTNERtable()

PartnerVerified = False
Debug.Print "There are " & UBound(PartnerList, 1) & " in list"
For i = 0 To UBound(PartnerList, 1)
    If Partner = PartnerList(i, 1) Then
        PartnerCountry = PartnerList(i, 5)
        PartnerVerified = True
    End If
Next i

If PartnerVerified Or PartnerCountry = "Europe" Then
Else
    PartnerCountry = FieldList(7)(0)
End If

PartnerVerified = False
For i = 1 To EmbassyDates.count
    If EmbassyDates(i)(0) = PartnerCountry Then
        Debug.Print EmbassyDates(i)(1) & " " & EmbassyDates(i)(2)
        
        EmbassyStart = CDate((EmbassyDates(i)(1)))
        EmbassyEnd = CDate((EmbassyDates(i)(2)))
        PartnerVerified = True
    End If
Next i

        If PartnerVerified Then
        Else
            For i = 1 To EmbassyDates.count
                If EmbassyDates(i)(0) = FieldList(7)(0) Then
                    Debug.Print EmbassyDates(i)(1) & " " & EmbassyDates(i)(2)
                    
                    EmbassyStart = CDate((EmbassyDates(i)(1)))
                    EmbassyEnd = CDate((EmbassyDates(i)(2)))
                    PartnerVerified = True
                End If
            Next i
        End If

Debug.Print "Employment Dates: " & empStart & " - " & empEnd & " | Engagement Dates: " & engStart & " - " & engEnd & " | Embassy Dates: " & EmbassyStart & " - " & EmbassyEnd

'date comparision logic
    Set ErrorTypes = New Collection
    'over 4 months
         If WorksheetFunction.EDate(engStart, 4) < WorksheetFunction.EDate(engEnd, 0) Then
            ErrorTypes.Add Array("Over 4 months")
         End If
    'check start date
        If engStart < EmbassyStart Then
            ErrorTypes.Add Array("Start date before Embassy Start")
        End If
    'check end date
        If engEnd > EmbassyEnd Then
            ErrorTypes.Add Array("End date after Embassy End")
        End If
    'check employment
        If empStart < engStart Or empEnd > engEnd Then
            ErrorTypes.Add Array("Please Check Employment Dates")
        End If
    'Employment dates end before start
        If empStart > empEnd Then
            ErrorTypes.Add Array("Please Check Employment Dates")
        End If
        
If ErrorTypes.count > 0 Then
    Debug.Print "Date Issues"
    ErrorReadOut = ""
        For i = 1 To ErrorTypes.count
            If ErrorReadOut <> "" Then
                ErrorReadOut = ErrorReadOut & "|"
            End If
            ErrorReadOut = ErrorReadOut & ErrorTypes(i)(0)
        Next i
    ErrorReadOut = FieldList(6)(0) & " (" & ErrorReadOut
    ErrorReadOut = left(ErrorReadOut, 79) & ")"
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ApplicationID & "/e")
        Set ErrorTypes = New Collection
        ErrorTypes.Add Array("00N1300000BR23h", ErrorReadOut)
        Call PushUpdates2Page(IE, ErrorTypes)
Else
    Debug.Print "No Date issues found on application"
End If
         
IE.Quit
Set IE = Nothing

End Sub

Private Function LoadEmbassyDates() As Collection
Dim Dates As Collection

Set Dates = New Collection

    Dates.Add Array("Albania", "07/01/2018", "10/15/2018", "")
    Dates.Add Array("Argentina", "12/01/2018", "04/01/2019", "")
    Dates.Add Array("Austria", "07/01/2018", "09/30/2018", "")
    Dates.Add Array("Bolivia", "11/15/2018", "02/15/2019", "")
    Dates.Add Array("Bosnia and Herzegovina", "05/23/2018", "09/30/2018", "")
    Dates.Add Array("Brazil", "11/15/2018", "03/15/2019", "")
    Dates.Add Array("Bulgaria", "05/01/2018", "09/30/2018", "")
    Dates.Add Array("Chile", "12/01/2018", "04/01/2019", "")
    Dates.Add Array("China", "06/01/2018", "09/15/2018", "")
    Dates.Add Array("Colombia", "05/01/2018", "08/30/2018", "")
    Dates.Add Array("Costa Rica", "12/01/2018", "03/31/2019", "")
    Dates.Add Array("Croatia", "06/10/2018", "10/10/2018", "")
    Dates.Add Array("Cyprus", "05/23/2018", "10/08/2018", "")
    Dates.Add Array("Czech Republic", "05/01/2018", "09/30/2018", "")
    Dates.Add Array("Denmark", "06/30/2018", "09/01/2018", "")
    Dates.Add Array("Dominican Republic", "05/10/2018", "09/10/2018", "")
    Dates.Add Array("Ecuador, Guayaquil", "02/21/2019", "05/02/2019", "Guayaquil")
    Dates.Add Array("Ecuador, Quito", "01/20/2019", "10/01/2019", "Quito")
    Dates.Add Array("Estonia", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("France", "06/01/2018", "09/30/2018", "")
    Dates.Add Array("Germany", "07/01/2018", "10/31/2018", "")
    Dates.Add Array("Greece", "06/01/2018", "09/30/2018", "")
    Dates.Add Array("India", "05/01/2018", "08/31/2018", "")
    Dates.Add Array("Jamaica", "05/05/2018", "09/07/2018", "")
    Dates.Add Array("Japan", "06/18/2018", "10/18/2018", "")
    Dates.Add Array("Jordan", "06/01/2018", "10/01/2018", "")
    Dates.Add Array("Kazakhstan", "05/25/2018", "09/01/2018", "")
    Dates.Add Array("Kosovo", "05/15/2018", "09/30/2018", "")
    Dates.Add Array("Kyrgyzstan", "06/01/2018", "08/31/2018", "")
    Dates.Add Array("Latvia", "05/03/2018", "09/03/2018", "")
    Dates.Add Array("Lithuania", "05/08/2018", "09/15/2018", "")
    Dates.Add Array("Macedonia, Former Yugoslav Republic of", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("Macedonia", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("Malaysia", "11/25/2018", "03/15/2019", "Winter")
    Dates.Add Array("Malaysia", "05/25/2018", "09/15/2018", "Summer")
    Dates.Add Array("Moldova, Republic of", "05/22/2018", "09/08/2018", "")
    Dates.Add Array("Mongolia", "06/01/2018", "09/01/2018", "")
    Dates.Add Array("Montenegro", "05/29/2018", "09/25/2018", "")
    Dates.Add Array("Nigeria", "06/01/2018", "10/01/2018", "")
    Dates.Add Array("Paraguay", "12/01/2018", "03/15/2019", "")
    Dates.Add Array("Peru", "12/01/2018", "03/31/2019", "")
    Dates.Add Array("Philippines", "03/26/2019", "09/01/2019", "")
    Dates.Add Array("Poland", "05/25/2018", "09/25/2018", "")
    Dates.Add Array("Romania", "06/15/2018", "09/30/2018", "")
    Dates.Add Array("Russian Federation", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("Russian", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("Serbia", "05/21/2018", "10/01/2018", "")
    Dates.Add Array("Singapore", "05/01/2018", "08/31/2018", "")
    Dates.Add Array("Slovakia", "05/15/2018", "09/15/2018", "")
    Dates.Add Array("South Africa", "10/30/2018", "02/15/2019", "")
    Dates.Add Array("Spain", "06/15/2018", "09/30/2018", "")
    Dates.Add Array("Sweden", "05/01/2018", "08/30/2018", "")
    Dates.Add Array("Taiwan, Province of China", "06/01/2018", "09/30/2018", "")
    Dates.Add Array("Taiwan", "06/01/2018", "09/30/2018", "")
    Dates.Add Array("Thailand", "05/01/2018", "08/31/2018", "")
    Dates.Add Array("Turkey", "05/15/2018", "10/01/2018", "")
    Dates.Add Array("Ukraine", "05/07/2018", "09/02/2018", "")
    Dates.Add Array("United Kingdom", "06/01/2018", "09/15/2018", "")
    Dates.Add Array("Uzbekistan", "05/06/2018", "10/01/2018", "")


Set LoadEmbassyDates = Dates
End Function

Private Sub Check_App_Opp_Eng(AccountID As String)
Dim AppFields As New Collection
Dim OppFields As New Collection
Dim EngFields As New Collection
Dim IE As Object
Dim ResultList As Collection
Dim RecordsFound As New Collection
Dim RelationshipList As Variant
Dim CurrentSearch As Collection
Dim FieldResult As Variant
Dim FakePAX As Variant
Dim EmailBody As String
Dim Diagnostics As String
Dim OverlapList As Collection
Dim ErrorInstruct As Variant
Dim Dates As Collection
Dim Engagements As Collection
Dim TableAsVariant As Variant
Dim SendEmail As Boolean


SendEmail = False

AppFields.Add Array("Name", "Name_ileinner")
AppFields.Add Array("Stage", "00Na0000009qGpE_ileinner")
AppFields.Add Array("Engstart", "00Na0000009qBVG_ileinner")
AppFields.Add Array("EngEnd", "00Na000000Algwg_ileinner")
AppFields.Add Array("Year", "00Na0000009qDo5_ileinner")
AppFields.Add Array("Last App Sync", "00Na000000B2tGU_ileinner")
AppFields.Add Array("Opportunity", "CF00N30000009pTjS_ileinner")
AppFields.Add Array("Engagement", "CF00Na000000B2Kea_ileinner")
AppFields.Add Array("Created By", "CreatedBy_ileinner")
AppFields.Add Array("Intrax Program", "00Na0000009qDAF_ileinner")

OppFields.Add Array("Name", "Name_ileinner")
OppFields.Add Array("Stage", "opp11_ileinner")
OppFields.Add Array("Close Date", "opp9_ileinner")
OppFields.Add Array("Year", "00N300000068ZDp_ileinner")
OppFields.Add Array("EngStart", "00N30000007CQKk_ileinner")
OppFields.Add Array("EngEnd", "00N30000007CQKp_ileinner")
OppFields.Add Array("Payment Recieved", "00Na0000009rWOG_ileinner")
OppFields.Add Array("Created By", "CreatedBy_ileinner")
OppFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
OppFields.Add Array("Intrax Program", "L00N300000068dfA_ileinner")

EngFields.Add Array("Name", "Name_ileinner")
EngFields.Add Array("Status", "00Na0000009s14S_ileinner")
EngFields.Add Array("Opportunity", "CF00Na0000009s14M_ileinner")
EngFields.Add Array("Year", "00Na000000B2KhB_ileinner")
EngFields.Add Array("EngStart", "00Na0000009s14D_ileinner")
EngFields.Add Array("EngEnd", "00Na0000009s14C_ileinner")
EngFields.Add Array("Program Ready Date", "00Na000000B2kL9_ileinner")
EngFields.Add Array("Created By", "CreatedBy_ileinner")
EngFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
EngFields.Add Array("SEVIS ID", "00Na000000B2eH2_ileinner")
EngFields.Add Array("Intrax Program", "00Na0000009s14I_ileinner")

RelationshipList = Array(Array("Application", "CF00N30000009oxCj", "a0U"), _
                            Array("Engagement", "CF00Na0000009s148", "a0d"), _
                            Array("Opportunity", "Opp4", "006"))

For i = 0 To UBound(RelationshipList)
    Set ResultList = Pull_Master_Child(AccountID, (RelationshipList(i)(1)), (RelationshipList(i)(2)))
        For j = 2 To ResultList.count
            If UBound(ResultList(j)(1)) > 0 Then
                RecordsFound.Add Array(RelationshipList(i)(0), ResultList(j)(1)(1))
            End If
        Next j

Next i

Set ResultList = New Collection

For i = 1 To RecordsFound.count
    If (RecordsFound(i)(0)) = "Application" Then
        Set CurrentSearch = AppFields
    End If
    
    If (RecordsFound(i)(0)) = "Engagement" Then
        Set CurrentSearch = EngFields
    End If
    
    If (RecordsFound(i)(0)) = "Opportunity" Then
        Set CurrentSearch = OppFields
    End If
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & RecordsFound(i)(1))
        'IE.Visible = True
        For j = 1 To CurrentSearch.count
            ResultList.Add Array(RecordsFound(i)(0), RecordsFound(i)(1), CurrentSearch(j)(0), FetchField(IE, (CurrentSearch(j)(1))))
        Next j
Next i

    
    'Extra Diagnostics info
        Set OverlapList = Nothing
        Set Dates = New Collection
        For i = 1 To ResultList.count
            ErrorInstruct = Array(False, "Relationship")
            
            If ResultList(i)(2) = "Year" Then
                Set Dates = cDictionary(Dates, Array(ResultList(i)(3)(0)))
            End If
            
            Debug.Print "Entry type is " & ResultList(i)(0) & " Field name is " & ResultList(i)(2) & " value is " & ResultList(i)(3)(1)
            If ResultList(i)(0) = "Application" And ResultList(i)(2) = "Opportunity" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "App2Opp-"
            End If
            
            If ResultList(i)(0) = "Application" And ResultList(i)(2) = "Engagement" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "App2Eng-"
            End If
            
            If ResultList(i)(0) = "Engagement" And ResultList(i)(2) = "Opportunity" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "Eng2Opp-"
            End If
            
            If ErrorInstruct(0) And ResultList(i)(3)(1) <> "" Then
                Set OverlapList = cDictionary(OverlapList, Array(ErrorInstruct(1) & ResultList(i)(3)(1), ResultList(i)(3)(1), ResultList(i)(3)(0)))
            End If
        Next i
        
        For i = 1 To OverlapList.count
            Debug.Print "read off: " & OverlapList(i)(0)(0)
        Next i
        
        Diagnostics = "<span>Program Years Detected: <strong>"
        For i = 1 To Dates.count
            Diagnostics = Diagnostics & "  " & Dates(i)(0)(0)
        Next i
        
        Diagnostics = Diagnostics & "</strong></span><br/><br/>"
        Diagnostics = Diagnostics & "<span><strong>List of Reused records</strong></span><br/>"
        
        
        For i = 1 To OverlapList.count
            If OverlapList(i)(1) * 1 > 1 Then
            SendEmail = True
            Debug.Print "Duplicate finder: " & OverlapList(i)(0)(0) & " = " & OverlapList(i)(1)
            Diagnostics = Diagnostics & "<div><a href=""https://na68.salesforce.com/" & OverlapList(i)(0)(1) & """>" & OverlapList(i)(0)(0) & "</a> is being reused " & OverlapList(i)(1) & " times.</div>"
            End If
        Next i
        If Diagnostics <> "" Then
            
        End If
        


If SendEmail Then
    EmailBody = AppOppEng_Integrity_Report(ResultList)
    EmailBody = "<a href=""https://na68.salesforce.com/" & AccountID & """>Summary of Account " & AccountID & "</a><br/><br/>" & Diagnostics & "<br/><br/>" & EmailBody
    
    FakePAX = PAXbasicInfo("", "", "", 1)
    FakePAX = AddTemplate(FakePAX, FetchEmailTemplate("00X1B000001qa98"))
    FakePAX(3, 1) = Replace(FakePAX(3, 1), "<PAX List Table>", EmailBody, 1, , vbTextCompare)
    FakePAX(0, 1) = "amey@intraxinc.com"
    FakePAX(39, 2) = AccountID
    FakePAX(20, 1) = "Report Holder"
    FakePAX(20, 2) = "0031B00002btcYo"
    
    Set ResultList = New Collection
    Call Send_HTMLEmail(FakePAX, "noreply", ResultList)
End If

IE.Quit
Set IE = Nothing
End Sub
Private Sub Check_App_Opp_Eng_V2(AccountID As String)

Dim AccountFields As New Collection
Dim AppFields As New Collection
Dim OppFields As New Collection
Dim EngFields As New Collection
Dim IE As Object
Dim RecPack As Variant
Dim cSet As Variant
Dim Tri As Variant
Dim ResultList As Collection
Dim Year As String
Dim YearSet As Variant

Dim RecordsFound As New Collection
Dim RelationshipList As Variant
Dim CurrentSearch As Collection
Dim FieldResult As Variant
Dim FakePAX As Variant
Dim EmailBody As String
Dim Diagnostics As String
Dim OverlapList As Collection
Dim ErrorInstruct As Variant
Dim Dates As Collection
Dim Engagements As Collection
Dim TableAsVariant As Variant
Dim SendEmail As Boolean


SendEmail = False

AccountFields.Add Array("Intrax ID", "00N30000007Cn5q_ileinner")
AccountFields.Add Array("Applications (Account)", "_00N30000009oxCj")
AccountFields.Add Array("Engagements", "_00Na0000009s148")
AccountFields.Add Array("Opportunities", "_RelatedOpportunityList")

RecPack = Retrieve_Page_Info(AccountID, AccountFields)
    
    AppFields.Add Array("Name", "Name_ileinner")
    AppFields.Add Array("Stage", "00Na0000009qGpE_ileinner")
    AppFields.Add Array("Engstart", "00Na0000009qBVG_ileinner")
    AppFields.Add Array("EngEnd", "00Na000000Algwg_ileinner")
    AppFields.Add Array("Year", "00Na0000009qDo5_ileinner")
    AppFields.Add Array("Last App Sync", "00Na000000B2tGU_ileinner")
    AppFields.Add Array("Opportunity", "CF00N30000009pTjS_ileinner")
    AppFields.Add Array("Engagement", "CF00Na000000B2Kea_ileinner")
    AppFields.Add Array("Created By", "CreatedBy_ileinner")
    AppFields.Add Array("Intrax Program", "00Na0000009qDAF_ileinner")
    
    OppFields.Add Array("Name", "Name_ileinner")
    OppFields.Add Array("Stage", "opp11_ileinner")
    OppFields.Add Array("Close Date", "opp9_ileinner")
    OppFields.Add Array("Year", "00N300000068ZDp_ileinner")
    OppFields.Add Array("EngStart", "00N30000007CQKk_ileinner")
    OppFields.Add Array("EngEnd", "00N30000007CQKp_ileinner")
    OppFields.Add Array("Payment Recieved", "00Na0000009rWOG_ileinner")
    OppFields.Add Array("Created By", "CreatedBy_ileinner")
    OppFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
    OppFields.Add Array("Intrax Program", "L00N300000068dfA_ileinner")
    
    EngFields.Add Array("Name", "Name_ileinner")
    EngFields.Add Array("Status", "00Na0000009s14S_ileinner")
    EngFields.Add Array("Opportunity", "CF00Na0000009s14M_ileinner")
    EngFields.Add Array("Year", "00Na000000B2KhB_ileinner")
    EngFields.Add Array("EngStart", "00Na0000009s14D_ileinner")
    EngFields.Add Array("EngEnd", "00Na0000009s14C_ileinner")
    EngFields.Add Array("Program Ready Date", "00Na000000B2kL9_ileinner")
    EngFields.Add Array("Created By", "CreatedBy_ileinner")
    EngFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
    EngFields.Add Array("SEVIS ID", "00Na000000B2eH2_ileinner")
    EngFields.Add Array("Intrax Program", "00Na0000009s14I_ileinner")

Tri = Array("Applications (Account)", "Engagements", "Opportunities")
For i = 0 To 2
    RecPack = PageInfo_Subgrade(RecPack, Tri(i), AppFields)
Next i

cSet = PageInfoF(RecPack, "Engagements")
For i = 0 To UBound(cSet)
Debug.Print cSet(i)(0) & " | " & cSet(i)(1)
Next i

RecPack = PageInfo_RR(RecPack, "Years", Array("Field not Found"))
Set ResultList = New Collection
For i = 0 To 2
    cSet = PageInfoF(RecPack, Tri(i))
    For j = 0 To UBound(cSet)
        Year = (PageInfoF(cSet(j), "Year")(0))
        Set ResultList = cDictionary(ResultList, Year)
        'build year based record sets
        YearSet = PageInfoF(RecPack, "Years")
            If YearSet(0)(0) = "Field not Found" Then
                YearSet = Array(Year, Year, cSet(j))
            Else
                YearSet = PageInfo_RR(YearSet, "")
            End If
    Next j
Next i



Print_L2_HTML (RecPack)

End Sub
Private Function Check_App_Opp_Eng_OrganizebyYear(RecordPackage As Variant, SingleRecord As Variant) As Variant
Dim YearSet As Variant
Dim Year As String
Dim MissingYearSet As Boolean
Dim CurrentYear As Variant

YearSet = PageInfoF(RecordPackage, "Years")

MissingYearSet = False
If IsArray(YearSet) Then
If YearSet(0) = "Field not Found" Then
MissingYearSet = True
End If
End If

Year = PageInfoF(SingleRecord, "Year")(0)

If MissingYearSet Then

Else
    CurrentYear = PageInfoF(YearSet, Year)
End If


End Function
Private Function PageInfo_Subgrade(RecordPackage As Variant, SubPackName As String, FieldList As Collection) As Variant
Dim cSet As Variant
Dim IsViable As Boolean
Dim Reason As String

Reason = SubPackName & " - "
IsViable = True
cSet = PageInfoF(RecordPackage, SubPackName)

    If IsArray(cSet) Then
        If UBound(cSet(0)) <> 2 Then
            Reason = Reason & " Subpack does not appear to be a list. "
            IsViable = False
        End If
    Else
        Reason = Reason & " Subpack is not a valid set. "
        IsViable = False
    End If
    
    If FieldList.count = 0 Then
        Reason = Reason & " Fieldlist is empty. "
        IsViable = False
    Else
        If UBound(FieldList(1)) > 0 Then
        Else
            Reason = Reason & " Fieldlist entry 0 did not contain a field name/ID. " & UBound(FieldList(1))
            IsViable = False
        End If
    End If

If IsViable Then
    For i = 0 To UBound(cSet)
        cSet(i) = Retrieve_Page_Info((cSet(i)(1)), FieldList)
    Next i
    cSet = PageInfo_RR(RecordPackage, SubPackName, cSet)
Else
Debug.Print "Package was not viable because: " & Reason
End If

PageInfo_Subgrade = cSet
End Function

Private Function AppOppEng_Integrity_Report(RecordList As Collection) As String
Dim Ctable As String
Dim CtableRow As String
Dim RecordType As String
Dim RecordID As String
Dim RecordTypeColor As String

Ctable = "<table>"
For i = 1 To RecordList.count
    If RecordID <> (RecordList(i)(1)) Then
        RecordID = RecordList(i)(1)
        RecordType = RecordList(i)(0)
            If Ctable <> "<table>" Then
                Ctable = Ctable & "</table></td></tr><tr><td><br/></td></tr>"
            End If
                'Color Tables for easier Proccessing
                    If RecordType = "Application" Then
                        RecordTypeColor = " bgcolor=""#ffcccc"" "
                    End If
                    If RecordType = "Opportunity" Then
                        RecordTypeColor = " bgcolor=""#d9f2d9"" "
                    End If
                    If RecordType = "Engagement" Then
                        RecordTypeColor = " bgcolor=""#f2e6ff"" "
                    End If
                    
                
        Ctable = Ctable & "<tr><td><Table style=""border: 1px solid black""" & RecordTypeColor & "><caption><a href=""https://na68.salesforce.com/" & RecordID & """>" & RecordType & " - " & RecordID & "</a></caption>"
    Else
            Ctable = Ctable & "<tr><td>" & RecordList(i)(2) & "</td><td>"
                If (RecordList(i)(3)(1)) <> "" Then
                    Ctable = Ctable & "<a href=""https://na68.salesforce.com/" & RecordList(i)(3)(1) & """>"
                        If (RecordList(i)(3)(2)) <> "" Then
                            Ctable = Ctable & RecordList(i)(3)(0) & " on " & RecordList(i)(3)(2)
                        Else
                            Ctable = Ctable & left(RecordList(i)(2), 3) & " - " & RecordList(i)(3)(1)
                        End If
                    Ctable = Ctable & "</a>"
                Else
                    Ctable = Ctable & RecordList(i)(3)(0)
                End If
                    Ctable = Ctable & "</td></tr>"
    End If
        
Next i
Ctable = Ctable & "</table></td>"
Ctable = Ctable & "</tr></table>"

Debug.Print "***" & Ctable & "***"
AppOppEng_Integrity_Report = Ctable

End Function
Private Sub Housing_Send_Link_2update_housing_plan(EngagementID As String, ActivityID As String, Optional Template As String = "00X1B000001qaCq")
Dim IE As Object
Dim Cases As Collection
Dim CaseID As String
Dim CaseUpdates As New Collection
Dim PAX As Variant
Dim HousingPlanID As String

Set Cases = Pull_Master_Child(EngagementID, "CF00Na000000B2eGh", "500")
If UBound(Cases(2)(1)) > 0 Then
    For i = 2 To Cases.count
        If Cases(i)(3)(0) = "Pre-Arrival Housing (PAHR)" Then
            CaseID = Cases(i)(1)(1)
        End If
    Next i
End If

If CaseID = "" Then
'create a new case
    CaseUpdates.Add Array("CF00Na000000B2eGh_lkid", EngagementID)
    CaseUpdates.Add Array("cas14", "Pre-Arrival Housing (PAHR)")
    CaseUpdates.Add Array("cas5", "Housing")
    CaseUpdates.Add Array("cas11", "Email")
    CaseUpdates.Add Array("00Na000000B3Ief", "Participant")
    CaseUpdates.Add Array("00N1300000BLavV", "Send Housing Plan Link")
    CaseUpdates.Add Array("cas21", "0")
    CaseUpdates.Add Array("cas7", "Closed")
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh")
    CaseID = PushUpdates2Page(IE, CaseUpdates)
    CaseID = Right(CaseID, 15)
End If

'find housing plan asssessment ID
    Set CaseUpdates = Pull_Master_Child(EngagementID, "CF00Na000000B2Kf5", "a1l")
    For i = 2 To CaseUpdates.count
        If CaseUpdates(i)(3)(0) = "WT PT Housing Plan" Then
            HousingPlanID = CaseUpdates(i)(1)(1)
        End If
    Next i
    
    If HousingPlanID <> "" Then
    
        PAX = PAXbasicInfo(EngagementID, CaseID, "", 2)
        PAX = AddTemplate(PAX, FetchEmailTemplate(Template))
        PAX(3, 1) = Replace(PAX(3, 1), "<2HousingPlan Assessment>", HousingPlanID, 1, , vbTextCompare)
        
        Set CaseUpdates = New Collection
            CaseUpdates.Add Array("00N1300000BLavV", "Email with Housing Plan Update link sent successfully")
        Call Send_HTMLEmail(PAX, "noreply", CaseUpdates)

        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ActivityID & "/e")
            Set CaseUpdates = New Collection
                CaseUpdates.Add Array("tsk3_lkid", CaseID)
            Call PushUpdates2Page(IE, CaseUpdates)
    Else
    'mark case that no housing plan was found
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & CaseID & "/e")
        Set CaseUpdates = New Collection
            CaseUpdates.Add Array("00N1300000BLavV", "Link not sent - No Housing Plan Assessment Found")
        Call PushUpdates2Page(IE, CaseUpdates)
    End If

IE.Quit
Set IE = Nothing
End Sub
Private Function Collection2Variant(Table As Collection) As Variant
Dim Rows As New Collection

For i = 1 To Table.count
    Rows.Add CollectionConverter(Table(i))
Next i

Collection2Variant = CollectionConverter(Rows)

End Function
Private Function CollectionConverter(cSet As Collection) As Variant
Dim ArraySet As Variant

If cSet.count = 1 Then
    ArraySet = Array(cSet(1))
Else
    If cSet.count = 0 Then
        Debug.Print "Collection is empty"
        ArraySet = ""
    Else
        ReDim ArraySet(cSet.count - 1)
        
        For i = 1 To cSet.count
            ArraySet(i - 1) = cSet(i)
        Next i
    End If
End If

'Debug.Print "Conversion has " & UBound(ArraySet)
CollectionConverter = ArraySet
End Function

Private Function IsArray(Value As Variant) As Boolean

IsArray = False
On Error GoTo NotAnArray
If UBound(Value) > -1 Then
    IsArray = True
End If

NotAnArray:
End Function


Private Sub Check_App_Opp_EngV2(AccountID As String)
Dim AppFields As New Collection
Dim OppFields As New Collection
Dim EngFields As New Collection
Dim IE As Object
Dim ResultList As Collection
Dim RecordsFound As New Collection
Dim RecordInfo As Collection
Dim YearList As New Collection
Dim RelationshipList As Variant
Dim CurrentSearch As Collection
Dim FieldResult As Variant
Dim FakePAX As Variant
Dim EmailBody As String
Dim Diagnostics As String
Dim OverlapList As Collection
Dim ErrorInstruct As Variant
Dim Dates As Collection
Dim Engagements As Collection
Dim TableAsVariant As Variant

AppFields.Add Array("Name", "Name_ileinner")
AppFields.Add Array("Stage", "00Na0000009qGpE_ileinner")
AppFields.Add Array("Engstart", "00Na0000009qBVG_ileinner")
AppFields.Add Array("EngEnd", "00Na000000Algwg_ileinner")
AppFields.Add Array("Year", "00Na0000009qDo5_ileinner")
AppFields.Add Array("Last App Sync", "00Na000000B2tGU_ileinner")
AppFields.Add Array("Opportunity", "CF00N30000009pTjS_ileinner")
AppFields.Add Array("Engagement", "CF00Na000000B2Kea_ileinner")
AppFields.Add Array("Created By", "CreatedBy_ileinner")
AppFields.Add Array("Intrax Program", "00Na0000009qDAF_ileinner")

OppFields.Add Array("Name", "opp3_ileinner")
OppFields.Add Array("Stage", "opp11_ileinner")
OppFields.Add Array("Close Date", "opp9_ileinner")
OppFields.Add Array("Year", "00N300000068ZDp_ileinner")
OppFields.Add Array("EngStart", "00N30000007CQKk_ileinner")
OppFields.Add Array("EngEnd", "00N30000007CQKp_ileinner")
OppFields.Add Array("Payment Recieved", "00Na0000009rWOG_ileinner")
OppFields.Add Array("Created By", "CreatedBy_ileinner")
OppFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
OppFields.Add Array("Intrax Program", "L00N300000068dfA_ileinner")

EngFields.Add Array("Name", "Name_ileinner")
EngFields.Add Array("Status", "00Na0000009s14S_ileinner")
EngFields.Add Array("Opportunity", "CF00Na0000009s14M_ileinner")
EngFields.Add Array("Year", "00Na000000B2KhB_ileinner")
EngFields.Add Array("EngStart", "00Na0000009s14D_ileinner")
EngFields.Add Array("EngEnd", "00Na0000009s14C_ileinner")
EngFields.Add Array("Program Ready Date", "00Na000000B2kL9_ileinner")
EngFields.Add Array("Created By", "CreatedBy_ileinner")
EngFields.Add Array("Last Modified", "LastModifiedBy_ileinner")
EngFields.Add Array("SEVIS ID", "00Na000000B2eH2_ileinner")
EngFields.Add Array("Intrax Program", "00Na0000009s14I_ileinner")

RelationshipList = Array(Array("Application", "CF00N30000009oxCj", "a0U"), _
                            Array("Engagement", "CF00Na0000009s148", "a0d"), _
                            Array("Opportunity", "Opp4", "006"))

For i = 0 To UBound(RelationshipList)
    Set ResultList = Pull_Master_Child(AccountID, (RelationshipList(i)(1)), (RelationshipList(i)(2)))
        For j = 2 To ResultList.count
            If UBound(ResultList(j)(1)) > 0 Then
                RecordsFound.Add Array(RelationshipList(i)(0), ResultList(j)(1)(1))
            End If
        Next j
Next i

Set ResultList = New Collection

For i = 1 To RecordsFound.count
    If (RecordsFound(i)(0)) = "Application" Then
        Set CurrentSearch = AppFields
    End If
    
    If (RecordsFound(i)(0)) = "Engagement" Then
        Set CurrentSearch = EngFields
    End If
    
    If (RecordsFound(i)(0)) = "Opportunity" Then
        Set CurrentSearch = OppFields
    End If
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & RecordsFound(i)(1))
    Set RecordInfo = New Collection
        For j = 1 To CurrentSearch.count
            FieldResult = FetchField(IE, (CurrentSearch(j)(1)))
                If (CurrentSearch(j)(0)) = "Year" Then
                    Set YearList = cDictionary(YearList, Array((FieldResult(0)), "Status"))
                End If
            RecordInfo.Add Array(CurrentSearch(j)(0), FieldResult(0), FieldResult(1))
            'ResultList.Add Array(RecordsFound(i)(0), RecordsFound(i)(1), CurrentSearch(j)(0), FetchField(IE, (CurrentSearch(j)(1))))
        Next j
                                'Type               ID                      info as variant           statuslog
    ResultList.Add Array((RecordsFound(i)(0)), (RecordsFound(i)(1)), CollectionConverter(RecordInfo), "")
Next i

Set CurrentSearch = New Collection
    ' Make a list of every year found in records
    For i = 1 To YearList.count
        For j = 1 To ResultList.count
            For k = 0 To UBound(ResultList(j)(2))
                If (ResultList(j)(2)(k)(0)) = "Year" Then
                    Debug.Print "Current year " & YearList(i)(0)(0)
                    Debug.Print "Year value found: " & ResultList(j)(2)(k)(1)
                End If
            Next k
        Next j
    Next i
    

    For i = 1 To CurrentSearch.count
        Set RecordInfo = New Collection
        
    Next i
        
        TableAsVariant = Collection2Variant(ResultList)
        For j = 0 To UBound(TableAsVariant)
            If IsArray(TableAsVariant(j)) Then
                For k = 0 To UBound(TableAsVariant(j))
                    Debug.Print "Converted table info: " & TableAsVariant(j)(k)(0)
                Next k
            End If
        Next j

    
    'Extra Diagnostics info
        Set OverlapList = Nothing
        For i = 1 To ResultList.count
            ErrorInstruct = Array(False, "Relationship")
            
            If ResultList(i)(2) = "Year" Then
                Set Dates = cDictionary(Dates, Array(ResultList(i)(3)(0)))
            End If
            
            Debug.Print "Entry type is " & ResultList(i)(0) & " Field name is " & ResultList(i)(2)
            If ResultList(i)(0) = "Application" And ResultList(i)(2) = "Opportunity" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "App2Opp-"
            End If
            
            If ResultList(i)(0) = "Application" And ResultList(i)(2) = "Engagement" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "App2Eng-"
            End If
            
            If ResultList(i)(0) = "Engagement" And ResultList(i)(2) = "Opportunity" Then
                ErrorInstruct(0) = True
                ErrorInstruct(1) = "Eng2Opp-"
            End If
            
            If ErrorInstruct(0) And ResultList(i)(3)(1) <> "" Then
                Set OverlapList = cDictionary(OverlapList, Array(ErrorInstruct(1) & ResultList(i)(3)(1), ResultList(i)(3)(1), ResultList(i)(3)(0)))
            End If
        Next i
        
        Diagnostics = "<span>Program Years Detected: <strong>"
        For i = 1 To Dates.count
            Diagnostics = Diagnostics & "  " & Dates(i)(0)(0)
        Next i
        
        Diagnostics = Diagnostics & "</strong></span><br/><br/>"
        Diagnostics = Diagnostics & "<span><strong>List of Reused records</strong></span><br/>"
        
        
        For i = 1 To OverlapList.count
            If OverlapList(i)(1) * 1 > 1 Then
            Debug.Print "Duplicate finder: " & OverlapList(i)(0)(0) & " = " & OverlapList(i)(1)
            Diagnostics = Diagnostics & "<div><a href=""https://na68.salesforce.com/" & OverlapList(i)(0)(1) & """>" & OverlapList(i)(0)(0) & "</a> is being reused " & OverlapList(i)(1) & " times.</div>"
            End If
        Next i
        If Diagnostics <> "" Then
            
        End If
        



EmailBody = AppOppEng_Integrity_Report(ResultList)
EmailBody = "<a href=""https://na68.salesforce.com/" & AccountID & """>Summary of Account " & AccountID & "</a><br/><br/>" & Diagnostics & "<br/><br/>" & EmailBody

FakePAX = PAXbasicInfo("", "", "", 1)
FakePAX = AddTemplate(FakePAX, FetchEmailTemplate("00X1B000001qa98"))
FakePAX(3, 1) = Replace(FakePAX(3, 1), "<PAX List Table>", EmailBody, 1, , vbTextCompare)
FakePAX(0, 1) = "amey@intraxinc.com"
FakePAX(39, 2) = AccountID
FakePAX(20, 1) = "Report Holder"
FakePAX(20, 2) = "0031B00002btcYo"

Set ResultList = New Collection
Call Send_HTMLEmail(FakePAX, "noreply", ResultList)

IE.Quit
Set IE = Nothing
End Sub

Private Sub Send_Warning(PAX As Variant)
Dim DataCollection As Collection

    PAX(2, 1) = "Partner not recognized during PAX Info Table Proccessing - " & PAX(9, 1)
    PAX(20, 2) = "0031B00002bteMh"
    
    PAX(3, 1) = "Dear Person,<br/><br/>The partner was not recognized, so information could not be retrieved.<br/><br/><a href=""https://na68.salesforce.com/<2Partner>""><1Partner></a><br/><br/>"
    
    Set DataCollection = New Collection
    Call Send_HTMLEmail(PAX, "NoReply", DataCollection)
    
End Sub

Private Function SEVIS_CollectInfo(EngagementID As String) As Variant
Dim FieldList As Collection
Dim Engagement As Variant

'Engagement
    Set FieldList = New Collection
        FieldList.Add Array("Sevis", "CF00Na000000B2eHF_ileinner", "")
        FieldList.Add Array("SEVIS ID", "00Na000000B2eH2_ileinner", "")
        FieldList.Add Array("Skip Reason", "00Na000000B2eH9_ileinner", "")
        FieldList.Add Array("Sevis Lock", "00Na000000B2mEA_ileinner", "")
        FieldList.Add Array("Update EV", "00Na000000B2eH8_ileinner", "")
        FieldList.Add Array("Biographical", "00Na000000B2eHA_ileinner")
        FieldList.Add Array("Program Amend", "00Na000000B2eHB_ileinner")
        FieldList.Add Array("SOA add", "00Na000000B2eHC")
        FieldList.Add Array("SOA edit", "00Na000000B2eHD_ileinner")
        FieldList.Add Array("SOA nonstandard", "00Na000000B3Lj1_ileinner")
        FieldList.Add Array("Validate US address", "00Na000000B2eHE_ileinner")
        FieldList.Add Array("Update US address", "00Na000000B39A7_ileinner")
        FieldList.Add Array("When Validation Sent", "00Na000000B39A6_ileinner", "")
        FieldList.Add Array("Matches", "_00Na0000009s14h", "")

    Engagement = Retrieve_Page_Info(EngagementID, FieldList)
    
    
'SEVIS Object
    Set FieldList = New Collection
        FieldList.Add Array("SEVIS Acknowledgement", "00Na000000B2eI1_ileinner", "")
        FieldList.Add Array("SEVIS Acknowledgement Received At", "00Na000000B2eHz_ileinner", "")
        FieldList.Add Array("SEVIS Acknowledgement Results", "00Na000000B2eI0_ileinner", "")
        FieldList.Add Array("SEVIS When Downloaded", "00Na000000B2eIG_ileinner", "")
        FieldList.Add Array("SEVIS Response", "00Na000000B2eIF_ileinner", "")
        FieldList.Add Array("SEVIS Response Detailed", "00Na000000B2eIE_ileinner", "")
        FieldList.Add Array("SEVIS Response Received At", "00Na000000B2eID_ileinner", "")
        FieldList.Add Array("SEVIS DS2019 Date", "00Na000000B2eI4_ileinner", "")
        FieldList.Add Array("SEVIS DS2019 DocGuid", "00Na000000B2eI5_ileinner", "")
        FieldList.Add Array("SEVIS DS7002 Date", "00N1300000BRmg9_ileinner", "")

    If left(PageInfoF(Engagement, "Sevis")(1), 3) = "a20" Then 'make sure there's a sevis object to lookup
    Engagement = PageInfo_RR(Engagement, "SEVIS", Retrieve_Page_Info((PageInfoF(Engagement, "Sevis")(1)), FieldList))
    End If

SEVIS_CollectInfo = Engagement
End Function
Sub Ztesting_SEVIS()
Dim EngagementID As String

EngagementID = "a0d1B00000TxF1h"
SEVIS_Repair_2manyBoxes (SEVIS_CollectInfo(EngagementID))


End Sub
Private Function SEVIS_Repair_2manyBoxes_Fixer(PAX As Variant) As Variant
Dim Fixes As New Collection
Dim Updates2Push As New Collection
Dim vList As Variant
Dim Match As Variant
Dim IE As Object
Dim FieldList As Collection
Dim URL As String
Dim CorrectionsRequired As Boolean

'###### Issue 1 - Validate US Address and add SOA boxes are checked.  If add SOA on match is checked, it needs to be unchecked.
'   Solution: check all the confirmed matches for an Add SOA box, uncheck that box,
If PageInfoF(PAX, "Validate US address")(1) = 1 And PageInfoF(PAX, "SOA add")(1) = 1 Then
    Debug.Print "Validate and add SOA conflict.  Need to fix Match"
    vList = PageInfoF(PAX, "Matches")

        For i = 0 To UBound(vList)
            If PageInfoF(vList(i), "Stage")(0) = "Confirmed" Then
                URL = "https://na68.salesforce.com/" & vList(i)(1) & "/e"
                Call opNAV(IE, "nav", URL)
                If FetchField(IE, "00Na000000B2eHZ")(0) = "1" Then
                    Set FieldList = New Collection
                        FieldList.Add Array("00Na000000B2eHZ", "0")
                    Call PushUpdates2Page(IE, FieldList, True)
                    Debug.Print "add SOA on match unchecked"
                    IE.Visible = True
                    Fixes.Add "<br/>Unchecking add SOA on Match " & AnchorMaker(vList(i)) & "<br/>"
                    URL = URL & "?00Na000000B2eHZ=1"
                    Updates2Push.Add URL
                End If
            End If
        Next i
End If

Set FieldList = New Collection
CorrectionsRequired = False
If Fixes.count > 0 Then
    FieldList.Add Array("Fixer Details", "", CollectionConverter(Fixes))
End If
If Updates2Push.count > 0 Then
    FieldList.Add Array("Fixer Instructions", "", CollectionConverter(Updates2Push))
    CorrectionsRequired = True
End If

    FieldList.Add Array("Corrections Required?", "", Array(CorrectionsRequired, ""))
    
    'vList = Array("Fixer", "", Array("Blank Safety Net", "", Array("", "")))
    
    
Call opNAV(IE, "quit")
SEVIS_Repair_2manyBoxes_Fixer = CollectionConverter(FieldList)
End Function
Private Sub SEVIS_Repair_2manyBoxes(PAX As Variant)
Dim SEVISitems As Variant
Dim tElement As Variant
Dim IE As Object
Dim FieldList As Collection
Dim Boxes As Variant
Dim HasConflict As Boolean
Dim CheckedBoxes As Collection
Dim SEVISUpdateList As New Collection
Dim BoxesToToggle As Collection
Dim ActLog As New Collection
Dim ActivityCol As Collection
Dim RepairResult As String
Dim FailureReason As String


        SEVISUpdateList.Add Array("Validate US address", "00Na000000B2eHE", "Exclusive")
        SEVISUpdateList.Add Array("SOA add", "00Na000000B2eHC", "Exclusive")
        SEVISUpdateList.Add Array("Program Amend", "00Na000000B2eHB", "")
        SEVISUpdateList.Add Array("Biographical", "00Na000000B2eHA", "")
        SEVISUpdateList.Add Array("SOA edit", "00Na000000B2eHD", "Exclusive")
        'SEVISUpdateList.Add Array("Update EV", "00Na000000B2eH8", "")
        SEVISUpdateList.Add Array("SOA nonstandard", "00Na000000B3Lj1", "")
        SEVISUpdateList.Add Array("Update US address", "00Na000000B39A7", "")
        SEVISUpdateList.Add Array("SEVIS ID", "00Na000000B2eH2", "")


If PageInfoF(PAX, "Sevis Lock")(1) = "1" Then
Debug.Print "Engagement has already been sent 2 SEVIS and is locked"
Else

    
    If PageInfoF(PAX, "SOA nonstandard")(1) = 1 And PageInfoF(PAX, "SOA add")(1) = 1 Then
        Debug.Print "Has new placement, so no placement update not required"
        PAX = PageInfo_RR(PAX, "SOA nonstandard", Array("False", "0"))
        PAX = PageInfo_RR(PAX, "Conflict", Array("NonStandard & SOA Add", "1"))
    Else
        PAX = PageInfo_RR(PAX, "Conflict", Array("NonStandard & SOA Add", "0"))
    End If
    
    Set ActivityCol = New Collection
    HasConflict = False
    Set CheckedBoxes = New Collection
    For i = 1 To SEVISUpdateList.count
    
    
        CurrentBox = PageInfoF(PAX, (SEVISUpdateList(i)(0)))
        ActivityCol.Add Array(SEVISUpdateList(i)(0), CurrentBox(0))
        If CurrentBox(1) = 1 Then
            CheckedBoxes.Add Array(SEVISUpdateList(i)(1), "1", SEVISUpdateList(i)(2), SEVISUpdateList(i)(0))
            If SEVISUpdateList(i)(2) = "Exclusive" Then
                HasConflict = True
            End If
        End If
    Next i
    ActLog.Add "Hello,<br/><br/>Ananalys shows that there are " & CheckedBoxes.count & " boxes checked.  Are any of the boxes exclusive (cannot be sent with other boxes)?  " & HasConflict & "<br/>"
    ActLog.Add HC_Roster_Print_Table("Original for <a href=""https://na68.salesforce.com/" & PAX(1) & """>" & PAX(0) & "</a>", Array("Checkbox", "Value"), CollectionConverter(ActivityCol))
    ActLog.Add "<br/><br/>"
    
    PAX = PageInfo_RR(PAX, "Fixer", Array("", "", Array("", "")))
    PAX = PageInfo_RR(PAX, "Fixer", Array("Fixer", "", SEVIS_Repair_2manyBoxes_Fixer(PAX))) 'Initializes a fixer to detect and fix special issues
    'PAX = PageInfo_RR(PAX, "Fixer", tElement)
    
    tElement = PageInfoF(PAX, "Fixer")
    If PageInfoS(tElement, "Corrections Required?")(0) = "True" Then
    tElement = PageInfoS(PAX, "Fixer.Fixer Details")
        For i = 0 To UBound(tElement)
            ActLog.Add tElement(i) 'include list of actions taken by fixer in email activity log
        Next i
    End If
       
    
    If CheckedBoxes.count > 1 Then
        'prepare to toggle boxes
        If HasConflict Then
            If CheckedBoxes(1)(2) = "Exclusive" Then
            ActLog.Add "Because " & CheckedBoxes(1)(3) & " is exclusive, all other boxes need to be unchecked to send update.<br/>"
                Set BoxesToToggle = New Collection
                For i = 2 To CheckedBoxes.count
                    BoxesToToggle.Add CheckedBoxes(i)
                Next i
            Else
                For i = 2 To CheckedBoxes.count
                    If CheckedBoxes(i)(2) = "Exclusive" Then
                    BoxesToToggle.Add CheckedBoxes(i)
                    End If
                Next i
            End If
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PAX(1) & "/e")
            If BoxesToToggle.count > 0 Then
                Set ActivityCol = New Collection
                If PageInfoF(PAX, "Conflict")(1) = 1 Then
                    ActivityCol.Add Array("Step 0", "NonStandard & SOA Add Conflict", "voiding NonStandard")
                End If
                Set FieldList = New Collection
                    For i = 1 To BoxesToToggle.count
                    'Debug.Print "box to uncheck?  " & BoxesToToggle(i)(0)
                        FieldList.Add Array(BoxesToToggle(i)(0), "0")
                        ActivityCol.Add Array("Step 1", BoxesToToggle(i)(3), "will be unchecked")
                    Next i
                Call PushUpdates2Page(IE, FieldList) 'uncheck boxes and save
                ActivityCol.Add Array("Step 2", "Extra Boxes Being Unchecked", "Changes are being saved")
                Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/SendToSevis?scontrolCaching=1&id=" & PAX(1)) 'Hit Send2SEVIS
                ActivityCol.Add Array("Step 3", "Send2SEVIS", "button pushed")
                Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PAX(1) & "/e?retURL=" & PAX(1)) 'go back to engagement
                Set FieldList = New Collection
                    For i = 1 To BoxesToToggle.count
                        FieldList.Add Array(BoxesToToggle(i)(0), "1")
                        ActivityCol.Add Array("Step 4", BoxesToToggle(i)(3), "will be re-checked")
                    Next i
                Call PushUpdates2Page(IE, FieldList) 'recheck boxes
                ActivityCol.Add Array("Step 5", "Box re-checking complete", "Changes are being saved")
                
                PAX = PageInfo_RR(PAX, "Post Lock", FetchField(IE, "00Na000000B2mEA_ileinner"))
                PAX = PageInfo_RR(PAX, "Sevis Skipped Processing Reason", FetchField(IE, "00Na000000B2eH9_ileinner"))
                
                Debug.Print "post save lock status = " & FetchField(IE, "00Na000000B2eH9_ileinner")(0)
                If PageInfoF(PAX, "Post Lock")(1) = 1 Then
                    RepairResult = "SUCCESS"
                    ActivityCol.Add Array("Step 6", "Confirming SEVIS Lock", RepairResult)
                Else
                    RepairResult = "Failed"
                    PAX = SEVIS_Repair_2manyBoxes_Fail(PAX)
                    FailureReason = PageInfoS(PAX, "Sevis Errors")(0)
                End If
                
                ActLog.Add HC_Roster_Print_Table("Action List", Array("Step", "Item", "Action"), CollectionConverter(ActivityCol))
                ActLog.Add "<p>Sevis Skipped Processing Reason is now: <b>" & PageInfoF(PAX, "Sevis Skipped Processing Reason")(0) & "</b>.</p>"
            Else
                Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/SendToSevis?scontrolCaching=1&id=" & PAX(1))
            End If
            
        Else
        'safe to send all to SEVIS
        ActLog.Add "No exclusive boxes are checked, so everything can be sent 2 sevis.<br/>"
        RepairResult = "No Conflict"
        End If
    Else
    ActLog.Add "<br/>No toggling was required<br/>"
        'no action required
    End If
    
    If PageInfoS(PAX, "Fixer.Corrections Required?")(0) = "True" Then '
    ActLog.Add "<br/><br/>Fixer post SEVIS actions:"
    tElement = PageInfoS(PAX, "Fixer.Fixer Instructions")
        For i = 0 To UBound(tElement)
            Call opNAV(IE, "nav", (tElement(i)))
            Call HitSave(IE)
            ActLog.Add "<br/>&nbsp;&nbsp;&nbsp;&bull;&nbsp;" & tElement(i) & "<br/>"
        Next i
    End If
    
    If RepairResult <> "" Then
        ActLog.Add "<br/><br/>" & FailureReason & "<br/><br/>"
    End If

'This closes out and sends a diagnostic email
    ActLog.Add "<br/><br/>Thank You<br/>"
    Dim EmailBody As String
    Dim FakePAX As Variant
    For i = 1 To ActLog.count
    EmailBody = EmailBody & ActLog(i)
    Next i
    
    FakePAX = PAXbasicInfo("", "", "", 1)
        FakePAX(2, 1) = "SOS - Engagement with too many SEVIS boxes checked " & PageInfoF(PAX, "SEVIS ID")(0)
        
        If RepairResult <> "" Then
            FakePAX(2, 1) = FakePAX(2, 1) & " - " & RepairResult
        End If
        FakePAX(39, 2) = PAX(1)
        FakePAX(20, 2) = "0031B00002eGZCa"
        FakePAX(3, 1) = EmailBody
        
        Set FieldList = New Collection
        
        Call Send_HTMLEmail(FakePAX, "NoReply", FieldList)

Call opNAV(IE, "quit")
End If

End Sub
Private Function SEVIS_Repair_2manyBoxes_Fail(PAX As Variant) As Variant
Dim FieldList As New Collection
Dim SevisObj As Variant
Dim tString As String


    FieldList.Add Array("SEVIS Acknowledgement", "00Na000000B2eI1_ileinner")
    FieldList.Add Array("SEVIS Acknowledgement Results", "00Na000000B2eI0_ileinner")
    FieldList.Add Array("SEVIS Request Sent At", "00Na000000B2eIC_ileinner")
    FieldList.Add Array("SEVIS Acknowledgement Received At", "00Na000000B2eHz_ileinner")
SevisObj = Retrieve_Page_Info((PageInfoF(PAX, "Sevis")(1)), FieldList)

If InStr(1, (PageInfoF(SevisObj, "SEVIS Acknowledgement Results")(0)), "\d{10}"":.phoneNumber", vbTextCompare) > 0 Then
    SevisObj = PageInfo_RR(SevisObj, "Phone Error on account", Array(""))
End If

PAX = PageInfo_RR(PAX, "Sevis", SevisObj)
PAX = PageInfo_RR(PAX, "Sevis Errors", Convert_Record2Table(SevisObj))

SEVIS_Repair_2manyBoxes_Fail = PAX

End Function
Private Function Convert_Record2Table(RecordPack As Variant) As String
Dim Entries As New Collection
Dim ListofEntries As Variant
Dim tString As String


If UBound(RecordPack) > 1 Then
If IsArray(RecordPack(2)) Then
    For i = 0 To UBound(RecordPack(2))
        If IsArray(RecordPack(2)(i)(0)) Then
            'Values are a list and not a regular entry
        Else
            If Len(RecordPack(2)(i)(2)(1)) = 15 Then 'if value is a link, create link there
                tString = AnchorMaker(RecordPack(2)(i)(2))
            Else
                tString = RecordPack(2)(i)(2)(0)
            End If
            Entries.Add Array(RecordPack(2)(i)(0), tString)
        End If
    Next i
    
    Convert_Record2Table = HC_Roster_Print_Table(AnchorMaker(RecordPack), Array("Field", "Value"), CollectionConverter(Entries))
End If
End If

End Function
Private Function AnchorMaker(Value0ThenLink1Array As Variant, Optional ExternalLink As Boolean = False, Optional Salesforce As String = "na68") As String
Dim AnchorText As String

AnchorText = "<a href="""

If ExternalLink Then
    AnchorText = AnchorText & Value0ThenLink1Array(1)
Else
    AnchorText = AnchorText & "https://" & Salesforce & ".salesforce.com/" & Value0ThenLink1Array(1)
End If

AnchorText = AnchorText & """>" & Value0ThenLink1Array(0) & "</a>"

AnchorMaker = AnchorText
End Function
Private Function Retrieve_Page_Info(PageID As String, FieldList As Collection, Optional Salesforce As String = "na68", Optional UseEditPage As Boolean = False) As Variant
Dim IE As Object
Dim FieldResults As Collection
Dim ErrorMsg As String
Dim RetrievedOutput As Variant
Dim RecordName As String
Dim RecordTypeList As Collection
Dim Title As Object
Dim RecordType As String
Dim How2ObtainRecordName As New Collection
Dim TableLinkID As String
Dim ExtraLongTableIE As Object
Dim FetchExtraLongList As Boolean
Dim PageSubTable As Variant

'fieldlist should be name then ID

RetrievedOutput = Array(Array("", ""))
'Check input info integrity
    'On Error GoTo InvalidInputForRetrieval
    On Error Resume Next
    
    If Len(PageID) <> 15 Then
        ErrorMsg = ErrorMsg & "|Page ID is not valid|"
        GoTo InvalidInputForRetrieval
    End If
    
    If FieldList.count > 0 Then
        If UBound(FieldList(1)) < 1 Then
            ErrorMsg = ErrorMsg & "|Field List item 1 does not contain 2 entries|"
            GoTo InvalidInputForRetrieval
        End If
    Else
        ErrorMsg = ErrorMsg & "|Field List is empty|"
        GoTo InvalidInputForRetrieval
    End If
    
    'navigate to page
    
    If UseEditPage Then
        RecordName = PageID & "/e"
    Else
        RecordName = PageID
    End If
    Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & RecordName)
    'collect field values
        Set FieldResults = New Collection
        For i = 1 To FieldList.count
            RecordName = FieldList(i)(1)
            '##check if request is for a subtable, otherwise fetch field as normal
            If left(RecordName, 1) <> "_" Then
            'process fetching a regular field
                If UseEditPage Then
                Else
                    If InStr(1, (FieldList(i)(1)), "_ileinner", vbTextCompare) < 10 Then 'makes sure the request is accurate
                        RecordName = RecordName & "_ileinner"
                    End If
                End If
                FieldResults.Add Array(FieldList(i)(0), FieldList(i)(1), FetchField(IE, RecordName))
            Else
            'pull an entire table as the value of the field
                FetchExtraLongList = False
                TableLinkID = RecordName
                RecordName = PageID & RecordName
                PageSubTable = Pull_Table_From_Page(IE, RecordName)
                If IsArray(PageSubTable) = False Then
                    PageSubTable = Array("")
                End If
                Debug.Print "Number of items " & UBound(PageSubTable(2)) & " | " & FieldList(i)(0)
                Debug.Print "Length check " & UBound(PageSubTable)
                'MsgBox "Long list", , "Alert)"
                
                
                If UBound(PageSubTable) > 35 Then
                    FetchExtraLongList = True
                End If
                If FetchExtraLongList Then 'If there's too many items
                    Call opNAV(ExtraLongTableIE, "nav", "https://" & Salesforce & ".salesforce.com/a0R?rlid=" & Replace(TableLinkID, "_", "") & "&id=" & PageID & "&rowsperpage=500")
                    PageSubTable = Pull_Table_From_Page(ExtraLongTableIE, "bodyCell")
                    
                    'Debug.Print "Header Name of related objects section: " & Fieldlist(i)(0) & " | " & RetrievedOutput(0)
                    ExtraLongTableIE.Visible = True
                    
                    Call opNAV(ExtraLongTableIE, "quit")
                    PageSubTable(0) = FieldList(i)(0)
                End If
                FieldResults.Add PageSubTable
                
            End If
        Next i
        
        RetrievedOutput = CollectionConverter(FieldResults)
    
    'Set Record Name
        How2ObtainRecordName.Add Array("001", "acc2_ileinner") 'special account name field
        How2ObtainRecordName.Add Array("003", "con2_ileinner") 'special contact name field
        
        RecordType = left(PageID, 3)
        RecordName = ""
        
        For i = 1 To How2ObtainRecordName.count
            If RecordType = How2ObtainRecordName(i)(0) Then ' find special record type names
                RecordName = FetchField(IE, (How2ObtainRecordName(i)(1)))(0)
            End If
        Next i
        
        If RecordName = "" Then 'if we didn't obtain the record name from the specials list, use title method
            Set Title = IE.document.getelementsbyclassname("bPageTitle")(0)
            RecordName = Title.getelementsbytagname("h2")(0).innerhtml
        End If


InvalidInputForRetrieval:
Debug.Print ErrorMsg

If RetrievedOutput(0)(0) = "" Then
Debug.Print "Looks Like Table is blank"
Retrieve_Page_Info = Array(ErrorMsg)
Else
Retrieve_Page_Info = Array(RecordName, PageID, RetrievedOutput)
End If

Call opNAV(IE, "quit")
End Function

Sub FindPageTables()
Dim IE As Object
Dim URL As String
Dim PageContent As Object
Dim Counter As Double
Dim directions As Collection
Dim Spider As Object
Dim variousresults As Collection

URL = "a0d1B00000TwtEZ"

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & URL)

Set PageContent = IE.document.Body.getelementsbyclassname("bPageBlock brandSecondaryBrd secondaryPalette")

Counter = 0
For Each eresult In PageContent
    Counter = Counter + 1
    If InStr(1, eresult.innerhtml, "Matches", vbTextCompare) > 0 Then
        
    Debug.Print eresult.getelementsbytagname("table")(0).innerhtml
    Debug.Print "********************"
    Debug.Print eresult.getelementsbytagname("table")(0).getelementsbytagname("tr")(0).innerhtml
    End If
Next eresult
Debug.Print Chr(10) & Chr(10) & "*************** " & PageContent(4).innerhtml
Debug.Print Counter & " entries found!"
Debug.Print IE.document.Body.getelementsbyclassname("listRelatedObject Custom37Block")(0).getelementsbytagname("div")(0).getelementsbytagname("div")(0).getelementsbytagname("table")(0).getelementsbytagname("tbody")(0).getelementsbytagname("tr")(0).getelementsbytagname("td")(0).getelementsbytagname("h3")(0).innerhtml
Set Spider = IE.document.Body.getelementsbyclassname("listRelatedObject Custom37Block")(0).getelementsbytagname("div")(0).getelementsbytagname("div")(0).getelementsbytagname("table")(0).getelementsbytagname("tbody")(0).getelementsbytagname("tr")(0).getelementsbytagname("td")
Debug.Print "Partial search - " & Spider(0).getelementsbytagname("h3")(0).innerhtml

Set directions = New Collection
    directions.Add "div"
    directions.Add "div"
    directions.Add "table"
    directions.Add "tbody"
    directions.Add "tr"
    directions.Add "td"
    directions.Add "h3"
    
    Set Spider = PageContent
    Set variousresults = New Collection
    variousresults.Add PageContent(0)
    For i = 1 To directions.count
        Debug.Print "browsing " & directions(i)
        Set Spider = variousresults(i).getelementsbyclassname((directions(i)))

        Debug.Print "$$$" & Spider(0).innerhtml
        variousresults.Add Spider(0)
    Next i
    Debug.Print "Final Output = " & Spider(0).innerhtml

End Sub

Sub Proccess_CheckIn(AssessmentID As String)
Dim FieldList As Collection
Dim AssessmentInfo As Variant
Dim Address As Variant
Dim IE As Object
Dim FieldInfo As Variant
Dim M3ssage As String
Dim ListofIssues As Collection
Dim PrimeSiteInfo As Variant
Dim PrimeSite As String
Dim ReportingRequirement As String

Dim PlanFields As Variant
Dim navresults As Boolean
Dim URL As String
Dim LandlordSearch As Collection
Dim LandlordID As String
Dim Field As Object

Dim phone As String

 
HousingPlan = HousingPlanID
Call opNAV(IE, "nav", "https://na68.salesforce.com/" & HousingPlan)

Set FieldList = New Collection
    FieldList.Add Array("Street", "00Na000000B34SF_ileinner")
    FieldList.Add Array("Unit", "00Na000000B34SE_ileinner")
    FieldList.Add Array("City", "00Na000000B34S5_ileinner")
    FieldList.Add Array("State", "00Na000000B34SD_ileinner")
    FieldList.Add Array("Zip", "00Na000000B34SC_ileinner")
    FieldList.Add Array("Distance", "00Na000000B3LyZ_ileinner")
    FieldList.Add Array("Engagement", "CF00Na000000B2Kf5_ileinner")
    FieldList.Add Array("Match", "CF00Na000000B2Kff_ileinner")
    FieldList.Add Array("HC", "CF00Na000000B2KfU_ileinner")


AssessmentInfo = Retrieve_Page_Info(AssessmentID, FieldList)
 
Address = AddressParse((AssessmentInfo(2)(0)(2)(0)), (PageInfoF(AssessmentInfo, "Unit")(0)), (AssessmentInfo(2)(2)(2)(0)), (AssessmentInfo(2)(3)(2)(0)), (AssessmentInfo(2)(4)(2)(0)))

Set ListofIssues = New Collection

If Address(15) Then
    'street address is damaged
    ListofIssues.Add "Incomplete/Invalid Address:<br/><br/>American addresses have standard format. An example can be found below:<br/>   Number of House or Building/ Name of Street/Avenue/Way/Terrace/etc.<br/>   Apt/Room/Unit ##/ Cabin Name<br/>   Name of City, Name of State #####-(postal code)<br/><br/>   4278 California St.<br/>   Apt 704<br/>   San Antonio, CA 95031<br/>"
    FieldInfo = Array("", "")
Else

    PrimeSite = Housing_Search_for_Prime_Site(Address, "")

    Debug.Print "Prime Site = " & PrimeSite
    
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PrimeSite)
        FieldInfo = FetchField(IE, "00N1B00000BLzmP_ileinner")
            Set FieldList = New Collection
                FieldList.Add Array("Reporting Requirement", "00N1B00000BLzmP_ileinner")
                FieldList.Add Array("Address Comments", "00N1300000BLnh3_ileinner")
                FieldList.Add Array("Landlord", "CF00N1300000BLnhG_ileinner")
        'PrimeSiteInfo = Retrieve_Page_Info(PrimeSite, FieldList)
        AssessmentInfo = PageInfo_RR(AssessmentInfo, "Prime Site", Retrieve_Page_Info(PrimeSite, FieldList))
        
ReportingRequirement = PageInfoF(PageInfoF(AssessmentInfo, "Prime Site"), "Reporting Requirement")(0)
        If ReportingRequirement = "" Then
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PrimeSite & "/e")
                Set FieldList = New Collection
                    FieldList.Add Array("00N1B00000BLzmP", "Check-In | Needs review")
            Call PushUpdates2Page(IE, FieldList)
        End If

'start checking for various issues

    If InStr(1, ReportingRequirement, "Need Unit", vbTextCompare) > 0 Then
        If Address(16) = False Then
            ListofIssues.Add "Missing Unit/Apartment/Room Number:<br/>When asked if the address is correct, please select NO and enter the full address.<br/>You must include a unit number for your housing address in Address Line 2 of your Check-in Form.<br/><br/>American addresses have standard format. An example can be found below:<br/>   Number of House or Building/ Name of Street/Avenue/Way/Terrace/etc.<br/>   Apt/Room/Unit ##/ Cabin Name<br/>   Name of City, Name of State #####-(postal code)<br/><br/>   4278 California St.<br/>   Apt 704<br/>   San Antonio, CA 95031<br/>"
        End If
    End If
    
    If InStr(1, ReportingRequirement, "Worksite Only", vbTextCompare) > 0 Then
        If (AssessmentInfo(2)(1)(2)(0)) = "" Then
            ListofIssues.Add "Host Company Address:<br/>The address you provided is for a host company and is not your housing address. <br/><br/>American addresses have standard format. An example can be found below:<br/>   Number of House or Building/ Name of Street/Avenue/Way/Terrace/etc.<br/>   Apt/Room/Unit ##/ Cabin Name<br/>   Name of City, Name of State #####-(postal code)<br/><br/>   4278 California St.<br/>   Apt 704<br/>   San Antonio, CA 95031<br/>"
        End If
    End If
    
    If 1 = 2 Then
    If InStr(1, ReportingRequirement, "autocorrect", vbTextCompare) > 0 Then
        If left(Right(PageInfoF(PrimeSiteInfo, "Reporting Requirement")(0), 15), 3) = "a0c" Then
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Right(ReportingRequirement, 15))
                Set FieldList = New Collection
                    FieldList.Add Array("Street", "00N30000009ot82_ileinner")
                    FieldList.Add Array("City", "00N30000009ot7d_ileinner")
                    FieldList.Add Array("State", "00N30000009ot7x_ileinner")
                    FieldList.Add Array("Zip", "00N30000009ot7s_ileinner")
                    FieldList.Add Array("Address Comments", "00N1300000BLnh3_ileinner")
        PrimeSiteInfo = Retrieve_Page_Info(PrimeSite, FieldList)
            
            ListofIssues.Add "Host Company Address:<br/>The address you provided is for a host company and is not your housing address. "
            '"<br/><br/>American addresses have standard format. An example can be found below:<br/>   Number of House or Building/ Name of Street/Avenue/Way/Terrace/etc.<br/>   Apt/Room/Unit ##/ Cabin Name<br/>   Name of City, Name of State #####-(postal code)<br/><br/>   4278 California St.<br/>   Apt 704<br/>   San Antonio, CA 95031<br/>"
        Else
            Debug.Print "primesite address comment is" & PageInfoF(PrimeSiteInfo, "Address Comments")(1)
        End If
    End If
    End If
    
    
    If 1 = 3 Then
    'distance is no longer a factor for check-ins consider replacing with a case/email system
    If (PageInfoF(AssessmentInfo, "Distance")(0)) <> "" Then
        If (PageInfoF(AssessmentInfo, "Distance")(0)) * 1 > 21 Then
            ListofIssues.Add "The address you provided is over 20 miles from your Host Company:<br/>The housing address you have provided is more than 20 miles away from your Host Company. Please call Intrax at 1-888-224-0450 between 9:00 am-5:00 pm Monday through Friday, in order to speak with an Intrax representative.<br/>"
        End If
    End If
    End If
    
    If InStr(1, (PageInfoF(PageInfoF(AssessmentInfo, "Prime Site"), "Address Comments")(0)), "blacklist", vbTextCompare) > 0 Then
        ListofIssues.Add "Your Housing is not Recommended:<br/><br/>Please call Intrax at 1-888-224-0450 between 9:00 am-5:00 pm Monday through Friday, in order to speak with an Intrax representative.<br/>"
        'probably need to create a case too
        Call Housing_Blacklisted_Module((PageInfoF(AssessmentInfo, "Engagement")(1)), Array(""))
    End If
End If

If InStr(1, Address(2), "Hiawatha", vbTextCompare) > 0 Then
    If IsNumeric(Address(6)) Then
    If Address(6) * 1 > 999 And Address(6) * 1 < 10000 Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e")
            Set FieldList = New Collection
                FieldList.Add Array("00Na000000B2KgF", "Confirmed")
        Call PushUpdates2Page(IE, FieldList)
    End If
    End If
End If

Debug.Print "There are " & ListofIssues.count & " issues with this checkin."
If ListofIssues.count > 0 Then
    For i = 1 To ListofIssues.count
        M3ssage = ListofIssues(i) & Chr(10) & Chr(10)
        If i < ListofIssues.count Then
            M3ssage = M3ssage & Chr(10) & Chr(10)
        End If
    Next i
    M3ssage = Replace(M3ssage, "<br/>", Chr(10), 1, , vbTextCompare)
    Set FieldList = New Collection
        FieldList.Add Array("00Na000000B369A", M3ssage)
        FieldList.Add Array("00Na000000B2KgF", "Incomplete")
        
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e")
    Call PushUpdates2Page(IE, FieldList, True)
End If
 
Call opNAV(IE, "quit", "")

End Sub

Sub Proccess_IsCurrent_Address(AccommodationID As String)
Dim FieldList As Collection
Dim Housing As Variant
Dim Address As Variant
Dim IE As Object
Dim PrimeSite As String
Dim PrimeSiteInfo As Variant
Dim Results As String

Set FieldList = New Collection
    FieldList.Add Array("Site", "CF00N30000009ot87_ileinner")
    FieldList.Add Array("Description", "00N30000008RH1X_ileinner")
    FieldList.Add Array("Created By", "CreatedBy_ileinner")
    FieldList.Add Array("Moddified By", "LastModifiedBy_ileinner")
    FieldList.Add Array("IsCurrent", "00N1300000BQr6R_ileinner")
    FieldList.Add Array("Engagement", "CF00Na000000B2kKt_ileinner")

Housing = Retrieve_Page_Info(AccommodationID, FieldList)

    Set FieldList = New Collection
        FieldList.Add Array("Street", "00N30000009ot82_ileinner")
        FieldList.Add Array("Unit", "00Na000000B2eGP_ileinner")
        FieldList.Add Array("City", "00N30000009ot7d_ileinner")
        FieldList.Add Array("State", "00N30000009ot7x_ileinner")
        FieldList.Add Array("Zip", "00N30000009ot7s_ileinner")
Housing(2)(0)(2) = Retrieve_Page_Info((PageInfoF(Housing, "Site")(1)), FieldList)

 
Address = AddressParse((PageInfoF(PageInfoF(Housing, "Site"), "Street")(0)), (PageInfoF(PageInfoF(Housing, "Site"), "Unit")(0)), (PageInfoF(PageInfoF(Housing, "Site"), "City")(0)), (PageInfoF(PageInfoF(Housing, "Site"), "State")(0)), (PageInfoF(PageInfoF(Housing, "Site"), "Zip")(0)))

Set ListofIssues = New Collection

If Address(15) Then
    'street address is damaged
Else
    PrimeSite = Housing_Search_for_Prime_Site(Address, "")
        Set FieldList = New Collection
            FieldList.Add Array("Reporting Requirement", "00N1B00000BLzmP_ileinner")
            FieldList.Add Array("Address Comments", "00N1300000BLnh3_ileinner")
    PrimeSiteInfo = Retrieve_Page_Info(PrimeSite, FieldList)
        
    'if there are no reporting instructions, flag site
    If (PageInfoF(PrimeSiteInfo, "Reporting Requirement")(0)) = "" Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PrimeSite & "/e")
            Set FieldList = New Collection
                FieldList.Add Array("00N1B00000BLzmP", "On Program | Needs review")
        Call PushUpdates2Page(IE, FieldList)
        Results = "Address needs review"
    End If

'start checking for various issues

    If InStr(1, (PageInfoF(PrimeSiteInfo, "Reporting Requirement")(0)), "Need Unit", vbTextCompare) > 0 Then
        If (Address(6)) = "" Then
            Results = "Unit Number is Missing."
            'Housing_InquireAboutApartment_Master ((PageInfoF(Housing, "Engagement")(1)))
        End If
    End If
    
    If InStr(1, (PageInfoF(PrimeSiteInfo, "Reporting Requirement")(0)), "Worksite Only", vbTextCompare) > 0 Then
            Results = "Address is marked as worksite only."
    End If
    
    If InStr(1, PageInfoF(PrimeSiteInfo, "Address Comments")(0), "blacklist", vbTextCompare) > 0 Then
       Results = "Housing is blacklisted."
    End If
    
    If InStr(1, Address(2), "Hiawatha", vbTextCompare) > 0 Then
        'check if zip code is wrong and fix it
        If left(Address(10), 5) <> "53965" Then
            'correct site address
            Debug.Print "WARNING - Hiawatha zipcode is wrong"
            Call opNAV(IE, "nav", "" & "https://na68.salesforce.com/" & PageInfoF(Housing, "Site")(1) & "/e")
            Set FieldList = New Collection
                FieldList.Add Array("00N30000009ot7s", "53965")
            Call PushUpdates2Page(IE, FieldList)
            Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/SendToSevis?scontrolCaching=1&id=" & PageInfoF(Housing, "Engagement")(1))
        End If
    End If

End If

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AccommodationID & "/e")
    Set FieldList = New Collection
        FieldList.Add Array("00N1300000BLnhP", Format(Now(), "mm/dd/yyyy"))
        FieldList.Add Array("00N30000008RH1X", Results)
    Call PushUpdates2Page(IE, FieldList, True)
IE.Quit
Set IE = Nothing
End Sub
Private Sub Housing_Blacklisted_Module(EngagementID As String, HousingPackage As Variant)
Dim IE As Object
Dim FieldList As Collection
Dim PAX As Variant
Dim Cases As Variant
Dim CaseID As String

PAX = PAHR_CollectInfo(EngagementID, "Case")
Cases = PageInfoF(PAX, "Cases")

For i = 0 To UBound(Cases)
    If IsArray(Cases(i)) Then
    If UBound(Cases(i)) > 3 Then
        If InStr(1, (PageInfoF(Cases(i), "Subject")(0)), "Blacklisted Housing", vbTextCompare) Then
            Debug.Print "Blacklist Case Found!"
            CaseID = PageInfoF(Cases(i), "Subject")(1)
            i = 50
        End If
    End If
    End If
Next i

If CaseID = "" Then
    Set FieldList = New Collection
        FieldList.Add Array("cas5", "Health, Safety, Welfare")
        FieldList.Add Array("00Na000000B3Ieg", "Safety")
        FieldList.Add Array("00Na000000B2eGd", "Housing Integrity Issue")
        FieldList.Add Array("cas11", "Web")
        FieldList.Add Array("cas7", "New")
        FieldList.Add Array("cas8", "Medium")
        FieldList.Add Array("cas14", "PAX is living at Blacklisted Housing - " & Address(0) & " " & Address(1) & " " & Address(2) & " " & Address(3) & ", " & Address(7) & ", " & Address(8))
        FieldList.Add Array("CF00Na000000B2eGh_lkid", PAX(1))
        
        FieldList.Add Array("CF00Na000000B34SG_lkid", AssessmentID)
        
        
        FieldList.Add Array("CF00Na000000B2eGi_lkid", PageInfoF(PAX, "Primary Match")(1))
        FieldList.Add Array("CF00N1300000BOWTk_lkid", PageInfoF(AssessmentInfo, "HC")(1))
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh")
    CaseID = PushUpdates2Page(IE, FieldList)
End If



End Sub
Private Function PageInfoF(PageInfo As Variant, FieldName As String) As Variant
Dim Value As Variant
Dim HasError As Boolean
'Debug.Print "-" & FieldName

HasError = True

If IsArray(PageInfo) Then
If UBound(PageInfo) > 1 Then
If IsArray(PageInfo(2)) Then
    For i = 0 To UBound(PageInfo(2))
        If (PageInfo(2)(i)(0)) = FieldName Then
            Value = PageInfo(2)(i)(2)
            HasError = False
        End If
    Next i
End If
End If
End If

    If HasError Then
        Debug.Print "PageInfoF failed to fetch " & FieldName
    End If
    
PageInfoF = Value
End Function
Private Function PageInfo_RR(PageInfo As Variant, FieldName As String, NewValue As Variant) As Variant
Dim Value As Variant
Dim i As Double
Dim FoundEntry As Boolean
Dim Initializing As Boolean

FoundEntry = False
Initializing = False
'Debug.Print FieldName & " sub part is array? " & IsArray(PageInfo(2))
'Debug.Print FieldName & " sub part is array? " & UBound(PageInfo(2))
If IsArray(PageInfo(2)) Then
    For i = 0 To UBound(PageInfo(2))
    'Debug.Print "RR check = " & PageInfo(2)(i)(0)
        If (PageInfo(2)(i)(0)) = FieldName Then
            PageInfo(2)(i)(2) = NewValue
            If UBound(NewValue) > 0 Then
                PageInfo(2)(i)(1) = NewValue(1)
            Else
                PageInfo(2)(i)(1) = "List?"
            End If
            FoundEntry = True
            'Debug.Print "record being inserted " & NewValue(0) & NewValue(1)
        End If
    Next i
Else
    Initializing = True
End If

If FoundEntry = False Then
'Debug.Print "Adding entry for " & FieldName & " to set."
Dim PreviousEntries As New Collection
    If Initializing = False Then
        For i = 0 To UBound(PageInfo(2))
            PreviousEntries.Add PageInfo(2)(i)
        Next i
    End If
    If IsArray(NewValue) = False Then
        Value = Array(NewValue, "")
        'Debug.Print "Forgot to submit value as an array. Converting."
    Else
        Value = NewValue
    End If
    If UBound(Value) < 1 Then
        PreviousEntries.Add Array(FieldName, "", Value)
    Else
        PreviousEntries.Add Array(FieldName, Value(1), Value)
    End If
    
    PageInfo(2) = CollectionConverter(PreviousEntries)
End If

PageInfo_RR = PageInfo
End Function

Sub Test_QA_Partner_App()
Dim IE As Object
Dim FieldUpdates As Collection
Dim PageElements As Object
Dim PAX As Variant

PAX = QA_Generate_Fake_PAX()

Call opNAV(IE, "QA", "https://ustage-intraxinc.cs90.force.com/globalpartners/")
    IE.Visible = True
    Set FieldUpdates = New Collection
        FieldUpdates.Add Array("j_id0:SiteTemplate:loginForm:username", "demilova@orange.bg.ustage")
        FieldUpdates.Add Array("j_id0:SiteTemplate:loginForm:password", "orangeintrax123")
    Call PushUpdates2Page(IE, FieldUpdates, False)
    Call IE.document.getelementbyid("j_id0:SiteTemplate:loginForm:LoginBlock").Click
    
    Do While IsPageStillLoading(IE)
    Loop
    
MsgBox "Log-in", , "Wait for login"

    Set PageElements = IE.document.getelementsbytagname("a")
        For Each anchor In PageElements
            If anchor.HREF = "pr_app_list" Then
                anchor.Click
            End If
        Next anchor
        
    Do While IsPageStillLoading(IE)
    Loop
    
MsgBox "click on app", , "Wait for login"

    Call IE.document.getelementbyid("Page:SiteTemplate:Form:CreateNewApp").Click
    
    Do While IsPageStillLoading(IE)
    Loop

MsgBox "click on new app", , "Wait for login"

Set FieldUpdates = New Collection
        FieldUpdates.Add Array("pr_app_new_page:SiteTemplate:webForm:firstname", (PAX(24, 1)))
        FieldUpdates.Add Array("pr_app_new_page:SiteTemplate:webForm:lastname", (PAX(24, 2)))
        FieldUpdates.Add Array("pr_app_new_page:SiteTemplate:webForm:Email", (PAX(23, 1)))
        
    Call PushUpdates2Page(IE, FieldUpdates, False)
    Call IE.document.getelementbyid("pr_app_new_page:SiteTemplate:webForm:createAppButton").Click

MsgBox "click next", , "Wait for login"

Set FieldUpdates = New Collection
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:birthDate", (PAX(21, 1)))
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:phone", "12345678911")
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:countrycode", "+672")
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:phoneType", "Mobile")
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:legalResidence", (PAX(22, 1)))
        
       '
    Call IE.document.getelementbyid("igi_pt_app_personal_info:SiteTemplate:webform:citizen:0").Click

    Call IE.document.getelementbyid("igi_pt_app_personal_info:SiteTemplate:webform:serviceLevel:" & (PAX(17, 2))).Click
    If PAX(7, 1) = "Male" Then
        Call IE.document.getelementbyid("igi_pt_app_personal_info:SiteTemplate:webform:gender:0").Click
    Else
        Call IE.document.getelementbyid("igi_pt_app_personal_info:SiteTemplate:webform:gender:1").Click
    End If
    Call PushUpdates2Page(IE, FieldUpdates, False)
    
    Call IE.document.getelementbyid("igi_pt_app_personal_info:SiteTemplate:webform:continuebutton").Click
MsgBox "click next", , "Wait for login"
    Call IE.document.getelementbyid("igi_pt_app_education:SiteTemplate:webform:currentlyStudying:0").Click
    
    Set FieldUpdates = New Collection
        FieldUpdates.Add Array("igi_pt_app_education:SiteTemplate:webform:currentlyStudyingBlock:institutionType", "University/College")
        FieldUpdates.Add Array("igi_pt_app_personal_info:SiteTemplate:webform:phone", "Bachelor")
        FieldUpdates.Add Array("igi_pt_app_education:SiteTemplate:webform:currentlyStudyingBlock:institutionName", "Test University of " & (PAX(22, 1)))
        FieldUpdates.Add Array("igi_pt_app_education:SiteTemplate:webform:currentlyStudyingBlock:fieldStudy", "Technical QA Testing")
        FieldUpdates.Add Array("igi_pt_app_education:SiteTemplate:webform:currentlyStudyingBlock:graduationDateYes", "5/5/" & Format(Now(), "yyyy"))
        FieldUpdates.Add Array("igi_pt_app_education:SiteTemplate:webform:currentlyStudyingBlock:studyLevelBlockYes:studyLevelYes", "2nd year")
    
    Call IE.document.getelementbyid("igi_pt_app_education:SiteTemplate:webform:nextlink").Click
MsgBox "click next", , "Wait for login"
    
    
End Sub
Private Function QA_Generate_Fake_PAX() As Variant
Dim PAX As Variant
Dim RandomNum As Double

PAX = PAXbasicInfo("", "", "", 4)

PAX(24, 1) = Format(Now(), "dddd hhnn")
PAX(24, 2) = "Test von " & Format(Now(), "mmmmyy")
PAX(23, 1) = Replace((PAX(24, 1) & "." & PAX(24, 2) & "@intraxinc.void"), " ", "_", 1, , vbTextCompare)
PAX(21, 1) = Int((12 - 1 + 1) * Rnd + 1) & "/" & Int((25 - 1 + 1) * Rnd + 1) & "/" & (Format(Now(), "yyyy") * 1 - Int((28 - 18 + 1) * Rnd + 18))
    RandomNum = Int((2 - 1 + 1) * Rnd + 1)
    If RandomNum = 1 Then
        PAX(7, 1) = "Male"
    Else
        PAX(7, 1) = "Female"
    End If
PAX(22, 1) = "Bulgaria"
PAX(17, 2) = "0"
PAX(17, 1) = "Independent"

For i = 0 To 46
    If PAX(i, 1) <> "" Then
        Debug.Print PAX(i, 0) & " = " & PAX(i, 1) & " | " & PAX(i, 2)
    End If
Next i

QA_Generate_Fake_PAX = PAX
End Function

Private Sub CompleteEnvelope_AppliedMatch(MatchID As String)
Dim FakePAX As Variant
Dim MatchInfo As Variant
Dim Updates As New Collection

MatchInfo = Match_Toggle_Confirmation(MatchID)

FakePAX = PAXbasicInfo("", "", "", 0)
FakePAX(2, 1) = "(IWT) - GTA B#11978 - Match Failed to Confirm upon completion of Docusign"
FakePAX(3, 1) = "Dear Melanya,<br/><br/>The following match should have changed to Stage: Confirmed, Offer Status: Accepted when the docusign envelope was marked as completed.  <a href=""https://na68.salesforce.com/00O1B0000092YNv"">More examples at this report</a><br/><br/>https://na68.salesforce.com/##<br/><br/><a href=""https://na68.salesforce.com/0031B00002buWIk"">You can unsubscribe by changing the email on this contact.</a><br/><br/>Thank you,<br/>Andrew<br/>"
FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", AnchorMaker(MatchInfo), 1)
FakePAX(39, 2) = MatchID
FakePAX(20, 2) = "0031B00002buWIk"
FakePAX(1, 1) = "amey@intraxinc.com; afarael@intraxinc.com"

Call Send_HTMLEmail(FakePAX, "NoReply", Updates)

End Sub
Private Function Match_Toggle_Confirmation(MatchID As String, Optional FixPos As Boolean = True) As Variant
Dim IE As Object
Dim Updates As New Collection
Dim Match As Variant
Dim PremiumFlip As Boolean

If left(MatchID, 3) <> "a0R" Then
    Debug.Print "Record ID is not for match"
Else
    
    Updates.Add Array("Position", "CF00N30000008REJy_ileinner")
    Updates.Add Array("Service Level", "00Na000000B2xTf_ileinner")
    Match = Retrieve_Page_Info(MatchID, Updates)
    
    If PageInfoF(Match, "Service Level")(0) = "Premium" Then
        PremiumFlip = True
    Else
        PremiumFlip = False
    End If
    
        If PremiumFlip Then 'match needs to be set to IP for this to work
            Set Updates = New Collection
                Updates.Add Array("00Na000000B2SUq", "")
                Updates.Add Array("00Na000000B2xTf", "Independent")
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Match(1) & "/e")
            Call PushUpdates2Page(IE, Updates)
        End If
    
    If FixPos Then
        Set Updates = New Collection
            Updates.Add Array("00N30000008RCrJ", "Paid")
            Updates.Add Array("00N30000008RJo3", "Matching")
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(Match, "Position")(1) & "/e")
        Call PushUpdates2Page(IE, Updates)
    End If
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Match(1) & "/e")
    Set Updates = New Collection
        Updates.Add Array("00Na000000B2SUq", "Offered")
        Updates.Add Array("00N30000008RERi", "Applied")
    Call PushUpdates2Page(IE, Updates)
    
        If PremiumFlip Then 'set match back to premium
            Set Updates = New Collection
                Updates.Add Array("00Na000000B2xTf", "Premium")
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Match(1) & "/e")
            Call PushUpdates2Page(IE, Updates)
        End If
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Match(1))
    Match = PageInfo_RR(Match, "FlipFlop", FetchField(IE, "00N30000008RERi_ileinner"))
    
    Call opNAV(IE, "quit", "")
End If

Match_Toggle_Confirmation = Match

End Function
Private Function ConvertLog2List(LogAcallID As String) As Collection
Dim aHistory As Variant
Dim FieldList As New Collection

    FieldList.Add Array("Comments", "tsk6")
    FieldList.Add Array("Created By", "CreatedBy_ileinner")
    FieldList.Add Array("Last Modified", "LastModifiedBy_ileinner")
aHistory = Retrieve_Page_Info(LogAcallID, FieldList)

'Debug.Print " -=- " & PageInfoF(aHistory, "Comments")(0)
Set FieldList = Sequencer((PageInfoF(aHistory, "Comments")(0)), Chr(10) & "<br>")

'Debug.Print "string length: " & Len(FieldList(1))

Set ConvertLog2List = FieldList
End Function
Private Function Housing_Overcrowding_and_Info(AssessmentID As String) As Variant
Dim IE As Object
Dim FieldList As Collection
Dim FieldListB As Collection
Dim FieldlistC As Collection
Dim HousingValidation As Variant
Dim ListofPAX As Collection
Dim PAXInfo As Collection
Dim TempPAX As Variant
Dim Accoms2Drop As Collection
Dim Accoms2Keep As Collection
Dim CurrentVerdict As Boolean
Dim SeasonYearofValidation As String
Dim GeographicalRestrictions As Variant
Dim Location As String
Dim Days As Double
Dim FakePAX As Variant

Dim OriginalPAX As Collection
Dim HCTally As Collection
Dim HCList As String

Dim EarliestStart As Date
Dim NumberOfPAX As Double
Dim NumberOfVisas As Double
Dim FinalEmail As String
Dim Email As New Collection
Dim HouseResults As Variant
Dim PremiumCount As Double

    HouseResults = Array(Array("PAX Info", "", "") _
                        , Array("Validation Info", "", "") _
                        , Array("EarliestStart", "", "") _
                        , Array("Actual PAX", "", "") _
                        , Array("Number of Visas", "", "") _
                        , Array("State based Restrictions", "", "") _
                        , Array("City based Restrictions", "", "") _
                        , Array("Restricted", "", "") _
                        , Array("Overcrowded?", "", "") _
                        , Array("Priority Score", "", "") _
                        , Array("Premium Ratio", "", "") _
                                    )

'Pull Housing Validation Info
Set FieldList = New Collection
    FieldList.Add Array("PAX Expected", "00N1300000BRYQM")
    FieldList.Add Array("Status", "00Na000000B2KgF_ileinner")
    FieldList.Add Array("Completed Date", "00N1300000BLZwS")
    FieldList.Add Array("Overall Assessment", "00Na000000B2Kfj")
    FieldList.Add Array("Season", "00N1300000BLnhq")
    FieldList.Add Array("Year", "00N1300000BLnhn")
    FieldList.Add Array("Site", "CF00N1300000BLnhV_ileinner")
    
HousingValidation = Retrieve_Page_Info(AssessmentID, FieldList)
        Set FieldListB = New Collection
            FieldListB.Add Array("Street", "00N30000009ot82_ileinner")
            FieldListB.Add Array("City", "00N30000009ot7d_ileinner")
            FieldListB.Add Array("State", "00N30000009ot7x_ileinner")
            FieldListB.Add Array("Zip", "00N30000009ot7s_ileinner")
HousingValidation(2)(6)(2) = Retrieve_Page_Info((PageInfoF(HousingValidation, "Site")(1)), FieldListB)

SeasonYearofValidation = PageInfoF(HousingValidation, "Season")(0) & PageInfoF(HousingValidation, "Year")(0)

Debug.Print "site is returning fields = " & UBound(PageInfoF(HousingValidation, "Site"))
Debug.Print "City = " & PageInfoF(PageInfoF(HousingValidation, "Site"), "City")(0)

'load and proccess geographical restrictions
GeographicalRestrictions = LoadGeographical_Restrictions()
    Location = PageInfoF(PageInfoF(HousingValidation, "Site"), "State")(0)
    For i = 0 To UBound(GeographicalRestrictions(0))
        If Location = GeographicalRestrictions(0)(i)(0) Then
            HouseResults(5)(1) = GeographicalRestrictions(0)(i)(1)
            i = UBound(GeographicalRestrictions(0))
        End If
    Next i
    Location = PageInfoF(PageInfoF(HousingValidation, "Site"), "City")(0) & ", " & PageInfoF(PageInfoF(HousingValidation, "Site"), "State")(0)
    For i = 0 To UBound(GeographicalRestrictions(1))
        If Location = GeographicalRestrictions(1)(i)(0) Then
            HouseResults(6)(1) = GeographicalRestrictions(1)(i)(1)
            i = UBound(GeographicalRestrictions(1))
        End If
    Next i
    'this sets a single answer as the geo restrict result
    If HouseResults(6)(1) <> "" Then
        HouseResults(7)(1) = HouseResults(6)(1)
    Else
        HouseResults(7)(1) = HouseResults(5)(1)
    End If

'Get List of PAX and pull their engagment Info
Set ListofPAX = Pull_Master_Child(AssessmentID, "CF00N1300000BLnhS", "a0T")
If UBound(ListofPAX(2)(1)) > 0 Then
    Set PAXInfo = New Collection
    
    Set FieldList = New Collection
        FieldList.Add Array("Status", "00Na0000009s14S")
        FieldList.Add Array("Placement Status", "00Na000000B2Fr2")
        FieldList.Add Array("Season", "00Na000000B2tGW")
        FieldList.Add Array("Year", "00Na000000B2KhB")
        FieldList.Add Array("Engagement Start", "00Na0000009s14D_ileinner")
        FieldList.Add Array("Engagement End", "00Na0000009s14C_ileinner")
        FieldList.Add Array("Service Level", "00Na000000B2tGX_ileinner")
        FieldList.Add Array("Visa Date", "00N1300000BQyfr_ileinner")
        FieldList.Add Array("Visa Status", "00N1300000BQyfs_ileinner")
        FieldList.Add Array("Account", "CF00Na0000009s148_ileinner")
        
    Set FieldListB = New Collection
        FieldListB.Add Array("IsPlanned", "00N1300000BLnhT_ileinner")
        FieldListB.Add Array("IsCurrent", "00N1300000BQr6R_ileinner")
        FieldListB.Add Array("Housing Plan", "CF00N1300000BLnhN_ileinner")
        FieldListB.Add Array("Description", "00N30000008RH1X_ileinner")
        
    Set FieldlistC = New Collection
                FieldlistC.Add Array("HC", "CF00Na000000B2KfU_ileinner")
    
If UBound(ListofPAX(2)(1)) < 1 Then
    'if no PAX are attached, close out the validation
    Debug.Print "validation is missing PAX"
        Set FieldList = New Collection
            FieldList.Add Array("00Na000000B2KgF_ileinner", "Complete")
            FieldList.Add Array("00N1300000BLnhb_ileinner", "No PAX Found")
            FieldList.Add Array("00Na000000B2Kfj_ileinner", "PAX Withdrew")
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID)
            Call PushUpdates2Page(IE, FieldList, True)

Else
        For i = 2 To ListofPAX.count
            Debug.Print "Engagement ID should be: " & ListofPAX(i)(3)(1)
            TempPAX = Array(Retrieve_Page_Info((ListofPAX(i)(3)(1)), FieldList), Retrieve_Page_Info((ListofPAX(i)(1)(1)), FieldListB), "")
            
            If PageInfoF(TempPAX(1), "Housing Plan")(1) = "" Then
                Debug.Print "No Housing Plan found"
                TempPAX(2) = Array("No Employer", "ID", Array(Array("HC", "noID", Array("No Housing Plan", ""))))
            Else
                TempPAX(2) = Retrieve_Page_Info((PageInfoF(TempPAX(1), "Housing Plan")(1)), FieldlistC)
            End If
            PAXInfo.Add TempPAX
        Next i
      
        Set Accoms2Keep = New Collection
        Set Accoms2Drop = New Collection
    
    
        For i = 1 To PAXInfo.count
            
            CurrentVerdict = True
            
            Debug.Print "Test status: " & PageInfoF(PAXInfo(i)(0), "Status")(0)
            If (PageInfoF(PAXInfo(i)(0), "Status")(0)) = "Cancelled" Then
                CurrentVerdict = False
            End If
            
            If SeasonYearofValidation <> "" And PageInfoF(PAXInfo(i)(0), "Season")(0) & PageInfoF(PAXInfo(i)(0), "Year")(0) <> SeasonYearofValidation Then
                CurrentVerdict = False
            End If
            
            If PageInfoF(PAXInfo(i)(1), "IsPlanned")(1) = "0" Then
                If PageInfoF(PAXInfo(i)(0), "Status")(0) <> "On Program" Then
                CurrentVerdict = False
                End If
            End If
            
            Set OriginalPAX = cDictionary(OriginalPAX, Array(PAXInfo(i)(0)(1)))
                For j = 1 To OriginalPAX.count
                    If PAXInfo(i)(0)(1) = OriginalPAX(j)(0)(0) And OriginalPAX(j)(1) > 1 Then
                        CurrentVerdict = False
                        Debug.Print "Found Duplicate PAX on housing"
                    End If
                Next j
            If CurrentVerdict Then
                Accoms2Keep.Add PAXInfo(i)
            Else
                Accoms2Drop.Add PAXInfo(i)
            End If
        Next i
        
    End If
    
    HouseResults(3)(1) = Accoms2Keep.count
    HouseResults(4)(1) = 0
    If Accoms2Keep.count > 0 Then
    HouseResults(2)(1) = PageInfoF(Accoms2Keep(1)(0), "Engagement Start")(0)
    
    For i = 1 To Accoms2Keep.count
        Debug.Print "Good accom: " & PageInfoF(Accoms2Keep(i)(0), "Engagement Start")(0) & PageInfoF(Accoms2Keep(i)(0), "Visa Date")(0) & " | " & PageInfoF(Accoms2Keep(i)(2), "HC")(0)
        If PageInfoF(Accoms2Keep(i)(0), "Visa Status")(0) = "Accepted" Then
            HouseResults(4)(1) = HouseResults(4)(1) + 1
        End If
        If PageInfoF(Accoms2Keep(i)(0), "Engagement Start")(0) < HouseResults(2)(1) Then
            HouseResults(2)(1) = PageInfoF(Accoms2Keep(i)(0), "Engagement Start")(0)
        End If
        Debug.Print "about to tally HC"
        Set HCTally = cDictionary(HCTally, Array(PageInfoF(Accoms2Keep(i)(2), "HC")(0)))
        
        If PageInfoF(Accoms2Keep(i)(0), "Service Level")(0) = "Premium" Then
            PremiumCount = PremiumCount + 1
        End If
    Next i
    End If
    
    If Accoms2Drop.count > 0 Then
        Set FieldList = New Collection
            FieldList.Add Array("00N30000008RH1X", "Flag for Removal from Housing Validation")
        For i = 1 To Accoms2Drop.count
            Debug.Print "Good accom: " & Accoms2Drop(i)(1)(1) & " | " & PageInfoF(Accoms2Drop(i)(3), "HC")(0)
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Accoms2Drop(i)(1)(1) & "/e")
                Call PushUpdates2Page(IE, FieldList, True)

        Next i
    Else
    Debug.Print "No Accoms to drop"
    End If
    
    HouseResults(10)(1) = "P " & PremiumCount & " : IP " & Accoms2Keep.count - PremiumCount
     
    For i = 1 To HCTally.count
        HCList = HCList & HCTally(i)(0)(0) & "(" & HCTally(i)(1) & ")  "
    Next i
    
    If PageInfoF(HousingValidation, "PAX Expected")(0) <> "" Then
        If HouseResults(3)(1) * 1 > PageInfoF(HousingValidation, "PAX Expected")(0) * 1 Then
            HouseResults(8)(1) = True
        Else
            HouseResults(8)(1) = False
        End If
    Else
    HouseResults(8)(1) = "Unknown"
    End If
    
    
    HouseResults(9)(1) = HouseResults(3)(1) / 4
    HouseResults(9)(1) = HouseResults(9)(1) + HouseResults(4)(1) / 2
    
    Days = CDate(HouseResults(2)(1)) - CDate("3/25/2018")
    
    Days = Days / 7
    
    Days = 12 - Days
    Debug.Print "Day score = " & Days
    
    HouseResults(9)(1) = Round(Days, 0)
    
    
    If HouseResults(7)(1) <> "" Then
        HouseResults(9)(1) = HouseResults(9)(1) + 10
    End If
    
    If HouseResults(9)(1) < 0 Then
        'if priority score is negative set it to 0
        HouseResults(9)(1) = 0
    End If
    
    'save all the PAX Info
    HouseResults(0)(1) = CollectionConverter(Accoms2Keep)
    HouseResults(1)(1) = HousingValidation
    Debug.Print "HCs: " & HCList
    
    FakePAX = PAXbasicInfo("", "", "", 1)
    FakePAX(2, 1) = Format(Now(), "mm/dd/yy") & " - " & "WT Housing Validation - " & PageInfoF(HousingValidation, "Season")(0) & PageInfoF(HousingValidation, "Year")(0) & " P#" & Format(HouseResults(9)(1), "00")
    FakePAX(39, 2) = AssessmentID
    FakePAX(20, 2) = "0031B00002bufja"
    FakePAX(3, 1) = Replace(Housing_Validation_Priority_Report(HouseResults), "$$HCLIST$$", HCList, 1, , vbBinaryCompare)
    
    Set FieldList = New Collection
        FieldList.Add Array("00Na000000B2Kek", "P#" & Format(HouseResults(9)(1), "000"))
    
    Call Send_HTMLEmail(FakePAX, "NoReply", FieldList)
End If

'auto flag housing as premium lead
If PremiumCount > 1 Then
    Debug.Print "Premium ratio = " & (Accoms2Keep.count / PremiumCount)
    If (Accoms2Keep.count / PremiumCount) >= 0.5 Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e")
        HousingValidation = FetchField(IE, "00N1300000BLnhb")
            If HousingValidation(0) = "" Or InStr(1, HousingValidation(0), "premium", vbTextCompare) > 0 Then
                Set FieldList = New Collection
                    FieldList.Add Array("00N1300000BLnhb", "Premium Housing: " & HCList)
                    FieldList.Add Array("00Na000000B2KgF", "Complete")
                Call PushUpdates2Page(IE, FieldList)
            End If
    End If
End If


If IE Is Nothing Then
Else
    IE.Quit
    Set IE = Nothing
End If
    

AnalyeOvercrowding = Report
End Function
Private Function Housing_Validation_Priority_Report(Info As Variant) As String
Dim RBody As String
    RBody = "Housing Validation report for: <a href=""https://na68.salesforce.com/" & Info(1)(1)(1) & """>" & PageInfoF(PageInfoF(Info(1)(1), "Site"), "Street")(0) & " " & PageInfoF(PageInfoF(Info(1)(1), "Site"), "City")(0) & ", " & PageInfoF(PageInfoF(Info(1)(1), "Site"), "State")(0) & "</a><br/><br/>"
    RBody = RBody & "<table>"
    For i = 2 To UBound(Info)
        RBody = RBody & "<tr><td>" & Info(i)(0) & "</td><td>" & Info(i)(1) & "</td></tr>"
    Next i
    RBody = RBody & "<tr><td colspan=""2"">$$HCLIST$$</td></tr></table><br/><br/><div>"
    For i = 0 To UBound(Info(0)(1))
        RBody = RBody & "<div><table style=""border-style: double;"" >"
            For j = 0 To UBound(Info(0)(1)(i)(0)(2))
                RBody = RBody & "<tr><td>" & Info(0)(1)(i)(0)(2)(j)(0) & "</td><td>" & Info(0)(1)(i)(0)(2)(j)(2)(0) & "</td></tr>"
            Next j
            'add the employer which is on a different track than the engagement info
                RBody = RBody & "<tr><td>" & "Employer" & "</td><td>" & PageInfoF(Info(0)(1)(i)(2), "HC")(0) & "</td></tr>"
        
        RBody = RBody & "</table></div>"
    Next i
    RBody = RBody & "</div>"
    
    Housing_Validation_Priority_Report = RBody
    
End Function
Private Function TD_Counter(IE As Object) As Variant
Dim Elements As Object
Dim EmptyTD As Double
Dim FullTD As Double
Dim TableEntries As String

EmptyTD = 0
FullTD = 0
    Set Elements = IE.document.getelementsbytagname("td")
    
    For Each Entry In Elements
        If Len(Entry.innerhtml) < 8 Then
            TableEntries = TableEntries & Entry.innerhtml & "**"
        End If
        If Entry.innerhtml = "&nbsp;" Then
            EmptyTD = EmptyTD + 1
        Else
            FullTD = FullTD + 1
        End If
    Next Entry
    
'Debug.Print "### Empty TD's: " & EmptyTD & "   NonBlank TD's: " & FullTD & " ###"
'Debug.Print TableEntries

TD_Counter = Array(EmptyTD, FullTD)
End Function


Private Function Housing_Prep4PAX_Email(EngagementID As String, CaseID As String, Days_Till_DueDate As Double) As Variant
Dim PAX As Variant
Dim DataCollection As Collection

PAX = PAXbasicInfo(EngagementID, CaseID, "", 4)
    PAX(40, 1) = Format(DateAdd("d", Days_Till_DueDate, Now()), "MM/DD/YYYY")
    PAX(40, 2) = Format(PAX(40, 1), "dddd mmmm d, yyyy")
    PAX(44, 0) = "HousingPlan Assessment"
Set DataCollection = Pull_Master_Child(EngagementID, "CF00Na000000B2Kf5", "a1l")
If UBound(DataCollection(2)(1)) > 0 Then
    For i = 2 To DataCollection.count
        If DataCollection(i)(3)(0) = "WT PT Housing Plan" Then
            PAX(44, 2) = DataCollection(i)(1)(1)
        End If
    Next i
Else
    PAX(44, 2) = "Missing Assessment"
End If

Housing_Prep4PAX_Email = PAX
End Function

Private Sub Housing_Email_PAX_about_Landlord_Followup(HousingAssessmentID As String)
Dim IE As Object
Dim PAXList As Collection
Dim CurrentEngagement As String
Dim DataCollection As Collection
Dim CaseID As String
Dim CurrentPAX As Variant

Set PAXList = Pull_Master_Child(HousingAssessmentID, "CF00N1300000BLnhS", "a0T")

If PAXList.count > 1 Then
If PAXList(2).count > 2 Then
If IsArray(PAXList(2)(3)) Then
    For i = 2 To PAXList.count
        CurrentEngagement = PAXList(i)(3)(1)
        CurrentPAX = Housing_Prep4PAX_Email(CurrentEngagement, "", 5)
            Set DataCollection = Pull_Master_Child(CurrentEngagement, "CF00Na000000B2eGh", "500")
                CaseID = ""
                    If UBound(DataCollection(2)(1)) > 0 Then
                        For j = 2 To DataCollection.count
                            If DataCollection(j)(3)(0) = "Pre-Arrival Housing (PAHR)" Then
                                CaseID = DataCollection(j)(3)(1)
                            End If
                        Next j
                    End If
            Set DataCollection = New Collection
                If CaseID = "" Then
                'create new PAHR case
                    Set DataCollection = New Collection
                        DataCollection.Add Array("cas5", "Housing")
                        DataCollection.Add Array("cas11", "Email")
                        DataCollection.Add Array("cas7", "Closed")
                        DataCollection.Add Array("cas14", "Pre-Arrival Housing (PAHR)")
                        DataCollection.Add Array("cas21", "0")
                        DataCollection.Add Array("CF00Na000000B2eGh_lkid", CurrentPAX(11, 2))
                        'DataCollection.Add Array("CF00Na000000B2eGi_lkid", CurrentPAX(19, 2))
                        'DataCollection.Add Array("CF00N1300000BOWTk_lkid", CurrentPAX(29, 2))
                        DataCollection.Add Array("cas3_lkid", CurrentPAX(20, 2))
                        DataCollection.Add Array("CF00Na000000B34SG_lkid", CurrentPAX(44, 2))
                    Call opNAV(IE, "nav", "https://na68.salesforce.com/500/e?ent=Case&RecordType=012a0000001NbNh")
                    CaseID = Right(PushUpdates2Page(IE, DataCollection), 15)
                    Call opNAV(IE, "Quit", "")
                End If
                
            CurrentPAX(39, 2) = CaseID
            Call Send_HTMLEmail(AddTemplate(CurrentPAX, FetchEmailTemplate("00X1B000001qaWM")), "NoReply", DataCollection)
            
    Next i
End If
End If
End If

End Sub

Private Sub Print_L2_HTML(RecordPackage As Variant)
Dim oHTML As String
Dim SubPackage As Variant
Dim IE As Object
Dim PageBody As Object
Dim sHTML As String


oHTML = oHTML & Map_Record2HTML(RecordPackage) & "<br/>"

Call opNAV(IE, "nav", "https://na68.salesforce.com/a0R1B00000Ohry8")
IE.Visible = True
Set PageBody = IE.document.getelementsbytagname("Body")
PageBody(0).innerhtml = oHTML

For i = 0 To UBound(RecordPackage(2))
sHTML = ""
    Debug.Print RecordPackage(2)(i)(0) & "  name/ID  " & RecordPackage(2)(i)(1)
    If Len(RecordPackage(2)(i)(1)) = 31 Then
        SubPackage = PageInfoF(RecordPackage, (RecordPackage(2)(i)(0)))
        
        For j = 0 To UBound(SubPackage)
            sHTML = sHTML & Map_Record2HTML(RecordPackage(2)(i)(2)(j)) & "<br/>"
        Next j
        IE.document.getelementbyid(RecordPackage(2)(i)(1) & "_value").innerhtml = sHTML
    Else
        If RecordPackage(2)(i)(1) = "List?" Then
        'this checks to see if the feedloop lis a list like matches on a position
            For j = 0 To UBound(RecordPackage(2)(i)(2))
                sHTML = sHTML & Map_Record2HTML(RecordPackage(2)(i)(2)(j)) & "<br/>"
            Next j
            IE.document.getelementbyid(RecordPackage(2)(i)(1) & "_value").innerhtml = sHTML
        End If
        
        If UBound(RecordPackage(2)(i)(2)) = 2 Then
            If IsArray(RecordPackage(2)(i)(2)(2)) Then
                sHTML = sHTML & Map_Record2HTML(RecordPackage(2)(i)(2)) & "<br/>"
                'Debug.Print sHTML
                IE.document.getelementbyid(RecordPackage(2)(i)(1) & "_value").innerhtml = sHTML
            End If
        End If
    End If
Next i

End Sub
Private Function Pull_Table_From_Page(IE As Object, CrossLink As String) As Variant
Dim CrossLookupMainTable As Object
Dim TempHolder As Object
Dim SectionTitle As String
Dim StartBased_on_Type As Double

Dim TableRows As Object
Dim TableHeaders As Object
Dim TableSet As Collection
Dim ListoEntries As Collection
Dim tAnchor As Object
Dim CurrentTD As Object

Dim IDofDivHoldingTable As String

'On Error GoTo 0

If InStr(1, CrossLink, "_", vbTextCompare) > 0 Then
    IDofDivHoldingTable = CrossLink & "_body"
Else
    IDofDivHoldingTable = CrossLink
End If

Debug.Print "looking for element with ID = " & CrossLink
Debug.Print IE.LocationURL
Set CrossLookupMainTable = IE.document.getelementbyid(IDofDivHoldingTable)
'get table
Set TempHolder = CrossLookupMainTable.getelementsbytagname("table")
'get tbody
Set TempHolder = TempHolder(0).getelementsbytagname("tbody")
'class = pbHeader
Set TableRows = TempHolder(0).getelementsbytagname("tr") 'This conatins every row
'this gets the table headers that will be baked into each set
Set TableHeaders = TableRows(0).getelementsbytagname("th") 'this filters out just the top row which has the column titles

Set TableSet = New Collection
    Debug.Print (TableRows.Length - 1) & " rows for " & CrossLink 'this lists off the number of rows minus the title row
    For i = 1 To (TableRows.Length - 1)
        Set TempHolder = TableRows(i).getelementsbytagname("td") 'this pulls all the TD elements for a given row
            Set ListoEntries = New Collection
            
            If TempHolder.Length < 2 Then 'is this extra?
                ListoEntries.Add Array("Blank Field", "ID", Array("Blank Field", ""))
            Else
                'Debug.Print "Number of columns " & TempHolder.Length
                
                    '##If we're looking up assessment History, we want the frist TD otherwise we can skip it because it's an edit
                    '##Standard format is <td>edit</td><th>Object Name</th><td>other values...
                For j = StartBased_on_Type To (TempHolder.Length - 1)
                    If j = 0 Then
                        If InStr(1, TempHolder(0).innerhtml, ">Edit</a>", vbTextCompare) > 0 Then
                            Set CurrentTD = TableRows(i).getelementsbytagname("th")(0) 'replaces the edit TD with the actual object name TH
                        Else
                            Set CurrentTD = TempHolder(j)
                        End If
                    Else
                        Set CurrentTD = TempHolder(j)
                    End If
                    
                    If InStr(1, CurrentTD.innerhtml, "</a>", vbTextCompare) > 0 Then
                        Set tAnchor = CurrentTD.getelementsbytagname("a")
                        SectionTitle = tAnchor(0).HREF
                            If InStr(1, SectionTitle, "https://na68.salesforce.com/", vbTextCompare) Then
                                SectionTitle = Right(SectionTitle, 15)
                            Else
                            End If
                        
                        'Debug.Print tAnchor(0).innerhtml
                        ListoEntries.Add Array(TableHeaders(j + 1).innerhtml, "ID", Array(tAnchor(0).innerhtml, SectionTitle))
                        'Debug.Print "^^^" & TableHeaders(j + 1).innerhtml & " = " & tAnchor(0).innerhtml
                    Else
                    'Debug.Print "counting: " & ListoEntries.count & " | " & CurrentTD.innerhtml
                        If InStr(1, CurrentTD.innerhtml, "<img", vbTextCompare) > 0 Then 'alt text of image is checked or not checked
                            ListoEntries.Add Array(TableHeaders(j + 1).innerhtml, "ID", Array(CurrentTD.getelementsbytagname("img")(0).alt, ""))
                        Else
                            'Debug.Print "Adding: " & CurrentTD.innerhtml
                            ListoEntries.Add Array(TableHeaders(j + 1).innerhtml, "ID", Array(Replace(CurrentTD.innerhtml, "&nbsp;", ""), ""))
                        End If
                    End If
                Next j
            End If
            
        Set TempHolder = TableRows(i).getelementsbytagname("th")
        If InStr(1, TempHolder(0).innerhtml, "<a", vbTextCompare) Then
            Set TempHolder = TempHolder(0).getelementsbytagname("a")
            TableSet.Add Array(TempHolder(0).innerhtml, Right(TempHolder(0).HREF, 15), CollectionConverter(ListoEntries))
        Else
            TableSet.Add Array(TempHolder(0).innerhtml, "", CollectionConverter(ListoEntries))
        End If
    Next i
    
SectionTitle = IE.document.getelementbyid(CrossLink & "_title").innerhtml
Debug.Print CrossLink & " - " & TableSet.count & " entries for " & SectionTitle
Pull_Table_From_Page = Array(SectionTitle, CrossLink, CollectionConverter(TableSet))
    
End Function

Private Function Searchv3(SearchString As String, ObjectTypes As Variant, Optional Salesforce As String = "na68") As Variant
Dim ObjectTypeTable As New Collection
Dim SearchMask As New Collection
Dim ResultTables As Object
Dim FoundTables As New Collection
Dim tObj As Object
Dim IE As Object
Dim sURL As String
Dim tVar As Variant

ObjectTypeTable.Add Array("Engagements", "a0D")
ObjectTypeTable.Add Array("Contacts", "003")
ObjectTypeTable.Add Array("Landlords", "a4g")
ObjectTypeTable.Add Array("Accounts", "001")
ObjectTypeTable.Add Array("Assessments", "a1l")
ObjectTypeTable.Add Array("Accommodation Sites", "a0c")


For i = 0 To UBound(ObjectTypes)
    If Len(ObjectTypes(i)) = 3 Then
        SearchMask.Add "&sen=" & ObjectTypes(i)
    Else 'convert name to record type
        For j = 1 To ObjectTypeTable.count
            If ObjectTypes(i) = ObjectTypeTable(j)(0) Then
                SearchMask.Add "&sen=" & ObjectTypeTable(j)(1)
                j = ObjectTypeTable.count
            End If
        Next j
    End If
Next i

sURL = "https://" & Salesforce & ".salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2" & Collection2String(SearchMask) & "&str=" & SearchString
Call opNAV(IE, "nav", sURL)
Set ResultTables = IE.document.getelementsbyclassname("bPageBlock brandSecondaryBrd secondaryPalette")
    For i = 0 To (ResultTables.Length - 1)
        Set tObj = ResultTables(i).getelementsbytagname("table")
        tVar = Pull_Table_From_Page2(IE, (ResultTables(i).getelementsbytagname("div")(1).ID))
        tVar(0) = tObj(0).Summary
        FoundTables.Add tVar
    Next i

Call opNAV(IE, "quit")
Searchv3 = Array("Search Results", sURL, CollectionConverter(FoundTables))
End Function

Private Function Pull_Table_From_Page2(IE As Object, CrossLink As String) As Variant
Dim CrossLookupMainTable As Object
Dim TempHolder As Object
Dim SectionTitle As String
Dim StartBased_on_Type As Double

Dim TableRows As Object
Dim TableHeaders As Object
Dim TableSet As Collection
Dim ListoEntries As Collection
Dim tAnchor As Object
Dim CurrentTD As Object

Dim IDofDivHoldingTable As String

'On Error GoTo 0

'If InStr(1, CrossLink, "_", vbTextCompare) > 0 Then
If InStr(1, CrossLink, "_", vbTextCompare) = 1 Then
    IDofDivHoldingTable = CrossLink & "_body"
Else
    IDofDivHoldingTable = CrossLink
End If

'Debug.Print "looking for element with ID = " & CrossLink
'Debug.Print IE.LocationURL
Set CrossLookupMainTable = IE.document.getelementbyid(IDofDivHoldingTable)
'get table
Set TempHolder = CrossLookupMainTable.getelementsbytagname("table")
'get tbody
Set TempHolder = TempHolder(0).getelementsbytagname("tbody")
'class = pbHeader
Set TableRows = TempHolder(0).getelementsbytagname("tr") 'This conatins every row
'this gets the table headers that will be baked into each set
Set TableHeaders = TableRows(0).getelementsbytagname("th") 'this filters out just the top row which has the column titles

Set TableSet = New Collection
    Debug.Print (TableRows.Length - 1) & " rows for " & CrossLink 'this lists off the number of rows minus the title row
    For i = 1 To (TableRows.Length - 1)
        Set TempHolder = TableRows(i).getelementsbytagname("td") 'this pulls all the TD elements for a given row
            Set ListoEntries = New Collection
            
            If TempHolder.Length < 2 Then 'is this extra?
                ListoEntries.Add Array("Blank Field", "ID", Array("Blank Field", ""))
            Else
                'Debug.Print "Number of columns " & TempHolder.Length
                
                    '##If we're looking up assessment History, we want the frist TD otherwise we can skip it because it's an edit
                    '##Standard format is <td>edit</td><th>Object Name</th><td>other values...
                For j = StartBased_on_Type To (TempHolder.Length - 1)
                    If j = 0 Then
                        If InStr(1, TempHolder(0).innerhtml, ">Edit</a>", vbTextCompare) > 0 Then
                            Set CurrentTD = TableRows(i).getelementsbytagname("th")(0) 'replaces the edit TD with the actual object name TH
                        Else
                            Set CurrentTD = TempHolder(j)
                        End If
                    Else
                        Set CurrentTD = TempHolder(j)
                    End If
                    
                    If InStr(1, CurrentTD.innerhtml, "</a>", vbTextCompare) > 0 Then
                        Set tAnchor = CurrentTD.getelementsbytagname("a")
                        SectionTitle = tAnchor(0).HREF
                            If InStr(1, SectionTitle, "https://na68.salesforce.com/", vbTextCompare) Then
                                SectionTitle = Pull_Table_From_Page_AnchorParse(SectionTitle)
                            Else
                            End If
                        
                        'Debug.Print tAnchor(0).innerhtml
                        ListoEntries.Add Array(TableHeaders(j + 1).innertext, "ID", Array(tAnchor(0).innerhtml, SectionTitle))
                        'Debug.Print "^^^" & TableHeaders(j + 1).innerhtml & " = " & tAnchor(0).innerhtml
                    Else
                    'Debug.Print "counting: " & ListoEntries.count & " | " & CurrentTD.innerhtml
                        If InStr(1, CurrentTD.innerhtml, "<img", vbTextCompare) > 0 Then 'alt text of image is checked or not checked
                            ListoEntries.Add Array(TableHeaders(j + 1).innertext, "ID", Array(CurrentTD.getelementsbytagname("img")(0).alt, ""))
                        Else
                            'Debug.Print "Adding: " & CurrentTD.innerhtml
                            ListoEntries.Add Array(TableHeaders(j + 1).innertext, "ID", Array(Replace(CurrentTD.innerhtml, "&nbsp;", ""), ""))
                        End If
                    End If
                Next j
            End If
            
        Set TempHolder = TableRows(i).getelementsbytagname("th")
        If InStr(1, TempHolder(0).innerhtml, "<a", vbTextCompare) Then
            Set TempHolder = TempHolder(0).getelementsbytagname("a")
            TableSet.Add Array(TempHolder(0).innerhtml, Pull_Table_From_Page_AnchorParse(TempHolder(0).HREF), CollectionConverter(ListoEntries))
        Else
            TableSet.Add Array(TempHolder(0).innerhtml, "", CollectionConverter(ListoEntries))
        End If
    Next i

If InStr(1, CrossLink, "_", vbTextCompare) = 1 Then
    SectionTitle = IE.document.getelementbyid(CrossLink & "_title").innerhtml
Else
    SectionTitle = CrossLink
End If

Debug.Print CrossLink & " - " & TableSet.count & " entries for " & SectionTitle
Pull_Table_From_Page2 = Array(SectionTitle, CrossLink, CollectionConverter(TableSet))
    
End Function
Private Function Pull_Table_From_Page_AnchorParse(aHREF As String)
Dim tNum As Double

tNum = InStr(1, aHREF, "?", vbTextCompare)
If tNum > 0 Then
    aHREF = left(aHREF, tNum - 1)
End If


If InStr(1, aHREF, "salesforce.com/", vbTextCompare) > 0 Then
    aHREF = Right(aHREF, 15)
Else
End If


Pull_Table_From_Page_AnchorParse = aHREF
End Function
Private Function Map_Record2HTML(RecordPackage As Variant) As String
Dim tCode As String

tCode = "<table width=""300px"" style=""border: 2px solid black;"" id=""" & RecordPackage(1) & """ ><tr><th><strong>"
tCode = tCode & "<a href=""https://na68.salesforce.com/" & RecordPackage(1) & """ >" & RecordPackage(0) & "</a>"
tCode = tCode & "</strong></th></tr>"
tCode = tCode & "<tr><td><table style=""margin-left: 10px; margin-right: 10px;"">"
    For i = 0 To UBound(RecordPackage(2))
        tCode = tCode & "<tr style=""outline: thin solid""><td id=""" & RecordPackage(2)(i)(1) & "_label"" >" & RecordPackage(2)(i)(0) & "</td><td id=""" & RecordPackage(2)(i)(1) & "_value"" >"
        If IsArray(RecordPackage(2)(i)(2)(0)) Then
            Debug.Print "Package entry is missing info"
        Else
            If Len(RecordPackage(2)(i)(2)(1)) < 15 Then
                tCode = tCode & RecordPackage(2)(i)(2)(0)
            Else
                tCode = tCode & "<a href=""https://na68.salesforce.com/" & RecordPackage(2)(i)(2)(1) & """ >" & RecordPackage(2)(i)(2)(0) & "</a>"
            End If
        End If
        tCode = tCode & "</td></tr>"
    Next i
tCode = tCode & "</table></td></tr></table>"

'Debug.Print tCode
Map_Record2HTML = tCode
End Function
Sub PAHR_Master(EngagementID As String, Optional fPAX As Variant = "")
Dim PAXn As Variant
Dim HPaddress As Variant
Dim FieldList As Collection
Dim TempUpdates As Collection
Dim IE As Object
Dim PrimeSiteID As String
Dim Accommodation As String
Dim HousingValidation As String
Dim TempHolder As Variant
Dim LandlordID As String
Dim Eligibility As Boolean
Dim TempStatus As String


'This allows you to call the PAX data structure first to do other stuff before finishing with calculating Housing
If EngagementID = "" Then
PAXn = fPAX
fPAX = ""
Else
PAXn = PAHR_CollectInfo(EngagementID)
End If
'Call Print_L2_HTML(PAXn)

'make sure the engagement should even be proccessed for housing
    Eligibility = True
    TempStatus = PageInfoF(PAXn, "Status")(0)
    If TempStatus = "Processing" Or TempStatus = "Program Ready" Then
    Else
        Eligibility = False
    End If
    If PageInfoF(PAXn, "Placement Status")(0) = "Not Placed" Then
        Eligibility = False
    End If
    If UBound(PageInfoF(PAXn, "Primary Match")) <> 2 Then
        Eligibility = False
    End If
    TempStatus = PageInfoF(PageInfoF(PAXn, "Primary Match"), "Host Account")(0)
    If TempStatus = "Kelley House" Or TempStatus = "Harbor View Hotel" Then
        Eligibility = False
        PAXn = PAHR_CancellationRisk_ThankYouLetter(PAXn)
    End If
    If CDate(PageInfoF(PAXn, "Engagement Start")(0)) < Now() Then
        Eligibility = False
        Debug.Print "Found Engagement where PAX should already be in country"
    End If

'end engagement eligibility


If Eligibility Then
    'Check to make sure notification has primary match
    If PageInfoF(PageInfoF(PAXn, "Housing Plan Notification"), "Match")(1) <> PageInfoF(PAXn, "Primary Match")(1) Then
        HPaddress = Array(PageInfoF(PAXn, "Primary Match")(1), PageInfoF(PageInfoF(PAXn, "Primary Match"), "Position Name")(1), PageInfoF(PageInfoF(PAXn, "Primary Match"), "Host Account")(1))
        Set FieldList = New Collection
            FieldList.Add Array("CF00Na0000009s14r_lkid", HPaddress(0))
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PAXn, "Housing Plan Notification")(1) & "/e")
        Call PushUpdates2Page(IE, FieldList)
        Set FieldList = New Collection
            FieldList.Add Array("CF00Na000000B2Kff_lkid", HPaddress(0))
            FieldList.Add Array("CF00Na000000B2Kfr_lkid", HPaddress(1))
            FieldList.Add Array("CF00Na000000B2KfU_lkid", HPaddress(2))
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PAXn, "Housing Plan Assessment")(1) & "/e")
        Call PushUpdates2Page(IE, FieldList)
    End If

    If PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Street")(0) <> "" Then
    Debug.Print "street being proccessed is " & PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Street")(0)
        HPaddress = AddressParse((PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Street")(0)), "", (PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "City")(0)), (PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "State")(0)), (PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Zip")(0)))
        If HPaddress(15) Then
            Debug.Print "Address is damaged don't find prime site"
            PrimeSiteID = ""
        Else
            LandlordID = Housing_Landlord_DeDup_Search((PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Landlord Name")(0)), CleanPhone((PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Landlord Phone")(0))), (PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Landlord Email")(0)))
            PrimeSiteID = Housing_Search_for_Prime_Site(HPaddress, LandlordID)
        End If
    Else
        'check if there was an accomodation option instead
        If PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Accommodation Option")(0) <> "" Then
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Accommodation Option")(1))
            PrimeSiteID = FetchField(IE, "CF00Na000000B2kKu_ileinner")(1)
            
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PrimeSiteID)
                Set FieldList = New Collection
                    FieldList.Add Array("Street", "00N30000009ot82_ileinner")
                    FieldList.Add Array("City", "00N30000009ot7d_ileinner")
                    FieldList.Add Array("State", "00N30000009ot7x_ileinner")
                    FieldList.Add Array("Postal", "00N30000009ot7s_ileinner")
                HPaddress = AddressParse((FetchField(IE, "00N30000009ot82_ileinner")(0)), "", (FetchField(IE, "00N30000009ot7d_ileinner")(0)), (FetchField(IE, "00N30000009ot7x_ileinner")(0)), (FetchField(IE, "00N30000009ot7s_ileinner")(0)))
                
            If HPaddress(0) = "" Then
                PrimeSite = ""
                Debug.Print "Accommodation Option Is Fake to account for Janice's edits"
                PAXn = PAHR_CancellationRisk_ThankYouLetter(PAXn)
            Else
                PrimeSiteID = Housing_Search_for_Prime_Site(HPaddress, "")
                Debug.Print "accomm option site id is " & PrimeSiteID
            End If
        Else
            'check if trip is real and has address
            If PageInfoF(PAXn, "Trips")(0) <> "Field not Found" Then
                If PageInfoF(PageInfoF(PAXn, "Trips"), "Street")(0) <> "" Then
                    HPaddress = AddressParse((PageInfoF(PageInfoF(PAXn, "Trips"), "Street")(0)), "", (PageInfoF(PageInfoF(PAXn, "Trips"), "City")(0)), (PageInfoF(PageInfoF(PAXn, "Trips"), "State")(0)), (PageInfoF(PageInfoF(PAXn, "Trips"), "Zip")(0)))
                    PrimeSiteID = Housing_Search_for_Prime_Site(HPaddress, "")
                    'write housing to housing plan
                    Set FieldList = New Collection
                        FieldList.Add Array("00Na000000B34SE", "Trip")
                        FieldList.Add Array("00Na000000B34SF", PageInfoF(PageInfoF(PAXn, "Trips"), "Street")(0))
                        FieldList.Add Array("00Na000000B34S5", PageInfoF(PageInfoF(PAXn, "Trips"), "City")(0))
                        FieldList.Add Array("00Na000000B34SD", PageInfoF(PageInfoF(PAXn, "Trips"), "State")(0))
                        FieldList.Add Array("00Na000000B34SC", PageInfoF(PageInfoF(PAXn, "Trips"), "Zip")(0))
                    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PAXn, "Housing Plan Assessment")(1) & "/e")
                    Call PushUpdates2Page(IE, FieldList)
                End If
            End If
        End If
        'set address
    End If
    
    'check if there's an accommodation
    If PrimeSiteID <> "" Then
        Debug.Print "Accommodation notes " & PageInfoF(PAXn, "IsCurrent Accommodation")(0)
        If PageInfoF(PAXn, "IsCurrent Accommodation")(0) = "Field not Found" Then
            Set FieldList = New Collection
                FieldList.Add Array("CF00N30000009ot87_lkid", PrimeSiteID)
                FieldList.Add Array("CF00Na000000B2kKt_lkid", PAXn(1))
                FieldList.Add Array("00N1300000BQr6R", "0")
                FieldList.Add Array("00N1300000BLnhT", "1")
                FieldList.Add Array("00N30000008RH1X", "Created by new PAHR proccessing")
                FieldList.Add Array("CF00N1300000BLnhN_lkid", PageInfoF(PAXn, "Housing Plan Assessment")(1))
                
            Call opNAV(IE, "nav", "https://na68.salesforce.com/a0T/e") '?00N1300000BLnhT=1
            'IE.Visible = True
            Accommodation = Right(PushUpdates2Page(IE, FieldList), 15)
            
            Set FieldList = New Collection
                FieldList.Add Array("Is Planned", "00N1300000BLnh")
                FieldList.Add Array("Housing Site", "CF00N30000009ot87")
                FieldList.Add Array("Housing Validation", "CF00N1300000BLnhS")
                FieldList.Add Array("Housing Plan", "CF00N1300000BLnhN")
            TempHolder = Retrieve_Page_Info(Accommodation, FieldList)
            
            Debug.Print "Accommodation entry " & PageInfoF(PAXn, "IsCurrent Accommodation")(0)
            PAXn = PageInfo_RR(PAXn, "IsCurrent Accommodation", TempHolder)
            'if no, create a new one
        Else
            'if accommodation exists, make sure housing plan is attached, check the address on it, find a validaton
            Accommodation = PageInfoF(PAXn, "IsCurrent Accommodation")(1)
        End If
        
        If left(Accommodation, 3) = "a0T" Then
        'checks to see if PAX was getting warnings and if yes, sends a thankyou letter
        PAXn = PAHR_CancellationRisk_ThankYouLetter(PAXn)
    
        Debug.Print "Accommodation was Valid!"
        Set FieldList = New Collection
            Debug.Print "About to find housing plan "
            Debug.Print PageInfoF(PAXn, "IsCurrent Accommodation")(1)
            
            If left(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Plan")(1), 3) <> "a1l" Then
                Debug.Print "Housing Plan missing from Accommodation Object.  Adding..."
                FieldList.Add Array("CF00N1300000BLnhN_lkid", PageInfoF(PAXn, "Housing Plan Assessment")(1))
            End If
            If PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Site")(1) <> PrimeSiteID Then
                Debug.Print "Site on Accommodation Object did not match PrimeSiteID.  Adding...."
                FieldList.Add Array("CF00N30000009ot87_lkid", PrimeSiteID)
            End If
            
            'Find one true Validation
            HousingValidation = Housing_OneTrueValidation(PrimeSiteID, (PageInfoF(PAXn, "Season")(0)), (PageInfoF(PAXn, "Year")(0)))
            If Len(HousingValidation) = 15 Then
                FieldList.Add Array("CF00N1300000BLnhS_lkid", HousingValidation)
                'add in the validation, site and landlord info
                PAXn = PAHR_s_Add_ValidationPackage2Accomm(PAXn, HousingValidation)
                'check status of Housing Validation and reject Housing Plan if Validation is rejected
                    Call PAHR_Reject_Plan4Rejected_Validation(PAXn)
                
                'check to make sure the season and year are filled in
                Set TempUpdates = New Collection
                If PageInfoF(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Validation"), "Year")(0) = "" Or PageInfoF(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Validation"), "Season")(0) = "" Then
                    'update season and year on validation
                        TempUpdates.Add Array("00N1300000BLnhq", PageInfoF(PAXn, "Season")(0))
                        TempUpdates.Add Array("00N1300000BLnhn", PageInfoF(PAXn, "Year")(0))
                        TempUpdates.Add Array("Name", "WT Housing Validation - " & PageInfoF(PAXn, "Season")(0) & " " & PageInfoF(PAXn, "Year")(0))
                End If
                If PageInfoF(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Validation"), "Landlord")(1) = "" Then
                    If LandlordID <> "" Then
                        TempUpdates.Add Array("CF00N1300000BLnhl_lkid", LandlordID)
                    End If
                End If
                If TempUpdates.count > 0 Then
                    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Validation")(1) & "/e")
                    Call PushUpdates2Page(IE, TempUpdates)
                End If
                
            End If
            If FieldList.count > 0 Then
                Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Accommodation & "/e")
                Call PushUpdates2Page(IE, FieldList)
            Else
                Debug.Print "Didn't have any updates for Accommodation"
            End If
        Else
            Debug.Print "Accommodation ID wasn't a real ID"
        End If
    Else
    'check if PAX needs a warning Email
        If CDate(PageInfoF(PAXn, "Start Date")(0)) <= DateAdd("d", 35, Now()) Then
            'Initialize Warning
        End If
    End If
    
'############## Flags to indicate PAX has been proccessed #################
    'toggle address verified so assessment is last modified by me
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PAXn, "Housing Plan Assessment")(1) & "/e")
        Set FieldList = New Collection
        Debug.Print "Address verification results are " & PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Address Verified")(0) & " | " & PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Address Verified")(1)
        If PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Address Verified")(0) = "Checked" Then
            FieldList.Add Array("00Na000000B3Hku", "0")
        Else
            FieldList.Add Array("00Na000000B3Hku", "1")
        End If
        Call PushUpdates2Page(IE, FieldList)
    
    'update PAHR entry
    If PageInfoF(PAXn, "PAHR Status")(0) = "Field not Found" Then
        'create a new PAHR task log
        Call opNAV(IE, "nav", "https://na68.salesforce.com/00T/e?RecordType=01230000000seeI&ent=Task")
        Set FieldList = New Collection
            FieldList.Add Array("tsk10", "Housing Transparency")
            FieldList.Add Array("tsk5", "PAHR Transparency Report")
            FieldList.Add Array("00Na0000009rURo", "Pre-Arrival Housing")
            FieldList.Add Array("tsk4", Format(Now(), "mm/dd/yyyy"))
            FieldList.Add Array("tsk13", "Low")
            FieldList.Add Array("tsk3_lkid", PAXn(1))
            FieldList.Add Array("reminder_select_check", "0")
            FieldList.Add Array("tsk6", "Checked by Revised PAHR System")
        Call PushUpdates2Page(IE, FieldList)
    Else
        'update existing report log
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(PAXn, "PAHR Status")(1) & "/e")
        Set FieldList = New Collection
            FieldList.Add Array("tsk4", Format(Now(), "mm/dd/yyyy"))
            FieldList.Add Array("reminder_select_check", "0")
            FieldList.Add Array("tsk6", "Checked by Revised PAHR System")
        Call PushUpdates2Page(IE, FieldList)
    End If
Else
    Debug.Print "Skipping PAX due to lack of eligibility"
End If

Call opNAV(IE, "quit", "")

End Sub
Private Function PAHR_s_Add_ValidationPackage2Accomm(PAXn As Variant, HousingValidation As String) As Variant
Dim TempHolder As Variant
Dim FieldList As Collection

TempHolder = PageInfoF(PAXn, "IsCurrent Accommodation")

Set FieldList = New Collection
    FieldList.Add Array("Performed By", "00Na000000B2Kfy")
    FieldList.Add Array("Status", "00Na000000B2KgF")
    FieldList.Add Array("Completed Date", "00N1300000BLZwS")
    FieldList.Add Array("Completed with Note", "00N1300000BLnhb")
    FieldList.Add Array("Overall Assessment", "00Na000000B2Kfj")
    FieldList.Add Array("Rejection Reason", "00Na000000B369A")
    FieldList.Add Array("Landlord", "CF00N1300000BLnhl")
    FieldList.Add Array("Site", "CF00N1300000BLnhV")
    FieldList.Add Array("Season", "00N1300000BLnhq")
    FieldList.Add Array("Year", "00N1300000BLnhn")


TempHolder = PageInfo_RR(TempHolder, "Housing Validation", Retrieve_Page_Info(HousingValidation, FieldList))

Set FieldList = New Collection
    FieldList.Add Array("Address Comments", "00N1300000BLnh3")
    FieldList.Add Array("Reporting Requirement", "00N1B00000BLzmP")
    FieldList.Add Array("Landlord", "CF00N1300000BLnhG")
    FieldList.Add Array("Type", "00Na000000B2LkJ")
    
TempHolder = PageInfo_RR(TempHolder, "Housing Site", Retrieve_Page_Info((PageInfoF(TempHolder, "Housing Site")(1)), FieldList))
Debug.Print "Address Comments (blacklisted?) = " & PageInfoF(PageInfoF(TempHolder, "Housing Site"), "Address Comments")(0)
'TempHolder = PageInfo_RR(TempHolder, "Housing Validation", Retrieve_Page_Info(HousingValidation, FieldList))


PAHR_s_Add_ValidationPackage2Accomm = PageInfo_RR(PAXn, "IsCurrent Accommodation", TempHolder)
End Function
Private Sub PAHR_Reject_Plan4Rejected_Validation(PAXn As Variant)
Dim RejectHousing As Boolean
Dim IE As Object
Dim FieldList As Collection
Dim PlanID As String
Dim PlanStatus As String

RejectHousing = False
PlanID = PageInfoF(PAXn, "Housing Plan Assessment")(1)

If PageInfoF(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Validation"), "Overall Assessment")(0) = "Rejected" Then
RejectHousing = True
End If

If InStr(1, (PageInfoF(PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Site"), "Address Comments")(0)), "black", vbTextCompare) > 0 Then
RejectHousing = True
End If

If RejectHousing Then
    'check housing plan status to make sure changing to incomplete will trigger email.
    PlanStatus = PageInfoF(PageInfoF(PAXn, "Housing Plan Assessment"), "Status")(0)
    Debug.Print "Plan status = " & PlanStatus
    If PlanStatus = "Incomplete" Or PlanStatus = "Not Yet Started" Then
        Set FieldList = New Collection
            FieldList.Add Array("00Na000000B2KgF", "Complete")
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PlanID & "/e")
        Call PushUpdates2Page(IE, FieldList)
    End If

    Set FieldList = New Collection
        FieldList.Add Array("00Na000000B369A", "Your overall health, safety, and welfare are our top concern and Intrax does not recommend the housing you selected.  Intrax based its decision on a variety of factors which may include: the experiences of past participants, information obtained from the Department of State, and/or safety concerns based on the housing's location.")
        FieldList.Add Array("00Na000000B2KgF", "Incomplete")
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PlanID & "/e")
    Call PushUpdates2Page(IE, FieldList)
End If

Call opNAV(IE, "quit", "")
End Sub
Private Function Convert_CollectionTable2DataModel(Table As Collection) As Variant
Dim Titles As Collection
Dim Fields As Collection
Dim ModelList As New Collection

Set Titles = Table(1)

For i = 2 To Table.count
    Set Fields = New Collection
        For j = 3 To Titles.count
            If UBound(Table(i)(j)) > 0 Then
                Fields.Add Array(Titles(j)(0), "Missing ID", Array(Table(i)(j)(0), Table(i)(j)(1)))
            Else
                Fields.Add Array(Titles(j)(0), "Missing ID", Array(Table(i)(j)(0), ""))
            End If
        Next j
    ModelList.Add Array(Table(i)(2)(0), Table(i)(2)(1), CollectionConverter(Fields))
Next i

Convert_CollectionTable2DataModel = CollectionConverter(ModelList)
End Function
Private Sub PAHRv3_HousingPlanAssessment(ByRef PAXPackage As Variant, Optional Salesforce As String = "na68", Optional LegacyHousing As Boolean = False)
Dim FieldList As Collection
Dim RecordList As Variant
Dim TempRecord As Variant
Dim tString As String

If LegacyHousing Then
    If IsArray(PageInfoF(PAXPackage, "Open Activities")) Then
    RecordList = PageInfoF(PAXPackage, "Open Activities")
        For i = 0 To UBound(RecordList)
            If IsArray(RecordList(i)) Then
                If RecordList(i)(0) = "PAHR Transparency Report" Then
                    PAXPackage = PageInfo_RR(PAXPackage, "PAHR Status", RecordList(i))
                End If
            End If
        Next i
    End If

'Legacy Field List
    Set FieldList = New Collection
        FieldList.Add Array("Status", "00Na000000B2KgF")
        FieldList.Add Array("Rejection Reason", "00Na000000B369A")
        FieldList.Add Array("Accommodation Plan", "00N1300000BLbZG")
        FieldList.Add Array("Accommodation Option", "CF00N1300000BLbZF")
        FieldList.Add Array("Housing Type", "00Na000000B3D66")
        FieldList.Add Array("Housing Business", "00Na000000B3D65")
        FieldList.Add Array("Street", "00Na000000B34SF")
        FieldList.Add Array("Street 2", "00Na000000B34SE")
        FieldList.Add Array("City", "00Na000000B34S5")
        FieldList.Add Array("State", "00Na000000B34SD")
        FieldList.Add Array("Zip", "00Na000000B34SC")
        FieldList.Add Array("Landlord Name", "00N1300000BLbZK")
        FieldList.Add Array("Landlord Phone", "00N1300000BLbZJ")
        FieldList.Add Array("Landlord Email", "00N1300000BLbZI")
        FieldList.Add Array("Landlord Website", "00N1300000BLbZL")
        FieldList.Add Array("Address Verified", "00Na000000B3Hku")
Else
    Set FieldList = New Collection
        FieldList.Add Array("Accommodation Type", "00Na000000B3D66")
        FieldList.Add Array("Accommodation Business", "00Na000000B3D65")
        FieldList.Add Array("Street", "00Na000000B34SF")
        FieldList.Add Array("Street 2", "00Na000000B34SE")
        FieldList.Add Array("City", "00Na000000B34S5")
        FieldList.Add Array("State", "00Na000000B34SD")
        FieldList.Add Array("Postal Code", "00Na000000B34SC")
        FieldList.Add Array("Country", "00Na000000B34S6")
        FieldList.Add Array("Name of Landlord or Property Manager", "00N1300000BLbZK")
        FieldList.Add Array("Landlord or Property Manager Phone", "00N1300000BLbZJ")
        FieldList.Add Array("Landlord or Property Manager Email", "00N1300000BLbZI")
        FieldList.Add Array("Property Manager Website", "00N1300000BLbZL")
        FieldList.Add Array("Sevis Address Override", "00N1300000BLbZN")
        FieldList.Add Array("Sevis Address Override Reason", "00N1300000BLbZM")
        FieldList.Add Array("Weekly Housing Cost", "00N1B00000BT4IW")
        FieldList.Add Array("Housing Cost Type", "00N1B00000BT4IP")
        FieldList.Add Array("Is Housing Cost Deducted", "00N1B00000BT4IS")
        FieldList.Add Array("Rent", "00N1300000BLnho")
        FieldList.Add Array("Rent Basis", "00N1300000BHFNh")
        FieldList.Add Array("Deposit", "00N1300000BLnhd")
        FieldList.Add Array("Deposit Required", "00N1B00000BT4IO")
        FieldList.Add Array("Transportation Type", "00N1B00000BT4IV")
        FieldList.Add Array("Transportation By Host", "00N1B00000BT4IT")
        FieldList.Add Array("Weekly Transportation Cost", "00N1B00000BT4IX")
        FieldList.Add Array("Transportation Market Value", "00N1B00000BT4IU")
        FieldList.Add Array("Additional Amenities", "00N1B00000BT4IM")
        FieldList.Add Array("Number of Residents", "00Na000000B2Kg4")
        FieldList.Add Array("Bedrooms", "00N1300000BLnha")
        FieldList.Add Array("Bedroom Sharing Indicated", "00N1300000BQsGS")
        FieldList.Add Array("Bedroom Privacy Description", "00N1300000BRX90")
        FieldList.Add Array("Bathrooms", "00N1300000BLnhZ")
        FieldList.Add Array("Bathroom Sharing Indicated", "00N1B00000BT7uN")
        FieldList.Add Array("Bathroom Sharing", "00N1B00000BT4IN")
        FieldList.Add Array("Utilities Paid by Residents", "00N1300000BLnhr")
        FieldList.Add Array("Access To Utilities", "00Na000000B2Kec")
        FieldList.Add Array("Housing Flexibility", "00N1B00000BT4IQ")
        FieldList.Add Array("Housing Market Value", "00N1B00000BT4IR")
        FieldList.Add Array("Host Company", "CF00Na000000B2KfU")
        FieldList.Add Array("Host Address", "00Na000000B39cB")
        FieldList.Add Array("Status", "00Na000000B2KgF")
        FieldList.Add Array("Confirmed Date", "00Na000000B2Kf1")
        FieldList.Add Array("Completed Date", "00N1300000BLZwS")
        FieldList.Add Array("Rejection Reason", "00Na000000B369A")
        FieldList.Add Array("Accommodation Plan", "00N1300000BLbZG")
End If

RecordList = PageInfoF(PAXPackage, "Assessments")
If IsArray(RecordList) Then
    For i = 0 To UBound(RecordList)
        If PageInfoF(RecordList(i), "Record Type")(0) = "WT PT Housing Plan" Then
            TempRecord = Retrieve_Page_Info((RecordList(i)(1)), FieldList, Salesforce)
            
            If PageInfoF(TempRecord, "Street")(0) <> "" Then 'processess address
                TempRecord = PageInfo_RR(TempRecord, "PAX Address", APEv3_RecordFields2Address(TempRecord))
            End If
            
            PAXPackage = PageInfo_RR(PAXPackage, "Housing Plan Assessment", TempRecord)
        End If
    Next i
End If

End Sub
Private Function APEv3_RecordFields2Address(PageFields As Variant) As Variant
Dim AddString As String
Dim FieldList As New Collection
Dim HousingType As Variant

    FieldList.Add Array("Street", "")
    FieldList.Add Array("Street 2", ", ")
    FieldList.Add Array("City", ", ")
    FieldList.Add Array("State", ", ")
    FieldList.Add Array("Postal Code", " ")


For i = 1 To FieldList.count
    AddString = AddString & FieldList(i)(1) & PageInfoF(PageFields, (FieldList(i)(0)))(0)
Next i

HousingType = PageInfoF(PageFields, "Type")
    If IsArray(HousingType) Then
        HousingType = HousingType(0)
    Else
        HousingType = ""
    End If
    
APEv3_RecordFields2Address = APEv3(AddString, (HousingType))
End Function

Private Function PAHR_CollectInfo(EngagementID As String, Optional Flavor As String = "Housing", Optional Salesforce As String = "na68") As Variant
Dim FieldList As New Collection
Dim RecordInfo As Variant
Dim RecordList As Variant
Dim TempRecord As Variant
Dim tString As String

'Flavors are Housing, Case, HFA, Survey
    
    'Engagement Info
    FieldList.Add Array("Status", "00Na0000009s14S")
    FieldList.Add Array("Placement Status", "00Na000000B2Fr2")
    FieldList.Add Array("Start Date", "00Na0000009s14D")
    FieldList.Add Array("Accommodation Plan Status", "00N1B00000BLynM")
    FieldList.Add Array("Partner", "CF00Na000000B2Kgy_ileinner")
    FieldList.Add Array("Service Level", "00Na000000B2tGX_ileinner")
    FieldList.Add Array("Season", "00Na000000B2tGW_ileinner")
    FieldList.Add Array("Year", "00Na000000B2KhB_ileinner")
    FieldList.Add Array("Account", "CF00Na0000009s148_ileinner")
    FieldList.Add Array("Notifications", "_00Na000000B2KhT")
    FieldList.Add Array("Accommodations", "_00Na000000B2kKt")
    FieldList.Add Array("Assessments", "_00Na000000B2Kf5")
    FieldList.Add Array("Trips", "_00Na000000B2KbB")
    FieldList.Add Array("Matches", "_00Na0000009s14h")
    FieldList.Add Array("Open Activities", "_RelatedActivityList")
    FieldList.Add Array("Cases", "_00Na000000B2eGh")
    FieldList.Add Array("Opportunity", "CF00Na0000009s14M")
    FieldList.Add Array("Gender", "00Na000000B2Kgi_ileinner")
    FieldList.Add Array("Engagement Start", "00Na0000009s14D_ileinner")
    FieldList.Add Array("Engagement End", "00Na0000009s14C_ileinner")
    FieldList.Add Array("SEVIS ID", "00Na000000B2eH2_ileinner")
    FieldList.Add Array("Intrax ID", "00Na000000B2kL8_ileinner")
    FieldList.Add Array("Actual Arrival", "00Na000000B33kI_ileinner")
        If Flavor = "HFA" Then
        FieldList.Add Array("Intrax Program Uploads", "_00Na0000009s14g")
        FieldList.Add Array("Applications", "_00Na000000B2Kea")
        FieldList.Add Array("Flexible Dates", "00Na000000B2Kgg_ileinner")
        End If


RecordInfo = Retrieve_Page_Info(EngagementID, FieldList, Salesforce)
RecordInfo = PageInfo_RR(RecordInfo, "Engagement", Array(RecordInfo(0), RecordInfo(1))) 'This allows mailmerge to call the engagement Name and ID via existing architecture
RecordInfo = PageInfo_RR(RecordInfo, "Case", Array(RecordInfo(1), RecordInfo(1))) 'This defaults the case in emailer/infogrid to the Engagement

'This section sets the Salutation for emails
    tString = ""
    If PageInfoF(RecordInfo, "Gender")(0) = "Male" Then
        tString = "Mr. "
    Else
        tString = "Ms. "
    End If
    tString = tString & WorksheetFunction.Proper((PageInfoF(RecordInfo, "Account")(0)))
RecordInfo = PageInfo_RR(RecordInfo, "Salutation", tString)

RecordInfo = PageInfo_RR(RecordInfo, "Partner", Return_Partners(PageInfoF(RecordInfo, "Partner")))



If Flavor = "Housing" Then

    Call PAHRv3_HousingPlanAssessment(RecordInfo, Salesforce)
    
    'Convert Notification to Housing Plan
    RecordList = PageInfoF(RecordInfo, "Notifications")
    If IsArray(RecordList) Then
        Debug.Print "Notifications found: " & UBound(RecordList)
        For i = 0 To UBound(RecordList)
            Debug.Print "Notification type is " & PageInfoF(RecordList(i), "Type")(0)
            If PageInfoF(RecordList(i), "Type")(0) = "Housing Plan" Then
                RecordInfo = PageInfo_RR(RecordInfo, "Housing Plan Notification", RecordList(i))
            End If
        Next i
    End If
    
        Set FieldList = New Collection
        FieldList.Add Array("Street", "00N1300000BCX5l_ileinner")
        FieldList.Add Array("City", "00N1300000BCX5g_ileinner")
        FieldList.Add Array("State", "00N1300000BCX5j_ileinner")
        FieldList.Add Array("Zip", "00N1300000BCX5i_ileinner")
        
    'Debug.Print "trip id is an array?  " & IsArray(PageInfoF(RecordInfo, "Trips")(0)(1))
    If IsArray(PageInfoF(RecordInfo, "Trips")) Then
    'If UBound(pageinoff(RecordInfo, "Trips")) > 1 Then
        RecordInfo = PageInfo_RR(RecordInfo, "Trips", Retrieve_Page_Info((PageInfoF(RecordInfo, "Trips")(0)(1)), FieldList, Salesforce))
    'End If
    End If
    'RecordInfo = PageInfo_RR(RecordInfo, "Trips", PageInfoF(RecordInfo, "Trips")(0))

End If

'Convert Matches to Primary Match
If Flavor = "Case" Then
    If IsArray(PageInfoF(RecordInfo, "Matches")) Then
    RecordInfo = Find_Primary_Match(RecordInfo, Salesforce, True)
    
    If IsArray(PageInfoF(RecordInfo, "Primary Match")) Then
        RecordInfo = PageInfo_RR(RecordInfo, "Region", Retrieve_RAM((PageInfoS(RecordInfo, "Primary Match.Position Name.State")(0))))
        Else
            Debug.Print "No primary Match"
        End If
    Else
        Debug.Print "Tried to find a primary match from match list but failed."
    End If
Else
    RecordInfo = Find_Primary_Match(RecordInfo, Salesforce)
End If



If Flavor = "Case" Or Flavor = "Survey" Then
'Add PAX Contact for Case
    Set FieldList = New Collection
    FieldList.Add Array("Primary Contact", "CF00Na0000009rUSE")
    TempRecord = Retrieve_Page_Info((PageInfoF(RecordInfo, "Opportunity")(1)), FieldList, Salesforce)
    
    RecordInfo = PageInfo_RR(RecordInfo, "Opportunity", Retrieve_Page_Info((PageInfoF(RecordInfo, "Opportunity")(1)), FieldList, Salesforce))
End If

'Convert Accommodation to housing plan
    Set FieldList = New Collection
        FieldList.Add Array("Is Planned", "00N1300000BLnh")
        FieldList.Add Array("Housing Site", "CF00N30000009ot87")
        FieldList.Add Array("Housing Validation", "CF00N1300000BLnhS")
        FieldList.Add Array("Housing Plan", "CF00N1300000BLnhN")

TempRecord = ""
RecordList = ""
If IsArray(PageInfoF(RecordInfo, "Accommodations")) Then
If IsArray(PageInfoF(RecordInfo, "Accommodations")(0)) Then
    RecordList = PageInfoF(RecordInfo, "Accommodations")
    Debug.Print "Number of accommodations found = " & UBound(RecordList)
        For i = 0 To UBound(RecordList)
        Debug.Print "Accommodation " & RecordList(i)(0) & " | " & PageInfoF(RecordList(i), "Is Planned")(0)
            If PageInfoF(RecordList(i), "Is Planned")(0) = "Checked" Then
                'Print_L2_HTML (TempRecord)
                RecordInfo = PageInfo_RR(RecordInfo, "IsCurrent Accommodation", Retrieve_Page_Info((RecordList(i)(1)), FieldList, Salesforce))
            End If
            If PageInfoF(RecordList(i), "Is Current")(0) = "Checked" Then
                'Print_L2_HTML (TempRecord)
                RecordInfo = PageInfo_RR(RecordInfo, "IsCurrent Accommodation", Retrieve_Page_Info((RecordList(i)(1)), FieldList, Salesforce))
            End If
        Next i
End If
End If

'upgrade account
If Flavor = "Case" Or Flavor = "HFA" Then
    Set FieldList = New Collection
        FieldList.Add Array("Birthdate", "PersonBirthdate_ileinner")
        FieldList.Add Array("Age", "00Na000000B2ZfG_ileinner")
        FieldList.Add Array("Email", "PersonEmail_ileinner")
        FieldList.Add Array("Skype ID", "00N300000068Wsd_ileinner")
        FieldList.Add Array("Citizenship", "00N300000068vCb_ileinner")
        FieldList.Add Array("First Name", "name_firstacc2")
        FieldList.Add Array("Last Name", "name_lastacc2")
        FieldList.Add Array("Middle Name", "00N30000009pGel_ileinner")
        
    RecordInfo = PageInfo_RR(RecordInfo, "Account", Retrieve_Page_Info((PageInfoF(RecordInfo, "Account")(1)), FieldList, Salesforce))
End If
    
    'Debug.Print "Let's take a look " & PageInfoF(RecordInfo, "Accommodations")(0)
    'Debug.Print "Let's take a look " & PageInfoF(RecordInfo, "Accommodations")(0)
PAHR_CollectInfo = RecordInfo
End Function
Private Function Find_Primary_Match_HCInfo(PAXn As Variant, Salesforce As String) As Variant
Dim Position As Variant
Dim FieldList As Collection
Dim Opportunity As Variant
Dim PrimaryMatch As Variant
Dim Manager As Variant

'this upgrades the match info from the Engagement with HC details

PrimaryMatch = PageInfoF(PAXn, "Primary Match")
Position = PageInfoF(PrimaryMatch, "Position Name")
    Set FieldList = New Collection 'Position level fields
    FieldList.Add Array("Host Opportunity", "CF00N30000008RES7_ileinner")
    FieldList.Add Array("Street", "00N30000008RCsl_ileinner")
    FieldList.Add Array("City", "00N30000008RCsq_ileinner")
    FieldList.Add Array("State", "00N30000008RCsv_ileinner")
    FieldList.Add Array("Zip", "00N30000008RCt0_ileinner")
    FieldList.Add Array("PC Code", "00Na000000B2LkX")
    FieldList.Add Array("Description", "spc_00N30000008RCrO_div")
    FieldList.Add Array("Compensation Type", "00N30000008RCrJ")
    FieldList.Add Array("Position Types", "00N30000009pqOY")
    FieldList.Add Array("Service Level", "00N1300000BQz2m")
    FieldList.Add Array("Status", "00N30000008RJo3")
    FieldList.Add Array("Pay Rate", "00N30000008RCs2")
    FieldList.Add Array("Tipped Position", "00Na000000B2Lkv")
    FieldList.Add Array("Countries Excluded", "00Na000000B2LkZ")
    FieldList.Add Array("Countries of Interest", "00N30000009pgoC")
    FieldList.Add Array("Pay Notes", "00Na0000009qGEM")
Position = Retrieve_Page_Info((Position(1)), FieldList, Salesforce)
    Set FieldList = New Collection 'Opportunity Level Fields
    FieldList.Add Array("Stage", "opp11_ileinner")
    FieldList.Add Array("Service Level", "00N30000007CyH2_ileinner")
    FieldList.Add Array("Account ID", "00Na000000B3Fdi_ileinner")
    FieldList.Add Array("Primary Contact", "CF00Na0000009rUSE_ileinner")
    FieldList.Add Array("Operations Contact", "CF00N1B00000BLz5L_ileinner")
Opportunity = Retrieve_Page_Info((PageInfoF(Position, "Host Opportunity")(1)), FieldList, Salesforce)

    Set FieldList = New Collection 'Contact Level Fields
    FieldList.Add Array("Email", "con15_ileinner")
    FieldList.Add Array("Phone", "con10_ileinner")
Manager = Retrieve_Page_Info((PageInfoF(Opportunity, "Primary Contact")(1)), FieldList, Salesforce)
Opportunity = PageInfo_RR(Opportunity, "Primary Contact", Manager) 'insert primary contact fields into opp
Position = PageInfo_RR(Position, "Host Opportunity", Opportunity) 'insert opp info postion
PrimaryMatch = PageInfo_RR(PrimaryMatch, "Position Name", Position) 'insert postion into primary match

Find_Primary_Match_HCInfo = PageInfo_RR(PAXn, "Primary Match", PrimaryMatch) 'insert primary match back into PAX
End Function
Private Function Find_Primary_Match(PAXn As Variant, Salesforce As String, Optional DetailedInfo As Boolean = False) As Variant
Dim RecordSet As Variant
Dim HasMatch As Boolean
Dim Stage As String
Dim PrimaryMatch As Variant


RecordSet = PageInfoF(PAXn, "Matches")

If IsArray(RecordSet) Then
    For i = 0 To UBound(RecordSet)
        If PageInfoF(RecordSet(i), "Is Primary SOA")(0) = "Checked" Then
            PrimaryMatch = RecordSet(i)
            HasMatch = True
        End If
    Next i
End If

If HasMatch = False Then
If IsArray(RecordSet) Then
    Debug.Print "Trying to find an acceptable match"
    Dim ValidMatches As New Collection
        
    For i = 0 To UBound(RecordSet)
        Stage = PageInfoF(RecordSet(i), "Stage")(0)
        If Stage = "Confirmed" Then
            ValidMatches.Add RecordSet(i)
        End If
    Next i
    
    For i = 0 To UBound(RecordSet)
        Stage = PageInfoF(RecordSet(i), "Stage")(0)
        If Stage = "Applied" Then
            ValidMatches.Add RecordSet(i)
        End If
    Next i
    
    If ValidMatches.count > 0 Then
        HasMatch = True
        PrimaryMatch = ValidMatches(1)
    Else
        HasMatch = False
    End If
End If
End If

PAXn = PageInfo_RR(PAXn, "Has Primary Match?", Array(HasMatch, ""))
If HasMatch Then

    'this section adds the HC short name to Host account item
    RecordSet = PageInfoS(PrimaryMatch, "Host Account")
    RecordSet = Array(RecordSet(0), RecordSet(1), Array(Array("short", "", Array(ParseHCName((RecordSet(0)), 30), ""))))
    PrimaryMatch = PageInfo_RR(PrimaryMatch, "Host Account", RecordSet)

    PAXn = PageInfo_RR(PAXn, "Primary Match", PrimaryMatch)
    If DetailedInfo Then
        PAXn = Find_Primary_Match_HCInfo(PAXn, Salesforce)
    End If
    
End If

Find_Primary_Match = PAXn
End Function

Sub Housing_Fix_Match_links(HousingPlanID As String)
Dim IE As Object
Dim Engagement As Variant
Dim FieldList As Collection
Dim MatchSet As Variant


Call opNAV(IE, "nav", "https://na68.salesforce.com/" & HousingPlanID)
    Set FieldList = New Collection
        FieldList.Add Array("Status", "00Na0000009s14S_ileinner")
        FieldList.Add Array("Matches", "_00Na0000009s14h")
        FieldList.Add Array("Notifications", "_00Na000000B2KhT")

Engagement = Retrieve_Page_Info((FetchField(IE, "CF00Na000000B2Kf5_ileinner")(1)), FieldList)

If PageInfoF(Engagement, "Status")(0) = "Program Ready" Or PageInfoF(Engagement, "Status")(0) = "Proccessing" Then

    Engagement = PageInfo_RR(Engagement, "Matches", Find_Primary_Match(PageInfoF(Engagement, "Matches"), "na68"))
    
    If PageInfoF(Engagement, "Has Primary Match?")(0) Then
        Set FieldList = New Collection
            FieldList.Add Array("Position Name", "CF00N30000008REJy_ileinner")
            FieldList.Add Array("HC", "CF00N1300000BOCaF_ileinner")
        Engagement = PageInfo_RR(Engagement, "Matches", Retrieve_Page_Info((PageInfoF(Engagement, "Matches")(1)), FieldList))
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & HousingPlanID & "/e")
        Set FieldList = New Collection
            FieldList.Add Array("CF00Na000000B2Kff_lkid", PageInfoF(Engagement, "Matches")(1))
            FieldList.Add Array("CF00Na000000B2Kfr_lkid", PageInfoF(PageInfoF(Engagement, "Matches"), "Position Name")(1))
            FieldList.Add Array("CF00Na000000B2KfU_lkid", PageInfoF(PageInfoF(Engagement, "Matches"), "HC")(1))
        Call PushUpdates2Page(IE, FieldList)
        MatchSet = PageInfoF(Engagement, "Notifications")
            For i = 0 To UBound(MatchSet)
                If PageInfoF(MatchSet(i), "Type")(0) = "Housing Plan" Then
                    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchSet(i)(1) & "/e")
                        Set FieldList = New Collection
                            FieldList.Add Array("CF00Na0000009s14r_lkid", PageInfoF(Engagement, "Matches")(1))
                        Call PushUpdates2Page(IE, FieldList)
                End If
            Next i
    End If
End If

End Sub
Private Function PAHR_CancellationRisk_Warning(PAXn As Variant) As Variant
Dim PAX As Variant

Debug.Print "STARTING: PAHR/PC Warning"

PAX = PAHR_PAHR_Case_Adder(PAXn)
    
End Function
Private Function PAHR_PAHR_Case_Adder(PAXn As Variant) As Variant
Dim FieldList As Collection
Dim RecordList As Variant


RecordList = PageInfoF(PAXn, "Cases")

If IsArray(RecordList) Then
If IsArray(RecordList(0)) Then
    For i = 0 To UBound(RecordList)
        If PageInfoF(RecordList(i), "Subject")(0) = "Pre-Arrival Housing (PAHR)" Then
            TempRecord = RecordList(i)
            'Print_L2_HTML (TempRecord)
            PAXn = PageInfo_RR(PAXn, "PAHR Case", Collector_CaseUpgrader((TempRecord(1))))
            i = UBound(RecordList)
        End If
    Next i
End If
End If

PAHR_PAHR_Case_Adder = PAXn
End Function
Private Function Collector_CaseUpgrader(CaseID As String, Optional DetailLvl As Double = 1) As Variant
Dim FieldList As Collection
Dim RecordList As Variant
Dim CasePackage As Variant

Debug.Print "Starting... pahr case upgrader"

Set FieldList = New Collection
    FieldList.Add Array("Type", "cas5")
    FieldList.Add Array("Reason", "00Na000000B3Ieg")
    FieldList.Add Array("Case Reason Other", "00Na000000B2eGd")
    FieldList.Add Array("Due Date", "00N1300000BLavQ")
    FieldList.Add Array("Next Step", "00N1300000BLavV")
    FieldList.Add Array("Status", "cas7")
    FieldList.Add Array("Priority", "cas8")
    FieldList.Add Array("Subject", "cas14")
    If DetailLvl > 1 Then
        FieldList.Add Array("Description", "cas15")
        FieldList.Add Array("Activity History", "_RelatedHistoryList")
    End If
    

CasePackage = Retrieve_Page_Info(CaseID, FieldList)

Collector_CaseUpgrader = CasePackage
End Function
Private Function PAHR_CancellationRisk_ThankYouLetter(PAXn As Variant) As Variant
Dim IE As Object
Dim FieldList As Collection
Dim RecordList As Variant
Dim TempRecord As Variant
Dim PAX As Variant
Dim Stage As String

Debug.Print "STARTING: Case Thankyou Routine: " & PAXn(1)



PAXn = PAHR_PAHR_Case_Adder(PAXn)
    
Debug.Print "Is there a pahr case? " & IsArray(PageInfoF(PAXn, "PAHR Case"))

If UBound(PageInfoF(PAXn, "PAHR Case")) > 0 Then
    Debug.Print "Case ID is ? " & PageInfoF(PAXn, "PAHR Case")(1)
    
    
    If left(PageInfoF(PAXn, "PAHR Case")(1), 3) = "500" Then
        If PageInfoF(PageInfoF(PAXn, "PAHR Case"), "Case Reason Other")(0) = "Program Cancellation Risk" Then
            Stage = left(PageInfoF(PageInfoF(PAXn, "PAHR Case"), "Next Step")(0), 3)
            If Stage Like "0?|" Then
                Set FieldList = New Collection
                    FieldList.Add Array("00N1300000BLavV", "Housing Information has been submitted / Sent Thankyou")
                    FieldList.Add Array("cas7", "Closed")
                PAX = PAXbasicInfo((PAXn(1)), (PageInfoF(PAXn, "PAHR Case")(1)), "", 3)
                PAX = AddTemplate(PAX, FetchEmailTemplate("00X1B000002FrsP"))
                Call Send_HTMLEmail(PAX, "noreply", FieldList)
            End If
        End If
    End If
End If

PAHR_CancellationRisk_ThankYouLetter = PAXn
End Function
Sub ZZZ_HousingFix()
Dim EngagementList As New Collection

'Call Housing_Fix_Match_links("a1l1B000003zmX7")


Set EngagementList = New Collection

EngagementList.Add "a0d1B00000Tx5j4"


For i = 1 To EngagementList.count
    PAHR_Master (EngagementList(i))
Next i

End Sub

Private Sub PAHR_Fix_Japan_Housing_Plans(NotificationID As String)
Dim IE As Object
Dim AssessmentID As String
Dim FieldUpdates As New Collection

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & NotificationID & "/e?00Na000000B2KhX=Confirmed")

AssessmentID = FetchField(IE, "CF00Na000000B379K_lkid")(0)

Call HitSave(IE)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & AssessmentID & "/e")
    FieldUpdates.Add Array("00Na000000B2KgF", "Confirmed")
    FieldUpdates.Add Array("00Na000000B3Hku", "1")
    FieldUpdates.Add Array("00Na000000B369A", "Intrax Japan does not require Housing Plan")
    FieldUpdates.Add Array("00N1300000BLbZG", "Permanent housing secured - Employer arranged")
    FieldUpdates.Add Array("00Na000000B34SF", "")
    FieldUpdates.Add Array("00Na000000B34S5", "")
    FieldUpdates.Add Array("00Na000000B34SD", "")
        
Call PushUpdates2Page(IE, FieldUpdates)
Call opNAV(IE, "quit", "")
End Sub

Sub SEVIS_Fix_AddressError(EngagementID As String)
Dim PAXn As Variant
Dim SiteID As String
Dim IE As Object
Dim FieldUpdates As Collection
Dim OtherUpdates As Boolean
Dim ErrorList As Object
Dim SEVISBoxes As Variant


PAXn = PAHR_CollectInfo(EngagementID)

SiteID = PageInfoF(PageInfoF(PAXn, "IsCurrent Accommodation"), "Housing Site")(1)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & SiteID & "/e")
    Set FieldUpdates = New Collection
    FieldUpdates.Add Array("00N1300000BRdeQ", "1")
    FieldUpdates.Add Array("00N1300000BRdeP", "Address Doctor Issue")
Call PushUpdates2Page(IE, FieldUpdates)

Set ErrorList = IE.document.getelementsbyclassname("pbError")

For Each SOQL In ErrorList
    If InStr(1, SOQL.innerhtml, "Too many SOQL", vbTextCompare) > 0 Then
        IE.Visible = True
        MsgBox "SOQL errors for days", , "Error!"
    End If
Next SOQL

Set FieldUpdates = New Collection
    FieldUpdates.Add Array("Sevis Lock", "00Na000000B2mEA")
    FieldUpdates.Add Array("SEVIS Update EV - Biographical", "00Na000000B2eHA")
    FieldUpdates.Add Array("SEVIS Update EV - Program Amend", "00Na000000B2eHB")
    FieldUpdates.Add Array("SEVIS Update EV - Site Of Activity - Add", "00Na000000B2eHC")
    FieldUpdates.Add Array("SEVIS Update EV - Site Of Activity -Edit", "00Na000000B2eHD")
    FieldUpdates.Add Array("SEVIS Update EV - Nonstandard SoA", "00Na000000B3Lj1")
    FieldUpdates.Add Array("SEVIS Update EV - Validate US Address", "00Na000000B2eHE")
    FieldUpdates.Add Array("SEVIS Update EV - Update US Address", "00Na000000B39A7")
    
    
PAXn = PageInfo_RR(PAXn, "SEVIS Boxes", Retrieve_Page_Info(EngagementID, FieldUpdates))

OtherUpdates = False
If PageInfoF(PageInfoF(PAXn, "SEVIS Boxes"), "Sevis Lock")(1) = 1 Then
    OtherUpdates = True
End If
If PageInfoF(PageInfoF(PAXn, "SEVIS Boxes"), "SEVIS Update EV - Program Amend")(1) = 0 Then
If PageInfoF(PageInfoF(PAXn, "SEVIS Boxes"), "SEVIS Update EV - Site Of Activity - Add")(1) = 0 Then
If PageInfoF(PageInfoF(PAXn, "SEVIS Boxes"), "SEVIS Update EV - Site Of Activity -Edit")(1) = 0 Then
If PageInfoF(PageInfoF(PAXn, "SEVIS Boxes"), "SEVIS Update EV - Nonstandard SoA")(1) = 0 Then
End If
End If
End If
End If

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID & "/e")
Set FieldUpdates = New Collection
If OtherUpdates Then
    Debug.Print "Already locked, pending housing updates"
        FieldUpdates.Add Array("00Na000000B2eHE", "1")
        FieldUpdates.Add Array("00Na000000B39A7", "1")
    Call PushUpdates2Page(IE, FieldUpdates)
Else
Debug.Print "Engagemnt is not locked, sending housing update"
    FieldUpdates.Add Array("00Na000000B2eHB", "0")
    FieldUpdates.Add Array("00Na000000B2eHC", "0")
    FieldUpdates.Add Array("00Na000000B2eHD", "0")
    FieldUpdates.Add Array("00Na000000B3Lj1", "0")
    Call PushUpdates2Page(IE, FieldUpdates)
    Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/SendToSevis?scontrolCaching=1&id=" & EngagementID)
    
End If

If False Then
Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID & "/e")
    SEVISBoxes = PageInfoF(PAXn, "SEVIS Boxes")
    Set FieldUpdates = New Collection
        For i = 1 To 5
        Debug.Print "checking box for " & SEVISBoxes(2)(i)(0) & " | " & SEVISBoxes(2)(i)(1)
        FieldUpdates.Add Array(SEVISBoxes(2)(i)(1), SEVISBoxes(2)(i)(2)(1))
        Next i
        FieldUpdates.Add Array("00Na000000B2eHE", "1")
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & EngagementID & "/e")
    'IE.Visible = True
    'MsgBox "temp freeze", , "debugging"
    Call PushUpdates2Page(IE, FieldUpdates)
End If


Call opNAV(IE, "quit", "")
End Sub

Private Function HC_Roster_Builder(OppID As String, Optional IncludeEmptyPositions As Boolean = False) As Variant
Dim IE As Object
Dim HC As Variant
Dim FieldList As Collection
Dim TempPart As Variant
Dim ValidPos As Variant
Dim RAMList As Variant
Dim State As String
Dim Positions As Collection
Dim HasPositions As Boolean
Dim PAXCount As Double

If left(OppID, 3) <> "006" Then
Debug.Print "Not an Opportunity"
Else
    
    '## HC Opportunity FieldList
    Set FieldList = New Collection
        FieldList.Add Array("Account Name", "opp4")
        FieldList.Add Array("Opportunity Name", "opp3")
        FieldList.Add Array("Season", "00N30000008QXjl")
        FieldList.Add Array("Service Level", "00N30000007CyH2")
        FieldList.Add Array("Validator", "CF00Na000000B33k3")
        FieldList.Add Array("Close Date", "opp9")
        FieldList.Add Array("Stage", "opp11")
        FieldList.Add Array("Primary Contact", "CF00Na0000009rUSE")
        FieldList.Add Array("Operations Contact", "CF00N1B00000BLz5L")
        FieldList.Add Array("Agreement Status", "00N30000007CyHC")
        FieldList.Add Array("Screening Concern", "00Na000000B2vpb")
        FieldList.Add Array("Screening Concern Comments", "00Na000000B2vpa")
        FieldList.Add Array("RAM Note", "00N30000008P7LZ")
        FieldList.Add Array("Housing Note", "00N30000008P7LP")
        FieldList.Add Array("Positions", "_00N30000008RES7")
        FieldList.Add Array("Activity History", "_RelatedHistoryList")
        FieldList.Add Array("Assessments", "_00Na000000B2vpP")
        FieldList.Add Array("Owner", "opp1")
    
    HC = Retrieve_Page_Info(OppID, FieldList)
    
    
    '## HC Account Page FieldList
    Set FieldList = New Collection
        'FieldList.Add Array("Account Name", "acc2")
        FieldList.Add Array("Intrax ID", "00N30000007Cn5q")
        FieldList.Add Array("Intrax Region", "00N30000007CCDy")
        FieldList.Add Array("Status", "00N300000068N8x")
        FieldList.Add Array("Parent Account", "acc3")
        FieldList.Add Array("Account Name Legal", "00N300000068R5o")
        FieldList.Add Array("Email Business", "00N300000068R7Q")
        FieldList.Add Array("Intrax Programs", "00N300000068JZd")
        FieldList.Add Array("EIN", "00Na0000009q69s")
        FieldList.Add Array("Business License Received", "00Na0000009qzyd")
        FieldList.Add Array("Business License Expires", "00Na0000009qzyi")
        FieldList.Add Array("Workers Comp Expires", "00Na0000009qzys")
        FieldList.Add Array("Pays Directly", "00Na000000B2vpD")
        FieldList.Add Array("Is Staffing Agency", "00Na000000B2vpb")
        FieldList.Add Array("SS Card Required for Paycheck", "00N1300000BHFNT")
        FieldList.Add Array("Staffing Agency Comments", "00Na000000B2vpE")
        FieldList.Add Array("Is Home Based", "00Na000000B2vpa")
        FieldList.Add Array("Participation Reason", "00Na000000B2vpC")
        FieldList.Add Array("SIC Code", "acc16")
    
    TempPart = Retrieve_Page_Info((PageInfoF(HC, "Account Name")(1)), FieldList)
    TempPart(0) = PageInfoF(HC, "Account Name")(0)
    
    If CDate(PageInfoF(TempPart, "Workers Comp Expires")(0)) < Now() Then
        TempPart = PageInfo_RR(TempPart, "WC Status", Array("Expired", ""))
    Else
        TempPart = PageInfo_RR(TempPart, "WC Status", Array("Good Standing", ""))
    End If
    If CDate(PageInfoF(TempPart, "Business License Expires")(0)) < Now() Then
        TempPart = PageInfo_RR(TempPart, "BL Status", Array("Expired", ""))
    Else
        TempPart = PageInfo_RR(TempPart, "BL Status", Array("Good Standing ", ""))
    End If
    
    
    HC = PageInfo_RR(HC, "Account Name", TempPart)
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(HC, "Account Name")(1) & "/e")
        Set FieldList = New Collection
                FieldList.Add Array("Street", "acc17street")
                FieldList.Add Array("City", "acc17city")
                FieldList.Add Array("State", "acc17state")
                FieldList.Add Array("Zip", "acc17zip")
    For i = 1 To FieldList.count
        HC = PageInfo_RR(HC, (FieldList(i)(0)), FetchField(IE, (FieldList(i)(1))))
    Next i
    
    RAMList = LoadRAMtable()
    State = PageInfoF(HC, "State")(0)
    Debug.Print "!!!!!!!!!!!!!!State is " & State
    For i = 1 To UBound(RAMList)
        If RAMList(i, 0) = State Then
            HC = PageInfo_RR(HC, "Fieldstaff", Array(RAMList(i, 4), RAMList(i, 5)))
            HC = PageInfo_RR(HC, "RAM", Array(RAMList(i, 1), RAMList(i, 2)))
        End If
    Next i
    'MsgBox "Alert!", , "Debugging"
    
    TempPart = PageInfoF(HC, "Positions")
    Set Positions = New Collection
    PAXCount = 0
        If IsArray(TempPart) Then
            For i = 0 To UBound(TempPart)
                ValidPos = HC_Roster_Position((TempPart(i)(1)))
                
                If IncludeEmptyPositions Then
                    Positions.Add ValidPos
                Else
                    If PageInfoF(ValidPos, "Has Matches?")(0) Then
                        Positions.Add ValidPos
                        PAXCount = PAXCount + UBound(PageInfoF(ValidPos, "Matches"))
                    End If
                End If
            Next i
            HC = PageInfo_RR(HC, "PAX Count", Array(PAXCount, ""))
            If Positions.count > 0 Then
                HC = PageInfo_RR(HC, "Positions", CollectionConverter(Positions))
                Debug.Print Positions.count
                HasPositions = True
            Else
                HC = PageInfo_RR(HC, "Positions", Array("", ""))
                HasPositions = False
            End If
        End If
        
        HC = PageInfo_RR(HC, "Has Positions?", Array(HasPositions, ""))
        
    
    
    Set FieldList = New Collection
        FieldList.Add Array("Email", "con15")
        FieldList.Add Array("Title", "con5")
        FieldList.Add Array("Phone", "con10")
        
    '## Contact info
    
    HC = PageInfo_RR(HC, "Primary Contact", Retrieve_Page_Info((PageInfoF(HC, "Primary Contact")(1)), FieldList))
    If left((PageInfoF(HC, "Operations Contact")(1)), 3) <> "003" Then
        If PageInfoF(HC, "Primary Contact")(0) <> "" Then
            HC = PageInfo_RR(HC, "Operations Contact", Retrieve_Page_Info((PageInfoF(HC, "Primary Contact")(1)), FieldList))
        Else
            Debug.Print "Has positions?  " & PageInfoF(HC, "Has Positions?")(0)
            'Debug.Print "Has fields?  " & UBound(PageInfoF(HC, "Positions")(0))
            HC = PageInfo_RR(HC, "Operations Contact", Retrieve_Page_Info((PageInfoF(PageInfoF(HC, "Positions")(0), "Supervisor")(1)), FieldList))
        End If
    Else
            HC = PageInfo_RR(HC, "Operations Contact", Retrieve_Page_Info((PageInfoF(HC, "Operations Contact")(1)), FieldList))
    End If
    
    
    'Call Print_L2_HTML(HC)
    'Debug.Print HC_Roster_Print_PAX_Table(HC)
End If

Call opNAV(IE, "quit", "")
HC_Roster_Builder = HC
End Function

Private Function HC_Roster_Position(PositionID As String) As Variant
Dim PosSet As Variant
Dim MatchList As Variant
Dim MatchSet As Variant
Dim EngSet As Variant
Dim FieldList As New Collection
Dim Field2List As Collection
Dim PartnerTable As Variant
Dim Partner As String
Dim Country As String
Dim GoodMatches As Collection
Dim HasMatches As Boolean

Debug.Print "Starting Position fetch"
PartnerTable = LoadPARTNERtable()

'### Position Field List
FieldList.Add Array("PC Code", "00Na000000B2LkX")
FieldList.Add Array("Description", "spc_00N30000008RCrO_div")
FieldList.Add Array("Compensation Type", "00N30000008RCrJ")
FieldList.Add Array("Position Types", "00N30000009pqOY")
FieldList.Add Array("Service Level", "00N1300000BQz2m")
FieldList.Add Array("Status", "00N30000008RJo3")
FieldList.Add Array("Pay Rate", "00N30000008RCs2")
FieldList.Add Array("Tipped Position", "00Na000000B2Lkv")
FieldList.Add Array("Countries Excluded", "00Na000000B2LkZ")
FieldList.Add Array("Countries of Interest", "00N30000009pgoC")
FieldList.Add Array("Pay Notes", "00Na0000009qGEM")
FieldList.Add Array("EIN", "00N1B00000BLwsS")
FieldList.Add Array("Position Name", "Name")
FieldList.Add Array("Site Name", "00Na000000B2RZO")
FieldList.Add Array("Host Account", "CF00N30000008RES2")
FieldList.Add Array("Host Opportunity", "CF00N30000008RES7")
FieldList.Add Array("Position Supervisor", "CF00Na0000009qBfb")
FieldList.Add Array("Country", "00N30000008RCt5")
FieldList.Add Array("Title", "00Na000000B2Ecn")
FieldList.Add Array("Meals included", "00N1B00000BHejS")
FieldList.Add Array("Transportation", "00N1B00000BHejV")
FieldList.Add Array("Drug Testing Requirements", "00N1B00000BHejQ")
FieldList.Add Array("Positions Sold", "00N30000008RCs7")
FieldList.Add Array("Pay Frequency", "00Na000000B2LkL")
FieldList.Add Array("Hours", "00Na0000009qBfa")
FieldList.Add Array("Typical Schedule", "00Na000000B2Lky")
FieldList.Add Array("Additional Hours Details", "00Na000000B2Lke")
FieldList.Add Array("Days Before Work", "00Na000000B2Lka")
FieldList.Add Array("Supplies Required", "00Na000000B2Lku")
FieldList.Add Array("Special Notes", "00Na0000009qot1")
FieldList.Add Array("Second Job Allowed", "00Na000000B2Lkr")
FieldList.Add Array("Company Provided Housing", "00Na000000B2Lky")
FieldList.Add Array("Skills Required", "00N30000008RCsM")
FieldList.Add Array("Requires Interview", "00Na000000B2O6V")
FieldList.Add Array("Matches", "_00N30000008REJy")
FieldList.Add Array("Supervisor", "CF00Na0000009qBfb")
FieldList.Add Array("Countries of Interest", "00N30000009pgoC")
FieldList.Add Array("Gender Preference", "00Na000000B2Kha")

PosSet = Retrieve_Page_Info(PositionID, FieldList)
If PageInfoF(PosSet, "Tipped Position")(0) <> "Yes" Then
    PosSet = PageInfo_RR(PosSet, "Tipped Position", Array("No", "00Na000000B2Lkv"))
End If


    '## Match Fields
    Set FieldList = New Collection
        FieldList.Add Array("Engagement", "CF00Na0000009s14h")
        FieldList.Add Array("Service Level", "00Na000000B2xTf")
        FieldList.Add Array("Position Name", "CF00N30000008REJy")
        FieldList.Add Array("Match Name", "Name")
        FieldList.Add Array("Offer Status", "00Na000000B2SUq")
        FieldList.Add Array("Sent to", "00N1B00000BLz5K")
        FieldList.Add Array("Reason Detail Other", "00N1300000BLZQq")
        FieldList.Add Array("JO Rejection Reason", "00N1B00000BLz5J")
        FieldList.Add Array("Match Date", "00N30000008RERs")
        FieldList.Add Array("Reason", "00Na000000B2Zh4")
        FieldList.Add Array("Reason Detail Other", "00N1300000BLZQq")
        FieldList.Add Array("Start Date", "00Na0000009qRci")
        FieldList.Add Array("End Date", "00Na0000009qRcs")
        FieldList.Add Array("Stage", "00N30000008RERi")
        FieldList.Add Array("Notifications", "_00Na0000009s14r")
        FieldList.Add Array("DocuSign Status", "_00Na000000B30fn")
    '## Engagement Fields
    Set Field2List = New Collection
        Field2List.Add Array("Engagement Start", "00Na0000009s14D")
        Field2List.Add Array("Engagement End", "00Na0000009s14C")
        Field2List.Add Array("Intrax ID", "00Na000000B2kL8")
        Field2List.Add Array("Status", "00Na0000009s14S")
        Field2List.Add Array("Gender", "00Na000000B2Kgi")
        Field2List.Add Array("Age", "00Na000000B2KgT")
        Field2List.Add Array("Account", "CF00Na0000009s148")
        Field2List.Add Array("Partner", "CF00Na000000B2Kgy")
        Field2List.Add Array("Service Level", "00Na000000B2tGX")
        Field2List.Add Array("Visa Date", "00N1300000BQyfr")
        Field2List.Add Array("Visa Status", "00N1300000BQyfs")

Set GoodMatches = New Collection
MatchList = PageInfoF(PosSet, "Matches")
If IsArray(MatchList) Then
If IsArray(MatchList(0)) Then
If UBound(MatchList(0)) > 1 Then

If UBound(MatchList) > 38 Then
    'If there's more than 40 matches, they wouldn't be displayed.  This calls a full sized match list.
    Debug.Print "Oversized Match List Found!!"
    Dim FullMatchList As New Collection
    MatchList = Convert_CollectionTable2DataModel(Pull_Master_Child((PosSet(1)), "CF00N30000008REJy", "a0R"))
    'Call Print_L2_HTML(Array("Master Match List", "ID", MatchList))
End If
    For i = 0 To UBound(MatchList)
        If PageInfoF(MatchList(i), "Stage")(0) <> "Withdrawn" And MatchList(i)(1) <> "a0R1B00000Npypt" Then
            MatchSet = Retrieve_Page_Info((MatchList(i)(1)), FieldList)
            'Call Print_L2_HTML(MatchSet)
            If HC_Roster_IsValidMatch(MatchSet) Then
                EngSet = Retrieve_Page_Info((PageInfoF(MatchSet, "Engagement")(1)), Field2List)
                    Partner = PageInfoF(EngSet, "Partner")(0)
                    'Debug.Print "Partner Name is: " & Partner
                        For j = 1 To UBound(PartnerTable)
                        'Debug.Print "CHecking name: " & PartnerTable(j, 1)
                            If Partner = PartnerTable(j, 1) Then
                                Country = PartnerTable(j, 5)
                                j = 999
                            End If
                        Next j
                    EngSet = PageInfo_RR(EngSet, "Country", Array(Country, ""))
                    'HC_Roster_DefineMatch( simplify docusign status
                MatchSet = PageInfo_RR(MatchSet, "Engagement", EngSet)
                'Call Print_L2_HTML(MatchSet)
                MatchSet = HC_Roster_Position_Add_Docusign(MatchSet)
                GoodMatches.Add MatchSet
            Else
                Debug.Print "!!!!!Match Failed!!!!!!"
            End If
        End If
    Next i
End If
End If
End If

    Debug.Print "Sending " & GoodMatches.count & " good matches."
    If GoodMatches.count > 0 Then
        MatchList = CollectionConverter(GoodMatches)
        HasMatches = True
    Else
        MatchList = Array("No Valid Matches", "No Valid Matches", "No Valid Matches")
        Debug.Print "No valid matches"
        HasMatches = False
    End If


PosSet = PageInfo_RR(PosSet, "Matches", MatchList)
PosSet = PageInfo_RR(PosSet, "Has Matches?", Array(HasMatches, ""))

'Call Print_L2_HTML(PosSet)

HC_Roster_Position = PosSet
End Function
Private Function HC_Roster_IsValidMatch(MatchSet As Variant) As Boolean
Dim Stage As String

Stage = PageInfoF(MatchSet, "Stage")(0)

If Stage = "Applied" Or Stage = "Confirmed" Or Stage = "Completed" Or Stage = "Ended Early" Then
    HC_Roster_IsValidMatch = True
Else
    HC_Roster_IsValidMatch = False
End If
End Function
Private Function HC_Roster_Position_Add_Docusign(Match As Variant, Optional IsManager As Boolean = True) As Variant
Dim nList As Variant
Dim ListOfGoodDocusigns As New Collection
Dim FieldList As New Collection
Dim Docusign As Variant
Dim HasDocusign As Boolean

HasDocusign = False
nList = PageInfoF(Match, "DocuSign Status")
If IsArray(nList) Then
If IsArray(nList(0)) Then
If UBound(nList(0)(2)) > 1 Then
    For i = 0 To UBound(nList)
        Debug.Print "Signing document name = " & PageInfoF(nList(i), "Signing Document Name")(0)
        If PageInfoF(nList(i), "Signing Document Name")(0) = "Work Travel IP Job Placement" Then
            ListOfGoodDocusigns.Add nList(i)
        End If
    Next i
End If
End If
End If

Debug.Print "Found " & ListOfGoodDocusigns.count & "Valid Docusigns"
If ListOfGoodDocusigns.count > 0 Then
    FieldList.Add Array("Envelope Status", "00Na0000009qOUE_ileinner")
    FieldList.Add Array("DocuSign Envelope ID", "00Na0000009qOUC_ileinner")
    FieldList.Add Array("DocuSign Recipient Status", "_00Na0000009qORq")
    
    Docusign = Retrieve_Page_Info((ListOfGoodDocusigns(1)(1)), FieldList)
    
    If IsArray(PageInfoF(Docusign, "DocuSign Recipient Status")) Then
    If UBound(PageInfoF(Docusign, "DocuSign Recipient Status")) = 1 Then
        Match = PageInfo_RR(Match, "Docusign", Docusign)
        Match = PageInfo_RR(Match, "Docusign Link", Array(HC_Roster_DocusignLink(Match, IsManager), ""))
        HasDocusign = True
    End If
    Else
        Debug.Print "Docusign missing recipients"
    End If
    
    If HasDocusign = False Then
        Debug.Print "didn 't find 2 signers"
    End If
    
End If

Match = PageInfo_RR(Match, "Has Docusign?", Array(HasDocusign, ""))

HC_Roster_Position_Add_Docusign = HC_Roster_DefineMatch(Match)
End Function
Private Function HC_Roster_DocusignLink(MatchPackage As Variant, Signee As Boolean) As String
Dim Manager As Variant
Dim PAX As Variant
Dim Link As New Collection
Dim Envelope As Variant
Dim Signers As Variant

Envelope = PageInfoF(MatchPackage, "Docusign")
'Print_L2_HTML (Envelope)
If Signee Then
    Link.Add "https://intraxinc.secure.force.com/intraxappengine/WT_IP_Job_Agreement?mid=" & MatchPackage(1)
    Link.Add "&uType=HC&envelopeId=" & PageInfoF(Envelope, "DocuSign Envelope ID")(0)
Else
    Link.Add "WT_IP_Job_Agreement?mid=" & MatchPackage(1)
    Link.Add "&uType=Participant&envelopeId=" & PageInfoF(Envelope, "DocuSign Envelope ID")(0)
End If

Signers = PageInfoF(Envelope, "DocuSign Recipient Status")
    For i = 0 To UBound(Signers)
        If PageInfoF(Signers(i), "DocuSign Routing Order")(0) = 1 Then
            Manager = Signers(i)
            Debug.Print "Valid Manager Found"
        End If
        If PageInfoF(Signers(i), "DocuSign Routing Order")(0) = 2 Then
            PAX = Signers(i)
        End If
    Next i
    
If Signee Then
    Link.Add "&Name=" & Clean_Text4URL((Manager(0)))
    Link.Add "&Email=" & Clean_Text4URL((PageInfoF(Manager, "DocuSign Recipient Email")(0)))
Else
    Link.Add "&Name=" & Clean_Text4URL((PAX(0)))
    Link.Add "&Email=" & Clean_Text4URL((PageInfoF(PAX, "DocuSign Recipient Email")(0)))
End If

HC_Roster_DocusignLink = Collection2String(Link)
End Function
Private Function HC_Roster_DefineMatch(MatchSet As Variant) As Variant
Dim Stage As String
Dim OfferStatus As String
Dim Docusigned As Boolean
Dim Docusign As Variant
Dim MatchDefinition As Variant

MatchDefinition = Array("", "")

Stage = PageInfoF(MatchSet, "Stage")(0)
OfferStatus = PageInfoF(MatchSet, "Offer Status")(0)
Docusigned = PageInfoF(MatchSet, "Has Docusign?")(0)

If Docusigned Then
    Docusign = PageInfoF(MatchSet, "Docusign")
End If

If Stage = "Confirmed" Then
    MatchDefinition(0) = "Confirmed"
        If Docusigned Then
            MatchDefinition(1) = "DocuSign"
        Else
            MatchDefinition(1) = ""
        End If
End If

If Stage = "Completed" Or Stage = "Ended Early" Then
    MatchDefinition(0) = "Ended"
        If Docusigned Then
            MatchDefinition(1) = "DocuSign"
        Else
            MatchDefinition(1) = ""
        End If
End If

If Stage = "Applied" Then
    If OfferStatus = "Sent IP JO" Or OfferStatus = "HC Review" Then
        MatchDefinition(0) = "Please Sign"
        MatchDefinition(1) = "DocuSign"
    End If
    
    If OfferStatus = "IP Offered" Then
        MatchDefinition(0) = "Pending"
        MatchDefinition(1) = "DocuSign"
    End If
    
    If OfferStatus = "HC Rejected" Then
        MatchDefinition(0) = "Awaiting Re-Issue"
        MatchDefinition(1) = "DocuSign"
    End If
    
    If OfferStatus = "" Then
        MatchDefinition(0) = ""
        MatchDefinition(1) = ""
    End If
    
    If OfferStatus = "Offered" Then
        MatchDefinition(0) = "Pending"
        MatchDefinition(1) = "Paper"
    End If
End If

MatchSet = PageInfo_RR(MatchSet, "Definition", MatchDefinition)

HC_Roster_DefineMatch = MatchSet
End Function
Private Function HC_Roster_Print_PAX_Table(EmployerSet As Variant, Optional Flavor As String = "Welcome") As String
Dim HTML As New Collection
Dim FinalCode As String
Dim PositionList As Variant
Dim MatchList As Variant
Dim RowCounter As Double

HTML.Add "<table style=""max: 600px;"">"
HTML.Add "<tr><th>"
HTML.Add "<a href=""https://na68.salesforce.com/" & EmployerSet(1) & """><span style=""color: #6E8B2A;font-size: 135%;"">" & PageInfoF(EmployerSet, "Account Name")(0) & "</span></a>"
HTML.Add "</th></tr>"
If PageInfoF(EmployerSet, "Has Positions?")(0) = "True" Then
    PositionList = PageInfoF(EmployerSet, "Positions")
        For p = 0 To UBound(PositionList)
            HTML.Add "<tr><th style=""color: #801830;font-weight: bold;font-size: 120%;"">"
            HTML.Add "-=  "
            HTML.Add "<a href=""https://na68.salesforce.com/" & PositionList(p)(1) & """>" & PageInfoF(PositionList(p), "Title")(0) & "</a>"
            HTML.Add " - " & Replace(PageInfoF(PositionList(p), "Pay Rate")(0), "USD", "$")
            HTML.Add " | Tipped: " & PageInfoF(PositionList(p), "Tipped Position")(0)
            HTML.Add " | Avg Hrs per Week: " & PageInfoF(PositionList(p), "Hours")(0)
            HTML.Add " | " & PageInfoF(PositionList(p), "PC Code")(0)
            HTML.Add "  =-"
            HTML.Add "</th></tr><tr style=border: 1px solid #6E8B2A;><td>"
            'HTML.Add "<table border=""1"">"
            'HTML.Add "<tr><td><table cellpadding=""20""><tr><th>Title:</th><th>" & PageInfoF(PositionList(p), "Title")(0) & "</th><th>Payrate:</th><th>" & Replace(PageInfoF(PositionList(p), "Pay Rate")(0), "USD", "$") & "</th><th>Tipped:</th><th>" & PageInfoF(PositionList(p), "Tipped Position")(0) & "</th></tr>"
            'HTML.Add "<tr><th>Description</th><th>" & PageInfoF(PositionList(p), "Description")(0) & "</th><th>Supplies Required:</th><th>" & PageInfoF(PositionList(p), "Supplies Required")(0) & "</th></tr>"
            'HTML.Add "</table></td></tr>"
            'HTML.Add "<tr><td>"
'This starts the PAX list mini table
        If PageInfoF(PositionList(p), "Has Matches?")(0) = "True" Then
                HTML.Add "<table cellpadding=""7"" style=""background-color: #ebf3d8;"">"
                HTML.Add "<tr style=""color: #801830;"">"
                HTML.Add "<th>Name</th><th>Intrax&nbsp;ID&nbsp;</th><th>Gender</th><th>Country</th><th>ETA</th><th>Visa End</th>"
            If Flavor = "Docusign" Then
                HTML.Add "<th>Visa Date</th><th>Visa Status</th><th>Match Status</th>"
            End If
                HTML.Add "</tr>"
                RowCounter = 1
                    MatchList = PageInfoF(PositionList(p), "Matches")
                    For m = 0 To UBound(MatchList)
                        If RowCounter Mod 2 = 1 Then
                        HTML.Add "<tr style=""background-color: #e5e6e6;"">"
                        Else
                        HTML.Add "<tr>"
                        End If
                        HTML.Add "<td><a href=""https://na68.salesforce.com/" & PageInfoF(MatchList(m), "Engagement")(1) & """>" & WorksheetFunction.Proper((PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Account")(0))) & "</a></td>"
                        HTML.Add "<td>" & PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Intrax ID")(0) & "</td>"
                        HTML.Add "<td>" & left((PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Gender")(0)), 1) & " / " & PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Age")(0) & "</td>"
                        HTML.Add "<td>" & PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Country")(0) & "</td>"
                        HTML.Add "<td>" & PageInfoF(MatchList(m), "Start Date")(0) & "</td>"
                        HTML.Add "<td>" & PageInfoF(MatchList(m), "End Date")(0) & "</td>"
                        'HTML.Add "<td>" & PageInfoF(MatchList(m), "Offer Status")(0) & "</td>"
            If Flavor = "Docusign" Then
                        HTML.Add "<td>" & PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Visa Date")(0) & "</td>"
                        HTML.Add "<td>" & PageInfoF(PageInfoF(MatchList(m), "Engagement"), "Visa Status")(0) & "</td>"
                        HTML.Add "<th>"
                            If PageInfoF(MatchList(m), "Has Docusign?")(0) = "True" Then
                                HTML.Add "<a href="""
                                HTML.Add PageInfoF(MatchList(m), "Docusign Link")(0)
                                HTML.Add """>"
                                FinalCode = PageInfoF(MatchList(m), "Definition")(0)
                                    If FinalCode = "Please Sign" Then
                                        HTML.Add "<span style=""background-color: yellow;"">Please Sign HERE</span>"
                                    Else
                                        HTML.Add FinalCode
                                    End If
                                HTML.Add "</a>"
                            Else
                                HTML.Add PageInfoF(MatchList(m), "Definition")(0)
                            End If
                        HTML.Add "</th>"
            End If
                        HTML.Add "</tr>"
                        RowCounter = RowCounter + 1
                    Next m
                
                HTML.Add "</table></td></tr>"
        End If
            HTML.Add "<tr><td>&nbsp;</td></tr>"
        Next p
End If
HTML.Add "</table>"
    
    
FinalCode = ""
For i = 1 To HTML.count
FinalCode = FinalCode + HTML(i)
Next i

HC_Roster_Print_PAX_Table = FinalCode
End Function
Private Function HC_Roster_Print_Table(TableTitle As String, TableHeaders As Variant, TablePackage As Variant) As String
Dim HTML As New Collection
Dim FinalCode As String
Dim PositionList As Variant
Dim PAXList As Variant

Dim RowCounter As Double


HTML.Add "<table cellpadding=""7"" style=""background-color: #ebf3d8;"" width=""600px"">"
HTML.Add "<tr><th "
HTML.Add "colspan=""" & UBound(TableHeaders) + 1 & """ "
HTML.Add " style=""color: #801830;font-weight: bold;font-size: 120%;"">"
'TITLE
    HTML.Add TableTitle
    HTML.Add "</th></tr>"
'ITIRATE OVER TABLE HEADERS
    HTML.Add "<tr style=""color: #801830;"">"
        For i = 0 To UBound(TableHeaders)
            HTML.Add "<th>" & TableHeaders(i) & "</th>"
        Next i
    HTML.Add "</tr>"
    RowCounter = 1
        For m = 0 To UBound(TablePackage)
            If RowCounter Mod 2 = 1 Then 'every other row will appear gray
                HTML.Add "<tr style=""background-color: #e5e6e6;"">"
            Else
                HTML.Add "<tr>"
            End If
            
            For s = 0 To UBound(TableHeaders)
                HTML.Add "<td>" & TablePackage(m)(s) & "</td>"
            Next s
            
            HTML.Add "</tr>"
            RowCounter = RowCounter + 1
        Next m
    
HTML.Add "</table>"
    
FinalCode = ""
For i = 1 To HTML.count
FinalCode = FinalCode + HTML(i)
Next i

HC_Roster_Print_Table = FinalCode
End Function
Private Function HC_Roster_Convert2Table(EmployerSet As Variant) As Variant
Dim PositionList As Variant
Dim MatchList As Variant
Dim HTML As New Collection
Dim tText As String
Dim PAX As Collection
Dim Matches As Collection
Dim PAXList As New Collection

HTML.Add "<table width=""600px"">"
HTML.Add "<tr><th>"
HTML.Add "<a href=""https://na68.salesforce.com/" & EmployerSet(1) & """><span style=""color: #6E8B2A;font-size: 135%;"">" & PageInfoF(EmployerSet, "Account Name")(0) & "</span></a>"
HTML.Add "</th></tr>"

PositionList = PageInfoF(EmployerSet, "Positions")
For p = 0 To UBound(PositionList)
    If PageInfoF(PositionList(p), "Has Matches?")(0) = "True" Then
        MatchList = PageInfoF(PositionList(p), "Matches")
        Set Matches = New Collection
        For m = 0 To UBound(MatchList)
                Set PAX = New Collection
                PAXList.Add MatchList(m)
                PAX.Add WorksheetFunction.Proper((PageInfoS(MatchList(m), "Engagement.Account")(0)))
                PAX.Add AnchorMaker(Array(PageInfoS(MatchList(m), "Engagement.Intrax ID")(0), MatchList(m)(1)))
                PAX.Add left((PageInfoS(MatchList(m), "Engagement.Gender")(0)), 1) & " / " & PageInfoS(MatchList(m), "Engagement.Age")(0)
                PAX.Add PageInfoS(MatchList(m), "Engagement.Country")(0)
                PAX.Add PageInfoF(MatchList(m), "End Date")(0)
                    If PageInfoF(MatchList(m), "Has Docusign?")(0) = "True" Then
                        tText = "<a href=""" & PageInfoF(MatchList(m), "Docusign Link")(0) & """>"
                        If PageInfoF(MatchList(m), "Definition")(0) = "Please Sign" Then
                            tText = tText & "<span style=""background-color: yellow;"">Please Sign HERE</span>"
                        Else
                            tText = tText & PageInfoF(MatchList(m), "Definition")(0)
                        End If
                        PAX.Add tText & "</a>"
                    Else
                        PAX.Add PageInfoF(MatchList(m), "Definition")(0)
                    End If
            Matches.Add CollectionConverter(PAX)
        Next m
        
        tText = "-=&nbsp;<a href=""https://na68.salesforce.com/" & PositionList(p)(1) & """>" & PageInfoF(PositionList(p), "Title")(0) & "</a>&nbsp;=-<br/>"
        tText = tText & Replace(PageInfoF(PositionList(p), "Pay Rate")(0), "USD ", "$") & " | Tipped: " & PageInfoF(PositionList(p), "Tipped Position")(0) & " | Avg Hrs per Week: " & PageInfoF(PositionList(p), "Hours")(0) & " | " & PageInfoF(PositionList(p), "PC Code")(0)
        
        tText = HC_Roster_Print_Table(tText, Array("Name", "&nbsp;Intrax&nbsp;ID&nbsp;", "Gender", "Country", "Visa End", "Match Status"), CollectionConverter(Matches))
        HTML.Add "<tr><td>" & tText & "</td></tr><tr><td>&nbsp;</td></tr>"
    End If
Next p

HTML.Add "</table>"

tText = ""
For p = 1 To HTML.count
    tText = tText & HTML(p)
Next p

EmployerSet = PageInfo_RR(EmployerSet, "Full PAX List", CollectionConverter(PAXList))
EmployerSet = PageInfo_RR(EmployerSet, "Roster Table", tText)
HC_Roster_Convert2Table = EmployerSet
End Function
Private Function HC_Roster_PremiumRepeaterParty(EmployerSet As Variant) As Variant
Dim PositionList As Variant
Dim MatchList As Variant
Dim HTML As New Collection
Dim tText As String
Dim PAX As Collection
Dim Matches As Collection
Dim PAXList As New Collection

HTML.Add "<table width=""600px"">"
HTML.Add "<tr><th>"
HTML.Add "<a href=""https://na68.salesforce.com/" & EmployerSet(1) & """><span style=""color: #6E8B2A;font-size: 135%;"">" & PageInfoF(EmployerSet, "Account Name")(0) & "</span></a>"
HTML.Add "</th></tr>"

PositionList = PageInfoF(EmployerSet, "Positions")
Set Matches = New Collection
For p = 0 To UBound(PositionList)
    If PageInfoF(PositionList(p), "Has Matches?")(0) = "True" Then
        MatchList = PageInfoF(PositionList(p), "Matches")
        
        For m = 0 To UBound(MatchList)
                Set PAX = New Collection
                PAXList.Add MatchList(m)
                PAX.Add AnchorMaker(Array(PageInfoS(MatchList(m), "Engagement.Intrax ID")(0), MatchList(m)(1)))
                PAX.Add WorksheetFunction.Proper((PageInfoS(MatchList(m), "Engagement.Account")(0)))
                
                PAX.Add PageInfoS(MatchList(m), "Engagement.Country")(0)
                PAX.Add PageInfoF(PositionList(p), "Title")(0)
                PAX.Add "&nbsp;Yellow"
                PAX.Add "&nbsp;Yellow"
                PAX.Add "&nbsp;Yellow"
                PAX.Add "&nbsp;Yellow"
                PAX.Add "&nbsp;Yellow"
            Matches.Add CollectionConverter(PAX)
        Next m
    End If
Next p

HTML.Add Replace(HC_Roster_Print_Table("2018 Summer Exchange Visitor List", Array("&nbsp;Intrax&nbsp;ID&nbsp;", "Name", "Country", "Job Title", "Invited back for 2019 Y/N", "2019 Title", "2019 Payrate", "2019 Start Date", "2019 End Date"), CollectionConverter(Matches)), "<td>&nbsp;Yellow</td>", "<td style=""background-color: #ffff66"">&nbsp;</td>", 1, , vbTextCompare)
HTML.Add "</table>"

tText = Collection2String(HTML)

EmployerSet = PageInfo_RR(EmployerSet, "Full PAX List", CollectionConverter(PAXList))
EmployerSet = PageInfo_RR(EmployerSet, "Roster Table", tText)
HC_Roster_PremiumRepeaterParty = EmployerSet
End Function
Private Sub HC_Roster_Recruitment(ByRef EmployerSet As Variant)
Dim PositionList As Variant
Dim MatchList As Variant
Dim HTML As New Collection
Dim tText As String
Dim PAX As Collection
Dim pTable As New Collection
Dim cPos As Collection


PositionList = PageInfoF(EmployerSet, "Positions")
Set Matches = New Collection
For p = 0 To UBound(PositionList)
    Set cPos = New Collection
        cPos.Add PageInfoF(PositionList(p), "Title")(0)
        cPos.Add AnchorMaker(Array(PageInfoF(PositionList(p), "PC Code")(0), PositionList(p)(1)))
        cPos.Add PageInfoF(PositionList(p), "Pay Rate")(0)
        cPos.Add PageInfoF(PositionList(p), "Tipped Position")(0)
        cPos.Add PageInfoF(PositionList(p), "Description")(0)
        cPos.Add PageInfoF(PositionList(p), "Gender Preference")(0)
        cPos.Add PageInfoF(PositionList(p), "Countries of Interest")(0)
        cPos.Add PageInfoF(PositionList(p), "Positions Sold")(0)
        
        pTable.Add CollectionConverter(cPos)
Next p

tText = HC_Roster_Print_Table("2019 Position List", Array("Title", "JDD", "Pay Rate", "Tipped?", "Description Changes Needed", "Gender Pref", "Countries of Interest", "# of Students needed"), CollectionConverter(pTable))

EmployerSet = PageInfo_RR(EmployerSet, "Roster Table", tText)

End Sub

Private Function MakeALink(Field As Variant) As String

MakeALink = "<a href=""https://na68.salesforce.com/" & Field(1) & """><span>" & Field(0) & "</span></a>"

End Function
Sub HC_Roster_Emailer(OppID As String, Recipient As String, Email As String, Optional Template As String = "Welcome Demo")
Dim FinalTable As String
Dim PAX As Variant
Dim Fields As New Collection
Dim Employer As Variant
Dim TempVar As Variant
Dim EmailTemplate As String
Dim PAXFlavor As String

Employer = HC_Roster_Builder(OppID)

FinalTable = ""
    If UCase(Template) = "CHECKINS" Then
        EmailTemplate = "00X1B000002GKvM"
        FinalTable = HC_Roster_Print_Table((Employer(0)), Array(Array("Name", "Student"), Array("Intrax ID", "Intrax ID"), Array("Contact Status", "Monthly Contact")), HC_Roster_CheckInBuilder(Employer))
    End If
    
    If UCase(Template) = "PREMIUM REPEATERS CLUB" Or UCase(Template) = "PREMIUM REPEATER CLUB" Then
        EmailTemplate = "00X1B000001s5Bi"
        Employer = HC_Roster_PremiumRepeaterParty(Employer)
        FinalTable = PageInfoF(Employer, "Roster Table")(0)
        Debug.Print "awknoledge repeater party"
        Debug.Print FinalTable
    End If
    
    If UCase(Template) = "WELCOME DEMO" Then
        EmailTemplate = "00X1B000001qZy5"
        PAXFlavor = "Docusign"
    End If
    
    If UCase(Template) = "DOCUSIGN RECALL" Then
        'EmailTemplate = "00X1B000002GKvM"
        EmailTemplate = "00X1B000002GMtZ"
        Employer = HC_Roster_Convert2Table(Employer)
        FinalTable = PageInfoF(Employer, "Roster Table")(0)
    End If
    
    If UCase(Template) = "DOCUSIGN BLAST" Then
        EmailTemplate = "00X1B000002GMtZ"
        Employer = HC_Roster_Convert2Table(Employer)
        
        FinalTable = PageInfoF(Employer, "Roster Table")(0)
        
        Call HC_Roster_EmailEveryPAX(Employer)
    End If
    
    If UCase(Template) = "WELCOME EMAIL" Then
        EmailTemplate = "00X1B000001qZy5"
        PAXFlavor = "Welcome"
    End If
    
If FinalTable = "" Then
    Employer = PageInfo_RR(Employer, "Roster Table", HC_Roster_Print_PAX_Table(Employer, PAXFlavor))
    FinalTable = PageInfoF(Employer, "Roster Table")(0)
End If

PAX = PAXbasicInfo("", "", "", 4)
Debug.Print "!!!!! Finished Settig Up PAX !!!!!"
PAX = AddTemplate(PAX, FetchEmailTemplate(EmailTemplate))
PAX(1, 1) = Email
PAX(20, 1) = "Recipient"
    If UCase(Template) = "WELCOME EMAIL" Or UCase(Template) = "DOCUSIGN BLAST" Then
        PAX(20, 2) = PageInfoF(Employer, "Operations Contact")(1)
    Else
        PAX(20, 2) = Recipient
    End If
PAX(41, 0) = "PAXTable"
PAX(41, 1) = FinalTable
TempVar = PageInfoF(Employer, "Operations Contact")
PAX(32, 1) = TempVar(0)
'PAX(32, 2) = "0031B00002YMspw"
PAX(32, 2) = PageInfoF(TempVar, "Email")(0)
PAX(39, 2) = "0011300001jIqoK"
PAX(29, 1) = PageInfoF(Employer, "Account Name")(0)
PAX(29, 2) = PageInfoF(Employer, "Account Name")(1)
PAX(43, 1) = ParseHCName((PageInfoF(Employer, "Account Name")(0)), 34)
PAX(26, 1) = PageInfoF(Employer, "Street")(0) & ", " & PageInfoF(Employer, "City")(0) & ", " & PageInfoF(Employer, "State")(0)
PAX(26, 2) = PageInfoF(Employer, "State")(0)
PAX(21, 0) = "EIN"
PAX(21, 1) = PageInfoF(PageInfoF(Employer, "Account Name"), "EIN")(0)
PAX(14, 0) = "Community"
PAX(14, 1) = PageInfoF(PageInfoF(Employer, "Account Name"), "SIC Code")(0)
PAX(14, 2) = HC_Roster_Community((PAX(14, 1)))


Debug.Print PageInfoF(Employer, "Fieldstaff")(0)
PAX(28, 1) = PageInfoF(Employer, "Fieldstaff")(0)
Debug.Print PageInfoF(Employer, "Fieldstaff")(1)
PAX(28, 2) = PageInfoF(Employer, "Fieldstaff")(1)
'PAX(21, 1) = FinalTable

Call Send_HTMLEmail(PAX, "iwtsupport", Fields)

Debug.Print FinalTable

'FinalTable = HC_Roster_Builder("0061B00001VA4VJ")
End Sub
Private Function HC_Roster_CheckInBuilder(HCPackage As Variant) As Variant
Dim PositionList As Variant
Dim PAXList As New Collection
Dim CurrentPAX As Variant
Dim Assessments As Variant
Dim TempHolder As Variant
Dim MCstatus As String

PositionList = PageInfoF(HCPackage, "Positions")
For i = 0 To UBound(PositionList)
Call Print_L2_HTML(PositionList(i))
    If IsArray(PositionList) Then
        For j = 0 To UBound(PageInfoF(PositionList(i), "Matches"))
            CurrentPAX = PositionList(i)(j)
            Debug.Print "Currently assessing " & CurrentPAX(1)
                Assessments = PageInfoF(CurrentPAX, "Assessments")
                For k = 0 To UBound(Assessments)
                    If PageInfoF(Assessments(k), "Record Type")(0) = "WT PT Monthly Contact" Then
                        MCstatus = PageInfoF(Assessments(k), "Status")(0)
                        If MCstatus = "Not Yet Started" Or MCstatus = "Incomplete" Then
                            CurrentPAX = PageInfo_RR(CurrentPAX, "Monthly Contact", Array(MCstatus, Assessments(k)(1)))
                            CurrentPAX = PageInfo_RR(CurrentPAX, "Student", Array(PageInfoF(CurrentPAX, "Account Name")(0), CurrentPAX(1)))
                            PAXList.Add CurrentPAX
                        End If
                        k = 100
                    End If
                Next k
        Next j
    End If
Next i

Debug.Print "Completed rebuilding the roster"
HC_Roster_CheckInBuilder = CollectionConverter(PAXList)
End Function
Private Sub HC_Roster_Request_Proccessing(ActivityID As String)
Dim IE As Object
Dim FindEmail As Object
Dim Email As String
Dim OpportunityID As String
Dim StartTime As Date
Dim Subject As String

StartTime = Now()

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ActivityID)
OpportunityID = FetchField(IE, "tsk3_ileinner")(1)
Subject = FetchField(IE, "tsk5_ileinner")(0)

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & FetchField(IE, "tsk1_ileinner")(1))
    Set FindEmail = IE.document.getelementsbyclassname("profileSectionData emailAddr")
    Email = FindEmail(0).getelementsbytagname("a")(0).innerhtml
If left(OpportunityID, 3) = "006" Then
    Call HC_Roster_Emailer(OpportunityID, "0031B00002bteMh", Email, Subject)
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ActivityID & "/e?tsk5=Email Composed and Sent - " & LCase(Subject) & " || " & Format(Now() - StartTime, "nn:ss"))
    Call HitSave(IE)
Else
    Dim Reject As New Collection
    Dim RejectionTemplate As Variant
    Reject.Add "Dear " & Email
    Reject.Add ",<br><br>You requested a HC Roster email using the HC account page instead of on a HC opportunity.  Please move your request to a HC Opp.<br/><br/>"
    Reject.Add "<a href=""https://na68.salesforce.com/" & ActivityID & "/e?retURL=" & ActivityID & """>Request for - " & Subject & "</a>"
    Reject.Add "<br/><br/>Thank you,<br/>Andrew"
    RejectionTemplate = Emailv3c("Invalid HC Roster Request - HC Account Page", Collection2String(Reject), "0031B00002bteMh", "5001B000016NDrA")
    RejectionTemplate(2) = PageInfo_RR(RejectionTemplate(2), "CC", Array(Email, ""))
    Call Emailv3Sender(Array("Engagement", "", Array(RejectionTemplate)), , False)
End If

Call opNAV(IE, "quit", "")
End Sub

Private Sub HC_Roster_BlastReminder(OpportunityID As String, Optional RepeatEvery As Double = 3.5)
Dim IE As Object
Dim FindEmail As Object
Dim Email As String
Dim StartTime As Date
Dim Subject As String
Dim Opp As Variant
Dim FieldList As New Collection
Dim Activities As Variant
Dim LastSend As Double
Dim NumberofDays As Double

If left(OpportunityID, 3) <> "006" Or OpportunityID = "0061B00001QrelN" Then
    Debug.Print "Not a valid Opp to process"
Else
    
    StartTime = Now()
    
    FieldList.Add Array("Blast", "00N30000007CCDo_ileinner")
    FieldList.Add Array("End Date", "00N30000007CHaT")
    FieldList.Add Array("Activity History", "_RelatedHistoryList")
    
    Opp = Retrieve_Page_Info(OpportunityID, FieldList)
    
    
    LastSend = 99
    Activities = PageInfoF(Opp, "Activity History")
    
    If IsArray(Activities) Then
        For i = 0 To UBound(Activities)
            If InStr(1, (PageInfoF(Activities(i), "Subject")(0)), "Docusign", vbTextCompare) > 0 Then
            NumberofDays = Now() - CDate(PageInfoF(Activities(i), "Last Modified Date/Time")(0))
                Debug.Print "It's been " & NumberofDays & " days since docusigns links were sent"
                If NumberofDays < LastSend Then
                    LastSend = NumberofDays
                End If
            End If
        Next i
    End If
    
    If LastSend > RepeatEvery Then
        Call HC_Roster_Emailer(OpportunityID, "0031B00002bteMh", "amey@intraxinc.com", "DOCUSIGN BLAST")
        
        Set FieldList = New Collection
            FieldList.Add Array("00N30000007CCDo", "Sent: " & Format(Now(), "mm/dd/yyyy"))
            FieldList.Add Array("00N30000007CHaT", Format(Now(), "mm/dd/yyyy"))
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & OpportunityID & "/e")
        Call PushUpdates2Page(IE, FieldList)
        
    
        Call opNAV(IE, "nav", Replace("https://na68.salesforce.com/00T/e?title=Call&what_id=<ID>&followup=0&retURL=%2F<ID>&RecordType=01230000000seeI&ent=Task&tsk10=Email", "<ID>", OpportunityID, , , vbTextCompare))
        Set FieldList = New Collection
            FieldList.Add Array("tsk6", "Created by stale DocuSign followup campaign on " & Format(Now(), "m/d/yyyy at hh:nn AM"))
            FieldList.Add Array("tsk5", "Email Composed and Sent - DocuSign Blast || " & Format(Now() - StartTime, "nn:ss"))
        Call PushUpdates2Page(IE, FieldList)
        
        Call opNAV(IE, "quit")
    End If
    
    If False Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & OpportunityID)
        OppTagInfo = FetchField(IE, "00N30000007CCDo_ileinner")
        Subject = FetchField(IE, "tsk5_ileinner")(0)
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & FetchField(IE, "tsk1_ileinner")(1))
            Set FindEmail = IE.document.getelementsbyclassname("profileSectionData emailAddr")
            Email = FindEmail(0).getelementsbytagname("a")(0).innerhtml
        
        Call HC_Roster_Emailer(OpportunityID, "0031B00002bteMh", Email, Subject)
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & ActivityID & "/e?tsk5=Email Composed and Sent - " & LCase(Subject) & " || " & Format(Now() - StartTime, "nn:ss"))
        Call HitSave(IE)
        
        Call opNAV(IE, "quit", "")
    End If
End If

End Sub
Private Sub HC_Roster_EmailEveryPAX(RosterPackage As Variant)
Dim CurrentPAX As Variant
Dim eTemplate_ManagerSig As Variant
Dim eTemplate_PAXSig As Variant
Dim PAXList As Variant
Dim FieldList As New Collection

PAXList = PageInfoF(RosterPackage, "Full PAX List")
eTemplate_ManagerSig = FetchEmailTemplate("00X1B000002GN1n")
eTemplate_PAXSig = FetchEmailTemplate("00X1B000002GN1i")

Debug.Print "There are " & UBound(PAXList) + 1 & " PAX at this HC"
For i = 0 To UBound(PAXList)
Debug.Print "Current Match being emailed is " & PAXList(i)(0)
    If PageInfoF(PAXList(i), "Has Docusign?")(0) = "True" Then
    If PageInfoS(PAXList(i), "Engagement.Status")(0) = "On Program" Then
        If PageInfoF(PAXList(i), "Definition")(0) = "Please Sign" Then

            Call Send_HTMLEmail(AddTemplate(PAXbasicInfo((PageInfoS(PAXList(i), "Engagement")(1)), (PAXList(i)(1)), (PAXList(i)(1)), 4), eTemplate_ManagerSig), "NoReply", FieldList, False)
        End If
        If PageInfoF(PAXList(i), "Definition")(0) = "Pending" Then
            Debug.Print "Remind PAX that they haven't signed their docusign"
            Call Send_HTMLEmail(AddTemplate(PAXbasicInfo((PageInfoS(PAXList(i), "Engagement")(1)), (PAXList(i)(1)), "", 4), eTemplate_PAXSig), "NoReply", FieldList)
        End If
    End If
    End If
Next i

End Sub

Private Sub HC_Roster_ReIssue(OpportunityID As String)
Dim IE As Object
Dim Opp As Variant
Dim PositionList As Variant
Dim MatchList As Variant
Dim Matches As Collection
Dim Results As New Collection
Dim PushResults As Variant
Dim Email As String
Dim StartTime As Date
Dim FieldList As Collection

StartTime = Now

Opp = HC_Roster_Builder(OpportunityID)
Set Matches = New Collection

PositionList = PageInfoF(Opp, "Positions")
For p = 0 To UBound(PositionList)
    If PageInfoF(PositionList(p), "Has Matches?")(0) = "True" Then
        MatchList = PageInfoF(PositionList(p), "Matches")
        
        For m = 0 To UBound(MatchList)

            If PageInfoF(MatchList(m), "Has Docusign?")(0) = "True" Then
                If PageInfoF(MatchList(m), "Definition")(0) = "Confirmed" Then
                    'Or PageInfoF(MatchList(m), "Definition")(0) = "Pending"
                    Matches.Add MatchList(m)
                    Debug.Print "Match found! " & MatchList(m)(0)
                End If
            End If
        Next m
    End If
Next p
      
Debug.Print "Found " & Matches.count & " matches to reset docusigns for"

Call Docusign_Batch_Reset(Matches)

'Email = HC_Roster_Print_Table(AnchorMaker(Opp), Array("Action", "Match", "Had Issues?"), CollectionConverter(Results))

Debug.Print Email


    Call HC_Roster_Emailer(OpportunityID, "0031B00002bteMh", "amey@intraxinc.com", "DOCUSIGN RECALL")
    
    Set FieldList = New Collection
        FieldList.Add Array("00N30000007CCDo", "Sent: " & Format(Now(), "mm/dd/yyyy"))
        FieldList.Add Array("00N30000007CHaT", Format(Now(), "mm/dd/yyyy"))
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & OpportunityID & "/e")
    Call PushUpdates2Page(IE, FieldList)
        
    Call opNAV(IE, "nav", Replace("https://na68.salesforce.com/00T/e?title=Call&what_id=<ID>&followup=0&retURL=%2F<ID>&RecordType=01230000000seeI&ent=Task&tsk10=Email", "<ID>", OpportunityID, , , vbTextCompare))
    Set FieldList = New Collection
        FieldList.Add Array("tsk6", Email)
        FieldList.Add Array("tsk5", "Email Composed and Sent - DocuSign Blast || " & Format(Now() - StartTime, "nn:ss"))
    Call PushUpdates2Page(IE, FieldList)
    
    Call opNAV(IE, "quit")

End Sub
Private Sub Docusign_Batch_Reset(MatchIDList As Collection)
Dim PushResults As Variant
Dim Results As New Collection
Dim PAX As Variant
Dim Email As String
Dim IE As Object
Dim FieldList As New Collection

If MatchIDList.count > 0 Then 'This upgrades just IDs to fake match sets
    If IsArray(MatchIDList(1)) Then
    Else
        For i = 1 To MatchIDList.count
            FieldList.Add Array("Match", MatchIDList(i))
        Next i
        Set MatchIDList = FieldList
    End If
End If

Set FieldList = New Collection
FieldList.Add Array("00N1B00000BLz5J", "")
FieldList.Add Array("00Na000000B2SUq", "")
FieldList.Add Array("00N1B00000BLz5K", "")

For i = 1 To MatchIDList.count
    PushResults = Docusign_PressReset(MatchIDList(i)(1))
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchIDList(i)(1) & "/e")
    Call PushUpdates2Page(IE, FieldList)
    Results.Add Array("Reset DocuSign", AnchorMaker(Array(MatchIDList(i)(0), MatchIDList(i)(1))), PushResults(0), PushResults(1))
    Call Docusign_SetupMatch((MatchIDList(i)(1)))
Next i
    Call opNAV(IE, "quit")
    
Email = HC_Roster_Print_Table("Reset DocuSign Matches", Array("Task", "Match", "Error?", "Message"), CollectionConverter(Results))
Email = "Hello,<br/><br/>Below are a list of matches who's docusign was reset.<br/><br/>" & Email

PAX = PAXbasicInfo("", "", "", 4)
PAX(3, 1) = Email
PAX(2, 1) = "Docusign Reset Results"
PAX(20, 2) = "0031B00002eFsxd"
PAX(39, 2) = "0011300001jIqoK"

Set Results = New Collection
Call Send_HTMLEmail(PAX, "iwtsupport", Results)

End Sub

Private Function HC_Roster_Community(SICcode As String) As String
Dim SIClist As New Collection
Dim sicID As String
Dim HTML As New Collection
Dim IE As Object
Dim FinalHTML As String

SIClist.Add Array("York CSG", "00T1B00005MJD7W")
SIClist.Add Array("BRAN CSG", "00T1B00005MJCAI")
SIClist.Add Array("MB ISOP", "00T1B00005MJD7I")
SIClist.Add Array("HILTON HEAD ISOP", "00T1B00005MJD7H")
SIClist.Add Array("OC SWDC", "00T1B00005MJD8E")
SIClist.Add Array("Sandusky ISOP", "00T1B00005MJD8s")
SIClist.Add Array("CC CSG", "00T1B00005MJCmb")
SIClist.Add Array("WD CSG", "00T1B00005MJD9V")
SIClist.Add Array("VB ISOP", "00T1B00005MJD9U")
SIClist.Add Array("SISOP", "00T1B00005MJD9H")
SIClist.Add Array("DESTIN ISOP", "00T1B00005MJD7f")
SIClist.Add Array("PCB ISOP", "00T1B00005MJD8O")
SIClist.Add Array("OGUN CSG", "00T1B00005MJD8J")
SIClist.Add Array("BI ISC", "00T1B00005MJCCh")
SIClist.Add Array("GALV CSG", "00T1B00005MJD7k")
SIClist.Add Array("Wildwood ISOP", "00T1B00005MJD9e")
SIClist.Add Array("Rehoboth ISOP", "00T1B00005MJD8i")
SIClist.Add Array("QR ISOP", "00T1B00005MJD8T")
SIClist.Add Array("Lake George SC", "00T1B00005MJD7p")
SIClist.Add Array("OBX ISOP", "00T1B00005MJD7z")
SIClist.Add Array("Williamsburg ISOP", "00T1B00005MJD9j")

For i = 1 To SIClist.count
    If SICcode = SIClist(i)(0) Then
        sicID = SIClist(i)(1)
        i = SIClist.count
    End If
Next i

If sicID <> "" Then
    HTML.Add "<tr><td>&nbsp;<br/></td></tr>"
    HTML.Add "<tr><td>"
    HTML.Add "<span class=""title"" style=""color: #801830;font-weight: bold;font-size: 110%;"">Community</span>"
    HTML.Add "<br/>"
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & sicID & "/e")
        FinalHTML = CleanHTMLEmail((FetchField(IE, "tsk6")(0)))
        HTML.Add FinalHTML
    Call opNAV(IE, "quit", "")
    HTML.Add "<br/><br/>"
    HTML.Add "</td></tr>"
End If

If Len(FinalHTML) > 10 Then
    FinalHTML = ""
    
    For i = 1 To HTML.count
        FinalHTML = FinalHTML & HTML(i)
    Next i
Else
    FinalHTML = ""
End If

HC_Roster_Community = FinalHTML

End Function
Sub ZZZ_XXX_Clone()
Dim OppID As String
Dim IE As Object
Dim FieldUpdates As New Collection
Dim Opportunity As Variant
Dim TargetAccount As Variant
Dim TargetAccountID As String
Dim NewOppID As String
Dim Position As Variant
Dim ReadFields As Collection
Dim Year As String
Dim Season As String
Dim TempString As String

OppID = "0061B00001VAOTO"
TargetAccountID = "0011300001q1vMe"
Year = Format(Now(), "yyyy")
Season = "Summer"

'Prep Target Account
Set FieldUpdates = New Collection
    FieldUpdates.Add Array("Contacts", "_RelatedContactList")
    FieldUpdates.Add Array("Account", "opp4")
    FieldUpdates.Add Array("Name", "acc2")
TargetAccount = Retrieve_Page_Info(TargetAccountID, FieldUpdates)
TargetAccount = PageInfo_RR(TargetAccount, "Primary Contact", PageInfoF(TargetAccount, "Contacts")(0))
TargetAccount(0) = Trim(TargetAccount(0))

'Fetch Opporunity
Set FieldUpdates = New Collection
    FieldUpdates.Add Array("Positions", "_00N30000008RES7")
    FieldUpdates.Add Array("Service Level", "00N30000007CyH2")
Opportunity = Retrieve_Page_Info(OppID, FieldUpdates)


'Clone Opportunity
Call opNAV(IE, "nav", "https://na68.salesforce.com/" & OppID & "/e?clone=1")
Set FieldUpdates = New Collection
    FieldUpdates.Add Array("opp10", "Need Google | primary contacts")
    FieldUpdates.Add Array("opp11", "Finalization")
    FieldUpdates.Add Array("CF00Na0000009rUSE_lkid", PageInfoF(TargetAccount, "Primary Contact")(1))
    FieldUpdates.Add Array("00N300000068ZDp", Year)
    FieldUpdates.Add Array("00Na000000B2vpa", "")
    FieldUpdates.Add Array("00Na000000B2vpb", "")
    FieldUpdates.Add Array("opp4_lkid", TargetAccount(1))
    FieldUpdates.Add Array("opp3", Season & "-" & Year)
NewOppID = PushUpdates2Page(IE, FieldUpdates)
    
Set ReadFields = New Collection
    ReadFields.Add Array("Title", "00Na000000B2Ecn")
    ReadFields.Add Array("Service Level", "00N1300000BQz2m")
    
For i = 0 To UBound(PageInfoF(Opportunity, "Positions"))
    Position = Retrieve_Page_Info((PageInfoF(Opportunity, "Positions")(i)(1)), ReadFields)
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Position(1) & "/e?clone=1")
        Set FieldUpdates = New Collection
            FieldUpdates.Add Array("CF00N30000008RES2_lkid", TargetAccountID)
            FieldUpdates.Add Array("CF00N30000008RES7_lkid", NewOppID)
            FieldUpdates.Add Array("00N30000008RCsl", "")
            FieldUpdates.Add Array("00N30000008RJo3", "Pending")
            FieldUpdates.Add Array("CF00Na0000009qBfb_lkid", PageInfoF(TargetAccount, "Primary Contact")(1))
            TempString = Trim(TargetAccount(0) & "-" & PageInfoF(Position, "Title")(0) & "-Summer-" & Year)
            FieldUpdates.Add Array("Name", TargetAccount(0) & "-" & Right(TempString, 80))
    Call PushUpdates2Page(IE, FieldUpdates)
Next i

Call opNAV(IE, "quit", "")
End Sub

Sub Fix_Missing_Confirmed_Date(CheckID As String)
Dim FieldList As Collection
Dim History As Variant
Dim hAction As String
Dim ConfirmDate As String
Dim SpaceLocation As Double
Dim IE As Object
Dim FakePAX As Variant
Dim ActivityN As Variant

Set FieldList = New Collection
    FieldList.Add Array("Confirmed Date", "00Na000000B2Kf1_ileinner")
    FieldList.Add Array("Assessment History", "_RelatedEntityHistoryList")
Assessment = Retrieve_Page_Info(CheckID, FieldList)

Assessment = PageInfoF(Assessment, "Assessment History")


For i = 0 To UBound(Assessment)
    hAction = PageInfoF(Assessment(i), "Action")(0)
    Debug.Print hAction
        If InStr(1, hAction, "Deleted", vbTextCompare) > 0 Then
        If InStr(1, hAction, "Confirmed Date", vbTextCompare) > 0 Then
            ConfirmDate = Mid(hAction, 9, 10)
            SpaceLocation = InStr(5, ConfirmDate, " ", vbTextCompare)
            If SpaceLocation > 7 Then
                ConfirmDate = left(ConfirmDate, SpaceLocation - 1)
                ActivityN = Assessment(i)
                i = 999
                Debug.Print "Actual Confirm Date was " & ConfirmDate
            End If
        End If
        End If
Next i

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & CheckID & "/e")
    Set FieldList = New Collection
        FieldList.Add Array("00Na000000B2Kf1", ConfirmDate)
    Call PushUpdates2Page(IE, FieldList)
Call opNAV(IE, "quit")

'##### Send Note:
FakePAX = PAXbasicInfo("", "", "", 0)

FakePAX(2, 1) = "(IWT) - Confirmed Date Missing from Checkin/MC"
FakePAX(3, 1) = "User: " & PageInfoF(ActivityN, "User")(0) & " " & PageInfoF(ActivityN, "Action")(0) & "<br/>Confirmed date has been corrected to: " & ConfirmDate
FakePAX(3, 1) = "Hello,<br/><br/>This checkin is confirmed but was missing the confirmed date (required for generating future monthly contacts.)<br/><br/>https://na68.salesforce.com/##<br/><br/>" & FakePAX(3, 1) & "<br/><br/>Thank you,<br/>Andrew<br/>"
FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", CheckID, 1)
FakePAX(39, 2) = CheckID
FakePAX(20, 2) = "0031B00002eGZCa"
FakePAX(1, 1) = "afarael@intraxinc.com"

Set FieldList = New Collection
Call Send_HTMLEmail(FakePAX, "NoReply", FieldList)

End Sub
Private Function PAXn2Legacy(PAXn As Variant) As Variant
Dim EngID As String
Dim ListNames As Variant
Dim PAX As Variant
Dim cValue As Variant
Dim HCInfo As Variant
Dim StaffList As Variant

ListNames = Array("CC", "BCC", "Subject", "Body", "PAX Account", "Engagement Start", "Engagement End", "Gender", "Intrax ID", "Partner", "SEVIS ID", "Engagement Name", "Opportunity", "Engagement Status", "Placement Status", "Current State", "Arrival", "PAX Service Lvl", "Placement Status", "Primary Match", "Contact ID", "DOB", "Citizenship", "Email", "Mr/Ms", "Partner Email", "Location", "RAM", "Fieldstaff", "HC Account", "Position", "Employment Dates", "HC Contact", "HC Service Lvl", "HC Opp Stage", "Next Step", "HC Opp", "Regional Queue", "Account Manager", "Case ID", "Due Date", "X Days", "All Matches?", "HC.short", "CaseUpdates", "Assessment List", "HousingPlan Assessment")
'                   0     1        2         3          4               5                 6               7            8            9         10              11               12            13                      14                 15           16              17                18                 19            20         21         22         23       24           25            26        27         28             29          30                 31          32              33               34               35       36         37                 38                  39          40          41         42              43          44              45                  46
ReDim PAX(UBound(ListNames) + 4, 2)
For i = 0 To UBound(ListNames)
    PAX(i, 0) = ListNames(i)
Next i

cValue = PageInfoF(PAXn, "Account")
    PAX(4, 1) = cValue(0)
    PAX(4, 2) = cValue(1)
cValue = PageInfoF(PAXn, "Engagement Start")
    PAX(5, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Engagement End")
    PAX(6, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Gender")
    PAX(7, 1) = cValue(0)
    
    If cValue(0) = "Male" Then
        PAX(24, 1) = "Mr. " & PageInfoF(PAXn, "Account")(0)
    Else
        If cValue(0) = "Male" Then
            PAX(24, 1) = "Ms. " & PageInfoF(PAXn, "Account")(0)
        Else
            PAX(24, 1) = PageInfoF(PAXn, "Account")(0)
        End If
    End If
    
cValue = PageInfoF(PAXn, "Intrax ID") 'needs update
    PAX(8, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Partner")
    PAX(9, 1) = cValue(0)
    PAX(9, 2) = cValue(1)
    
    'Partner Info
    ListNames = LoadPARTNERtable()
    For i = 0 To UBound(ListNames, 1)
        If cValue(0) = ListNames(i, 1) Then
            PAX(25, 1) = ListNames(i, 3)
            PAX(25, 2) = ListNames(i, 2)
            PAX(38, 1) = ListNames(i, 4)
            i = 999
        End If
    Next i
    'AM Email Addresses
    If PAX(38, 1) = "Will" Then
        PAX(38, 2) = "WTraer@intraxinc.com"
    End If
    If PAX(38, 1) = "Artem" Then
        PAX(38, 2) = "AKrasnov@intraxinc.com"
    End If
    If PAX(38, 1) = "Rebecca" Then
        PAX(38, 2) = "RFee@intraxinc.com"
    End If
    If PAX(38, 1) = "April" Then
        PAX(38, 2) = "amey@intraxinc.com"
    End If
    
cValue = PageInfoF(PageInfoF(PAXn, "Account"), "Birthdate")
    PAX(21, 1) = cValue(0)
    

    
cValue = PageInfoF(PAXn, "SEVIS ID") 'needs update
    PAX(10, 1) = cValue(0)
PAX(11, 1) = PAXn(0)
PAX(11, 2) = PAXn(1)
cValue = PageInfoF(PAXn, "Opportunity")
    PAX(12, 1) = cValue(0)
    PAX(12, 2) = cValue(1)
cValue = PageInfoF(PAXn, "Status")
    PAX(13, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Placement Status")
    PAX(14, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Actual Arrival") 'needs update
    PAX(16, 1) = cValue(0)
cValue = PageInfoF(PAXn, "Service Level")
    PAX(17, 1) = cValue(0)
cValue = PageInfoS(PAXn, "Opportunity.Primary Contact")
    PAX(20, 1) = cValue(0)
    PAX(20, 2) = cValue(1)
'Account Info
cValue = PageInfoF(PageInfoF(PAXn, "Account"), "Birthdate")
    PAX(21, 1) = cValue(0)
cValue = PageInfoF(PageInfoF(PAXn, "Account"), "Citizenship")
    PAX(22, 1) = cValue(0)
cValue = PageInfoF(PageInfoF(PAXn, "Account"), "Email")
    PAX(23, 1) = cValue(0)
    
'Match Info
Debug.Print "Checking for primary match on engagement"
If PageInfoF(PAXn, "Has Primary Match?")(0) = "True" Then
    ListNames = PageInfoF(PAXn, "Primary Match")
        PAX(19, 1) = ListNames(0)
        PAX(19, 1) = ListNames(1)
        
    cValue = PageInfoF(ListNames, "Start Date")
        PAX(31, 1) = cValue(0)
    cValue = PageInfoF(ListNames, "End Date")
        PAX(31, 2) = cValue(0)
        
    cValue = PageInfoF(ListNames, "Host Account")
        PAX(29, 1) = FixAmp(cValue(0))
        PAX(29, 2) = cValue(1)
        PAX(43, 1) = ParseHCName((PAX(29, 1)), 40 - Len(PAX(25, 1))) 'short HC name
    cValue = PageInfoF(ListNames, "Position Name")
        PAX(30, 1) = cValue(0)
        PAX(30, 2) = cValue(1)
        PAX(26, 1) = PageInfoF(cValue, "City")(0)
        PAX(26, 2) = PageInfoF(cValue, "State")(0)
    'start the RAM section based on primary match
    StaffList = LoadRAMtable()
    For i = 0 To UBound(StaffList, 1)
        If StaffList(i, 0) = PAX(26, 2) Then
            PAX(27, 1) = StaffList(i, 1)
            PAX(27, 2) = StaffList(i, 2)
            PAX(28, 1) = StaffList(i, 4)
            PAX(28, 2) = StaffList(i, 5)
            PAX(37, 1) = StaffList(i, 6)
        End If
    Next i
    
    HCInfo = PageInfoF(cValue, "Host Opportunity")
        PAX(36, 1) = HCInfo(0)
        PAX(36, 2) = HCInfo(1)
    cValue = PageInfoF(HCInfo, "Primary Contact")
        PAX(32, 1) = cValue(0)
        PAX(32, 2) = cValue(1) & " | " & PageInfoF(cValue, "Email")(0)
    cValue = PageInfoF(HCInfo, "Service Level")
        PAX(33, 1) = cValue(0)
    If PAX(33, 1) = "Premium" Then
        PAX(33, 2) = PAX(27, 2) 'HC email is RAM
    Else
        PAX(33, 2) = PAX(32, 2) 'HC email is primary contact
    End If
        
Else
    'stuff to do if there's no match
    PAX(32, 2) = PAX(25, 2) 'set HC email to partner since there is no HC
    PAX(29, 1) = "no currently confirmed placements" 'set HC name to no placements
    PAX(33, 1) = "Independent" 'no placement should be treated as an IP at IP
    
End If

PAXn2Legacy = PAX
End Function

Sub ZZZ_MonitorURL()
Dim IE As Object
Dim Counter As Double
Dim LastURL As String

Call opNAV(IE, "nav", "https://na68.salesforce.com/a0d1300000PSxwc")
IE.Visible = True

On Error GoTo ExitURLmonitor

Counter = 3
Do While 1 = 1
    If LastURL <> IE.LocationURL Then
        Range("B" & Counter).Value = IE.LocationURL
        Counter = Counter + 1
        LastURL = IE.LocationURL
        Debug.Print LastURL
    End If
Loop

ExitURLmonitor:
Debug.Print "Monitoring Ended at: " & Counter
End Sub

Private Sub Docusign_SetupMatch(MatchID As String)
Dim IE As Object
Dim MatchObj As Variant
Dim FieldList As New Collection
Dim Roadblock As New Collection
Dim TempObj As Variant
Dim sValue As String


FieldList.Add Array("Stage", "00N30000008RERi_ileinner")
FieldList.Add Array("Offer Status", "00Na000000B2SUq_ileinner")
FieldList.Add Array("Sent to", "00N1B00000BLz5K_ileinner")
FieldList.Add Array("Engagement", "CF00Na0000009s14h_ileinner")
FieldList.Add Array("Position", "CF00N30000008REJy_ileinner")
FieldList.Add Array("Start Date", "00Na0000009qRci_ileinner")
FieldList.Add Array("End Date", "00Na0000009qRcs_ileinner")
FieldList.Add Array("Reason Detail Other", "00N1300000BLZQq_ileinner")

MatchObj = Retrieve_Page_Info(MatchID, FieldList)
    Set FieldList = New Collection
        FieldList.Add Array("Stage", "00N30000008RJo3_ileinner")
        FieldList.Add Array("Pay Rate", "00N30000008RCs2_ileinner")
        FieldList.Add Array("Employment Hrs/Wk", "00Na0000009qBfa_ileinner")
        FieldList.Add Array("Title", "00Na000000B2Ecn_ileinner")
        FieldList.Add Array("Opportunity", "CF00N30000008RES7_ileinner")
        FieldList.Add Array("Positions Sold", "00N30000008RCs7_ileinner")
        FieldList.Add Array("Service Level", "00N1300000BQz2m_ileinner")
MatchObj = PageInfo_RR(MatchObj, "Position", Retrieve_Page_Info((PageInfoF(MatchObj, "Position")(1)), FieldList))

    Set FieldList = New Collection
        FieldList.Add Array("Stage", "opp11_ileinner")
        FieldList.Add Array("Validator", "CF00Na000000B33k3_ileinner")
        FieldList.Add Array("Operations Contact", "CF00N1B00000BLz5L_ileinner")
        FieldList.Add Array("Primary Contact", "CF00Na0000009rUSE_ileinner")
TempObj = Retrieve_Page_Info((PageInfoS(MatchObj, "Position.Opportunity")(1)), FieldList)

    Set FieldList = New Collection
        FieldList.Add Array("Email", "con15")
        FieldList.Add Array("Phone", "con10")
TempObj = PageInfo_RR(MatchObj, "Operations Contact", Retrieve_Page_Info((PageInfoS(TempObj, "Operations Contact")(1)), FieldList))
TempObj = PageInfo_RR(PageInfoF(MatchObj, "Position"), "Opportunity", TempObj)

MatchObj = PageInfo_RR(MatchObj, "Position", TempObj)

    Set FieldList = New Collection
        FieldList.Add Array("Status", "00Na0000009s14S_ileinner")
        FieldList.Add Array("IP JO Review Status", "00N1B00000BLzWU_ileinner")
MatchObj = PageInfo_RR(MatchObj, "Engagement", Retrieve_Page_Info((PageInfoF(MatchObj, "Engagement")(1)), FieldList))


        
    FieldValue = PageInfoS(MatchObj, "Engagement.Status")(0)
    If FieldValue = "On Program" Then
        If PageInfoF(MatchObj, "Reason Detail Other")(0) = "" Then 'Flag that match to send a confirmation email if PAX is on program
            Set FieldList = New Collection
                FieldList.Add Array("00N1300000BLZQq", "Confirm+")
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchID & "/e")
            Call PushUpdates2Page(IE, FieldList)
        End If
        
        If PageInfoS(MatchObj, "Engagement.IP JO Review Status")(0) <> "" Then 'Clear out the JO document status on the Engagement
            Set FieldList = New Collection
                FieldList.Add Array("00N1B00000BLzWU", "")
            Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoS(MatchObj, "Engagement")(1) & "/e")
            Call PushUpdates2Page(IE, FieldList)
        End If
        
    Else
        If FieldValue = "Processing" Or FieldValue = "Program Ready" Then
        Else
            Roadblock.Add "Engagement status is " & FieldValue & " but should be Processing/Program Ready/On Program.<br/>"
        End If
    End If
    
    If PageInfoF(MatchObj, "Stage")(0) <> "Applied" Then
        Roadblock.Add "Match stage is " & PageInfoF(MatchObj, "Stage")(0) & " but should be Applied.<br/>"
    End If
    
    If PageInfoF(MatchObj, "Reason Detail Other")(0) = "" Then
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchID & "/e?00N1300000BLZQq=Confirm+")
        Call HitSave(IE)
    End If
    
    '############## This sections initiates repairs
    Debug.Print "Start repair section"
        Set FieldList = New Collection 'Postion fixes
        
        If PageInfoS(MatchObj, "Position.Employment Hrs/Wk")(0) = "" Then
            MatchObj = PageInfo_RR(MatchObj, "Backfiller", Docusign_Hours_Per_Week_Backfiller((PageInfoF(MatchObj, "Position")(1))))
            If IsArray(PageInfoS(MatchObj, "Position.Backfiller")) Then
                TempObj = PageInfoF(MatchObj, "Position")
                TempObj = PageInfo_RR(TempObj, "Employment Hrs/Wk", PageInfoS(MatchObj, "Position.Backfiller.Primary Assessment.Fields from Text.Avg Hrs/Wk:")(0))
                MatchObj = PageInfo_RR(MatchObj, "Position", TempObj)
            End If
        End If
        
        If PageInfoS(MatchObj, "Position.Stage")(0) = "Pending" Then
            FieldList.Add Array("00N30000008RJo3", "Matching")
        End If
        
        If PageInfoS(MatchObj, "Position.Stage")(0) = "Closed - Filled" Then
                FieldList.Add Array("00N30000008RJo3", "Matching")
            If PageInfoS(MatchObj, "Position")(0) = "Independent" Then
                FieldList.Add Array("00N30000008RCs7", (PageInfoS(MatchObj, "Position.Positions Sold")(0)) + 5)
            End If
        End If
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoF(MatchObj, "Position")(1) & "/e")
        Call PushUpdates2Page(IE, FieldList)
        
        Set FieldList = New Collection 'Opportunity fixes
        
        If PageInfoS(MatchObj, "Position.Opportunity.Operations Contact")(0) = "" Then
            FieldList.Add Array("CF00N1B00000BLz5L_lkid", PageInfoS(MatchObj, "Position.Opportunity.Primary Contact")(1))
        End If
        
        Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PageInfoS(MatchObj, "Position.Opportunity")(1) & "/e")
        Call PushUpdates2Page(IE, FieldList)
        
    
    '############### This section checks for failures
        Set FieldList = New Collection
        FieldList.Add Array("Offer Status", True)
        FieldList.Add Array("Sent to", True)
        FieldList.Add Array("Start Date", False)
        FieldList.Add Array("End Date", False)
        FieldList.Add Array("Position.Pay Rate", False)
        FieldList.Add Array("Position.Employment Hrs/Wk", False)
        FieldList.Add Array("Position.Title", False)
        FieldList.Add Array("Position.Opportunity.Operations Contact", False)
        FieldList.Add Array("Position.Opportunity.Operations Contact.Email", False)
    For i = 1 To FieldList.count
        If FieldList(i)(1) Then 'Should the field be blank (ie offer status on match should be blank before sending docusign)
            If PageInfoS(MatchObj, (FieldList(i)(0)))(0) <> "" Then
                Roadblock.Add FieldList(i)(0) & " should be blank but is not.<br/>"
            End If
        Else
            If PageInfoS(MatchObj, (FieldList(i)(0)))(0) = "" Then
                Roadblock.Add FieldList(i)(0) & " should not be blank.<br/>"
            End If
        End If
    Next i
    
    TempObj = PageInfoS(MatchObj, "Position.Opportunity.Operations Contact")
    sValue = Docusign_VerifyManager(TempObj)
    If sValue <> "" Then
        Roadblock.Add "Issues found with contact integrity: <a href=""https://na68.salesforce.com/" & TempObj(1) & """>" & TempObj(0) & " | " & PageInfoF(TempObj, "Email")(0) & "</a>"
        Roadblock.Add "<br/><div style=""padding: 0px 15px"">" & sValue & "</div><br/><br/>"
    End If

'======================================================

MatchObj = PageInfo_RR(MatchObj, "Send 2 PAX Only", Array("False", 0))
MatchObj = PageInfo_RR(MatchObj, "Errors", Collection2String(Roadblock))

Call opNAV(IE, "quit")

Call Docusign_SendViaMatch(MatchObj)

End Sub
Private Function Docusign_VerifyManager(Manager As Variant) As String
Dim IssuesFound As New Collection
Dim BannedNameWords As New Collection
Dim NameWords As Collection
   
    
Debug.Print "Checking the email: " & PageInfoF(Manager, "Email")(0)
If (PageInfoF(Manager, "Email")(0)) = "" Then
    IssuesFound.Add "Manager's Email is blank"
End If

If InStr(1, (PageInfoF(Manager, "Email")(0)), "none", vbTextCompare) > 0 Then
    IssuesFound.Add "Negative keyword trigger in manager's email: none"
End If

Set NameWords = Sequencer((Manager(0)), " ")
For i = 1 To NameWords.count
    If Len(NameWords(i)) < 3 And InStr(1, NameWords(i), ".", vbBinaryCompare) = 0 Then
        IssuesFound.Add "Manager's name is too short (for initials, please '.' to fix; Bill T. Demo) | " & NameWords(i)
    End If
Next i

If FindFirstNumber((Manager(0))) > 0 Then
    IssuesFound.Add "Manager's name contains a number"
End If

    BannedNameWords.Add "HR"
    BannedNameWords.Add "Corporate"
    BannedNameWords.Add "Manager"
    BannedNameWords.Add "DUP"
    BannedNameWords.Add "None"
    BannedNameWords.Add ".."
    BannedNameWords.Add "/"
For i = 1 To BannedNameWords.count
    If InStr(1, Manager(0), BannedNameWords(i), vbTextCompare) > 0 Then
        IssuesFound.Add "Negative keyword trigger in manager's name: " & BannedNameWords(i)
    End If
Next i

If IssuesFound.count > 0 Then
    Docusign_VerifyManager = Collection2String(IssuesFound, True)
Else
    Docusign_VerifyManager = ""
End If

End Function
Private Function FindFirstNumber(vString As String) As Double

FindFirstNumber = 0
For i = 1 To Len(vString)
    If IsNumeric(Mid(vString, i, 1)) Then
        FindFirstNumber = i
        Exit Function
    End If
Next i

End Function
Private Sub Docusign_SendViaMatch(MatchObj As Variant)
Dim PushingResult As Variant
Dim MatchID As String
Dim Send2PAXonly As Boolean
Dim ErrorsEncountered As String


ErrorsEncountered = PageInfoF(MatchObj, "Errors")(0)
Send2PAXonly = PageInfoF(MatchObj, "Send 2 PAX Only")(0)

If ErrorsEncountered = "" Then
    PushingResult = Docusign_PressOffer(MatchObj(1), Send2PAXonly)
    
    If PushingResult(0) Then
        ErrorsEncountered = ErrorsEncountered & PushingResult(1)
    End If
End If

If ErrorsEncountered <> "" Then
    Call DocuSign_SendViaMatch_PaperRoadBlock((MatchObj(1)), ErrorsEncountered)
End If

End Sub
Private Function Docusign_Hours_Per_Week_Backfiller(PositionID As String) As Variant
Dim FieldList As Collection
Dim Position As Variant
Dim tValue As Variant
Dim CommentsBox As String
Dim fhStart As Double
Dim rFields As Collection
Dim IE As Object

If left(PositionID, 3) <> "a0Q" Then
Debug.Print "Can only backfill using a valid position ID"
Else

Set FieldList = New Collection 'Position Fields
    FieldList.Add Array("Host Opportunity", "CF00N30000008RES7_ileinner")
    FieldList.Add Array("Employment Hrs/Wk", "00Na0000009qBfa_ileinner")
    FieldList.Add Array("Pay Frequency", "00Na000000B2Lkl_ileinner")
Position = Retrieve_Page_Info(PositionID, FieldList)

Set FieldList = New Collection 'Opportunity Fields
    FieldList.Add Array("Stage", "opp11_ileinner")
    FieldList.Add Array("Assessments", "_00Na000000B2vpP")
Position = PageInfo_RR(Position, "Host Opportunity", Retrieve_Page_Info((PageInfoF(Position, "Host Opportunity")(1)), FieldList))


Set FieldList = New Collection 'Assessment Fields
    FieldList.Add Array("Host Comments", "00Na000000B2vpL_ileinner")
    FieldList.Add Array("Status", "00Na000000B2KgF_ileinner")
    
tValue = PageInfoS(Position, "Host Opportunity.Assessments")
    For i = 0 To UBound(tValue) 'cycle through assessments to find right one
        tValue(i) = Retrieve_Page_Info((tValue(i)(1)), FieldList)
        
        CommentsBox = PageInfoF(tValue(i), "Host Comments")(0)
        If CommentsBox <> "" Then
            tValue(i) = PageInfo_RR(tValue(i), "Fields from Text", Parse_Fields_as_Text(CommentsBox))
            Position = PageInfo_RR(Position, "Primary Assessment", tValue(i))
        End If
    Next i
    
Set FieldList = New Collection 'this is where corrections to the position will go
If IsArray(PageInfoF(Position, "Primary Assessment")) Then
    tValue = PageInfoS(Position, "Primary Assessment.Fields from Text")
    
    If PageInfoF(Position, "Employment Hrs/Wk")(0) = "" Then
    If IsArray(PageInfoF(tValue, "Avg Hrs/Wk")) Then
        FieldList.Add Array("00Na0000009qBfa", CleanHTMLEmail((PageInfoF(tValue, "Avg Hrs/Wk")(0))))
    Else
        FieldList.Add Array("00Na0000009qBfa", "32")
        Debug.Print "Hours per week not found on assessment defaulting to 32"
    End If
    End If
    If PageInfoF(Position, "Pay Frequency")(0) = "" Then
    If IsArray(PageInfoF(tValue, "Pay Frequency")) Then
        FieldList.Add Array("00Na000000B2Lkl", CleanHTMLEmail((PageInfoF(tValue, "Pay Frequency")(0))))
    End If
    End If
Else
    If PageInfoF(Position, "Employment Hrs/Wk")(0) = "" Then
        FieldList.Add Array("00Na0000009qBfa", "32")
        Debug.Print "Hours per week not found on assessment defaulting to 32"
    End If
End If

If FieldList.count > 0 Then
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & Position(1) & "/e")
    Call PushUpdates2Page(IE, FieldList)
    Call opNAV(IE, "quit")
End If

Docusign_Hours_Per_Week_Backfiller = Position
End If
End Function
Private Function Parse_Fields_as_Text(FullText As String) As Variant
Dim Lines As Collection
Dim Fields As New Collection
Dim QAsep1 As Double
Dim QAsep2 As Double
Dim Pacakage As Variant

FullText = Replace(FullText, Chr(10), "")
Set Lines = Sequencer(FullText, "<br>")

For i = 1 To Lines.count
    QAsep1 = InStr(1, Lines(i), ": ", vbTextCompare)
    QAsep2 = InStr(1, Lines(i), "? ", vbTextCompare)
    If QAsep1 > 1 Or QAsep2 > 1 Then
        If QAsep1 > QAsep2 Then
            Fields.Add Array(left(Lines(i), QAsep1 - 1), "", Array(Right(Lines(i), Len(Lines(i)) - QAsep1 - 1), ""))
        Else
            Fields.Add Array(left(Lines(i), QAsep2 - 1), "", Array(Right(Lines(i), Len(Lines(i)) - QAsep2 - 1), ""))
        End If
    Else
        Fields.Add Array(Lines(i), "", Array(Lines(i), ""))
    End If
Next i

Parse_Fields_as_Text = Array("Fields from Text", "", CollectionConverter(Fields))
End Function
Private Function Docusign_PressOffer(MatchID, Optional Send2PAXonly As Boolean = False) As Variant
Dim Roadblock As String
Dim IE As Object
Dim ButtonTypeID As String
Dim ActionResult As Boolean
Dim FieldList As New Collection

Dim FieldValue As String
Dim FailLoadCounter As Double

Roadblock = ""
ActionResult = True
If opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/WT_IP_Docusign?mid=" & MatchID) Then
    
    FailLoadCounter = 0
    Do While IsPageStillLoading(IE) And FailLoadCounter < 1000
        FailLoadCounter = FailLoadCounter + 1
        If FailLoadCounter > 500 Then
            IE.Visible = True
        End If
    Loop
    
    If FailLoadCounter > 900 Then
        ActionResult = False
    End If
    
    If ActionResult Then
        If IsObject(IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failureout")) Then
            Roadblock = Roadblock & IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failureout").innerhtml
        End If
        
        If IsObject(IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failedout")) Then
            Roadblock = Roadblock & IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failedout").innerhtml
        End If
        
        If Roadblock = "" Then
            Debug.Print "No errors, offering IP docusign"
            ActionResult = False
            If Send2PAXonly Then
                ButtonTypeID = "wt_ip_docusign:SiteTemplate:webform:j_id753:0"
            Else
                ButtonTypeID = "wt_ip_docusign:SiteTemplate:webform:j_id753:1"
            End If
            
            Set ButtonHolder = IE.document.getelementbyid(ButtonTypeID) 'picks up the desired radio button
                ButtonHolder.Click 'make sure correct radio button is marked
            Set ButtonHolder = IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:j_id756") ' picks send button
            'Set ButtonHolder = IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:j_id758") ' picks send button
                ButtonHolder.Click 'Sends the docusign
            'IE.Visible = True
            'MsgBox "Just pressed the offer button", , "Debugging"
        End If
    Else
        Roadblock = "Docusign button failed to load the page.  This seems to be an issue with the button itself.  Another attempt will automatically be attempted at the next run.&nbsp;&nbsp;<a href=""" & "https://na68.salesforce.com/" & MatchID & """>Visit Match</a>"
    End If
Else
    ActionResult = False
    Roadblock = "Failed to load the offer IP Docusign page"
End If


Call opNAV(IE, "quit")
Docusign_PressOffer = Array(ActionResult, Roadblock)
End Function
Private Function Docusign_PressReset(MatchID)
Dim Roadblock As String
Dim IE As Object
Dim ButtonTypeID As String
Dim ActionResult As Boolean
Dim FieldList As New Collection
Dim MatchObj As Variant
Dim FieldValue As String

Roadblock = ""
Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/WT_IP_Reset_Docusign?mid=" & MatchID)

IE.Visible = True

'If IsObject(IE.document) Then
If IsObject(IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failureout")) Then
    Roadblock = Roadblock & IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:failureout").innerhtml
End If
'End If

If Roadblock = "" Then
    Debug.Print "No errors, resetting docusign"
    ActionResult = False
    ButtonTypeID = "wt_ip_reset_docusign:SiteTemplate:webform:j_id753:0"
    
    'Set ButtonHolder = IE.document.getelementbyid(ButtonTypeID) 'picks up the desired radio button
    If IsObject(IE.document.getelementbyid(ButtonTypeID)) Then
        Set ButtonHolder = IE.document.getelementbyid(ButtonTypeID) 'picks up the desired radio button
            ButtonHolder.Click 'make sure correct radio button is marked
        Set ButtonHolder = IE.document.getelementbyid("wt_ip_reset_docusign:SiteTemplate:webform:j_id757") ' picks send button
        'Set ButtonHolder = IE.document.getelementbyid("wt_ip_docusign:SiteTemplate:webform:j_id758") ' picks send button
            ButtonHolder.Click 'Sends the docusign
        'IE.Visible = True
        'MsgBox "Just pressed the offer button", , "Debugging"
    End If
End If

Call opNAV(IE, "quit")
Docusign_PressReset = Array(ActionResult, Roadblock)
End Function

Private Sub DocuSign_SendViaMatch_PaperRoadBlock(MatchID As String, Perror As String)
Dim IE As Object
Dim EngagementID As String
Dim FakePAX As Variant
Dim FieldList As New Collection

' this fixes the engagement
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & MatchID)
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & FetchField(IE, "CF00Na0000009s14h_ileinner")(1) & "/e?00N1B00000BLzWU=")
    Call HitSave(IE)
    Call opNAV(IE, "quit")

'send a warning email
FakePAX = PAXbasicInfo("", "", "", 0)

FakePAX(2, 1) = "SOS - Docusign could not be issued"
FakePAX(3, 1) = Perror
FakePAX(3, 1) = "Hello,<br/><br/>Could not issue a docusign for the following match <br/><br/>https://na68.salesforce.com/##<br/><br/>" & FakePAX(3, 1) & "<br/><br/>Thank you,<br/>Andrew<br/>"
FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", MatchID, 1)
FakePAX(39, 2) = MatchID
FakePAX(20, 2) = "0031B00002eGZCa"
FakePAX(1, 1) = ""

Set FieldList = New Collection
Call Send_HTMLEmail(FakePAX, "NoReply", FieldList)

End Sub
Private Sub CheckIn_Missing_Arrival_Date(AssessmentID As String)
Dim IE As Object
Dim FakePAX As Variant
Dim FieldList As New Collection
Dim AssPackage

    FieldList.Add Array("Status", "00Na000000B2KgF_ileinner")
    FieldList.Add Array("Confirmed Date", "00Na000000B2Kf1_ileinner")
    FieldList.Add Array("Last Modified", "LastModifiedBy_ileinner")
    FieldList.Add Array("Engagement", "CF00Na000000B2Kf5_ileinner")
    FieldList.Add Array("Host Name", "CF00Na000000B2KfU_ileinner")
    FieldList.Add Array("Assessment History", "_RelatedEntityHistoryList")
AssPackage = Retrieve_Page_Info(AssessmentID, FieldList)

'send a warning email
FakePAX = PAXbasicInfo("", "", "", 0)

FakePAX(2, 1) = "SOS - CheckIn Missing Actuall Arrival Date"
FakePAX(3, 1) = "Checkin for " & PageInfoF(AssPackage, "Engagement")(0) & " at " & PageInfoF(AssPackage, "Host Name")(0) & " is " & PageInfoF(AssPackage, "Status")(0) & " and was last modified by: " & PageInfoF(AssPackage, "Last Modified")(0)
FakePAX(3, 1) = "Hello,<br/><br/>This check-in is missing the actual arrival date.  This is a critical piece of information that we need to report to the insurance.  If we did not collect this information during a phone call/email/trip we will need to contact the PAX again.  Please make sure to fill in the date on both the assessment and the Engagement.<br/><br/>https://na68.salesforce.com/##<br/><br/>" & FakePAX(3, 1) & "<br/><br/>Thanks!,<br/>Andrew<br/>"
FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", AssessmentID, 1)
FakePAX(39, 2) = AssessmentID
FakePAX(20, 2) = "0031B00002eGZCa"
FakePAX(1, 1) = ""

Set FieldList = New Collection
Call Send_HTMLEmail(FakePAX, "NoReply", FieldList)
'Call opNAV(IE, "quit")

End Sub
Private Function PageInfoS(DataStructure As Variant, TextString As String) As Variant
Dim ComEntries As Collection
Dim LocalValue As Variant
Dim GetID As Boolean

Set ComEntries = Sequencer(TextString, ".")

If ComEntries(ComEntries.count) = "ID" Then
    GetID = True
    ComEntries.Remove ComEntries.count
Else
    GetID = False
End If

If ComEntries.count > 0 Then
    LocalValue = PageInfoF(DataStructure, ComEntries(1))
    If ComEntries.count > 1 Then
        For i = 2 To ComEntries.count
            LocalValue = PageInfoF(LocalValue, ComEntries(i))
            If IsArray(LocalValue) = False Then
                i = 999
            End If
        Next i
    End If
Else
    Debug.Print "No command values found in textstring, returning original data package"
    LocalValue = DataStructure
End If

If GetID Then
    If IsArray(LocalValue) Then
    LocalValue(0) = LocalValue(1)
    Else
    LocalValue = Array("", "")
    End If
End If

PageInfoS = LocalValue
End Function
Private Function Sequencer(TextString As String, ParsingCharacter As String) As Collection
Dim KeepLooking As Boolean
Dim CommandsFound As New Collection
Dim CurrentLocation As Double
Dim NextLocation As Double
Dim cSegment As String
Dim SafetyCounter As Integer
Dim ParseLength As Double

ParseLength = Len(ParsingCharacter)

CurrentLocation = 1
KeepLooking = True
Do While KeepLooking And SafetyCounter < 50
    SafetyCounter = SafetyCounter = 1
    NextLocation = InStr(CurrentLocation, TextString, ParsingCharacter, vbTextCompare)
    If NextLocation > 0 Then
        cSegment = Mid(TextString, CurrentLocation, NextLocation - CurrentLocation)
        CommandsFound.Add cSegment
        CurrentLocation = NextLocation + ParseLength
    Else
        CommandsFound.Add Mid(TextString, CurrentLocation, Len(TextString) - CurrentLocation + 1)
        KeepLooking = False
    End If
Loop

Set Sequencer = CommandsFound
End Function
Private Function InfoPrinter(OriginalData As Variant) As String
Dim KeepGoing As Boolean
Dim Table As New Collection
Dim cOutput As New Collection
Dim aString As String
Dim bString As String
Dim DataModel As Variant
Dim BreakPoint As Double
Dim SafetyCounter As Double

DataModel = OriginalData

KeepGoing = True
BreakPoint = 0
SafetyCounter = 0
Do While KeepGoing And SafetyCounter < 10000
    Set cOutput = InfoPrinter_Cutter(DataModel)
    
    Call InfoPrinter_Sewer(Table, cOutput, BreakPoint)
    
    DataModel = ""
        For i = 1 To Table.count
            If IsArray(Table(i)) Then
                DataModel = Table(i)
                BreakPoint = i - 1
                Table.Remove i
                i = Table.count + 1
                'Debug.Print "!!!!" & DataModel(0)
            Else
                'Debug.Print Table(i)
            End If
        Next i
            
    If IsArray(DataModel) = False Then
        KeepGoing = False
        'MsgBox "stop now", , "Debugging!"
    End If
    SafetyCounter = SafetyCounter + 1
Loop

InfoPrinter = Collection2String(Table)
End Function
Private Sub InfoPrinter_Sewer(ByRef ExistingTable As Collection, cOutput As Collection, InsertionPoint As Double)
Dim TempTable As New Collection
Dim ForWord As String

If InsertionPoint = 0 Then
InsertionPoint = ExistingTable.count
End If

For i = 1 To InsertionPoint
    TempTable.Add ExistingTable(i)
Next i

ForWord = Collection2String(TempTable)
Set TempTable = New Collection
TempTable.Add ForWord

If cOutput.count > 0 Then
    For i = 1 To cOutput.count
        TempTable.Add cOutput(i)
    Next i
End If

If InsertionPoint + 1 < ExistingTable.count Then
    For i = InsertionPoint + 1 To ExistingTable.count
        TempTable.Add ExistingTable(i)
    Next i
End If

Set ExistingTable = TempTable
End Sub
Private Function InfoPrinter_Cutter(DataModel As Variant) As Collection
Dim Table As New Collection

 If InfoPrinter_IsRecord(DataModel) Then
        Table.Add "<table style=""border: 2px solid black;""><tr><th>"
        If Len(DataModel(1)) = 15 Then
            Table.Add "<a href=""https://na68.salesforce.com/" & DataModel(1) & """>" & DataModel(0) & "</a>"
        Else
            Table.Add DataModel(0) & " | " & DataModel(1)
        End If
        Table.Add "</th></tr><tr><td>"
        Table.Add DataModel(2)
        Table.Add "</td></tr></table>"
        DataModel = ""
    End If
    
    If InfoPrinter_IsList(DataModel) Then
            Table.Add "<table style=""margin-left: 10px;"">"
        For i = 0 To UBound(DataModel)
            Table.Add "<tr><td>"
            Table.Add DataModel(i)
            Table.Add "</td></tr>"
        Next i
            Table.Add "</table>"
        DataModel = ""
    End If
    
    If IsArray(DataModel) Then 'process as value
        If UBound(DataModel) = 1 Then
            Table.Add "<table style=""margin-left: 10px; margin-right: 10px;"">"
            Table.Add "<tr><td>"
            Table.Add DataModel(0)
            Table.Add "</td>"
            If UBound(DataModel) = 1 Then
                Table.Add "<td>" & DataModel(1) & "</td>"
            End If
            Table.Add "</tr></table>"
        DataModel = ""
        End If
    End If

Set InfoPrinter_Cutter = Table
End Function
Private Function InfoPrinter_IsRecord(vPart As Variant) As Boolean

InfoPrinter_IsRecord = False
If IsArray(vPart) Then
If UBound(vPart) > 1 Then
    If IsArray(vPart(0)) = False Then
    If IsArray(vPart(1)) = False Then
    If IsArray(vPart(2)) Then
        InfoPrinter_IsRecord = True
    End If
    End If
    End If
End If
End If

End Function
Private Function InfoPrinter_IsList(vPart As Variant) As Boolean

InfoPrinter_IsList = False
If IsArray(vPart) Then
    If InfoPrinter_IsRecord(vPart(0)) Then
        InfoPrinter_IsList = True
    End If
End If

End Function
Sub LetterMeetNumber(ByRef sMix As String)
Dim cType As String
Dim lType As String
Dim Chars As New Collection
Dim cLetter As String


lType = "SPC"

For i = 1 To Len(sMix)
    cLetter = Mid(sMix, i, 1)
    cType = Letter_CharacterType(cLetter)
    If lType <> "SPC" And lType <> cType Then
        Chars.Add " " & cLetter
    Else
        Chars.Add cLetter
    End If
    lType = cType
Next i

sMix = Collection2String(Chars)

End Sub
Private Function Letter_CharacterType(SingleCharacter As String) As String
Dim ASCII As Double
Dim cType As String

ASCII = Asc(SingleCharacter)

cType = "PUN"

If ASCII >= 48 And ASCII <= 57 Then
    cType = "NUM"
End If

If ASCII >= 65 And ASCII <= 122 Then
    If ASCII >= 91 And ASCII <= 96 Then
    Else
        cType = "LET"
    End If
End If

If ASCII > 127 Then
    cType = "EXT"
End If

If ASCII = 32 Then
    cType = "SPC"
End If

Letter_CharacterType = cType
End Function
Private Function AddressParser(Address As String) As Variant
Dim Addresslist As New Collection
Dim wString As String
Dim DeCode As Variant
Dim BaseType As Boolean
Dim bType As String
Dim aType As String
Dim dType As String
Dim cWord As String
Dim AddressDictionary As Collection
Dim StreetWords As Collection
Dim tCollect As Collection
Dim aPartsUn As Collection
Dim FinalAddress As Variant

Set AddressDictionary = AddressWordsDictionary()

'Call LetterMeetNumber(Address)
wString = Trim(Replace(Address, ",", " , ", 1, -1, vbTextCompare))
wString = Replace(Address, ", , ", ", ", 1, -1, vbTextCompare)

Set Addresslist = Sequencer(wString, " ")

Set tCollect = New Collection
For i = 1 To Addresslist.count
    If Addresslist(i) <> "" And Addresslist(i) <> " " Then
        tCollect.Add Addresslist(i)
    End If
Next i

Debug.Print Addresslist.count & " vs " & tCollect.count
DeCode = CollectionConverter(tCollect)

For i = 0 To UBound(DeCode)
    aType = ""
    dType = ""
    bType = ""
    cWord = DeCode(i)
    Set aTypes = New Collection
    BaseType = IsNumeric(cWord)
        If BaseType Then
            bType = "n"
            aType = "n"
            If Len(cWord) = 5 Then
                aType = "z"
            End If
        Else
            If cWord = "," Then
                bType = "c"
                aType = "c"
            Else
                If cWord = "" Then
                    bType = "s"
                Else
                    bType = "w"
                End If
            End If
        End If
        
    If bType = "w" Then
        aType = "w"
        For j = 1 To AddressDictionary.count
            If UCase(cWord) = UCase(AddressDictionary(j)(2)) Then
                aType = AddressDictionary(j)(1)
                dType = AddressDictionary(j)(0)
                j = AddressDictionary.count
            End If
            If UCase(cWord) = UCase(AddressDictionary(j)(3)) Then
                aType = AddressDictionary(j)(1)
                dType = AddressDictionary(j)(0)
                j = AddressDictionary.count
            End If
        Next j
    End If
    
    DeCode(i) = Array(cWord, Len(DeCode(i)), Array(Array("Basic Type", "", Array(bType, ""))))
    DeCode(i) = PageInfo_RR(DeCode(i), "Advanced Type", Array(aType, ""))
    DeCode(i) = PageInfo_RR(DeCode(i), "Word Description", Array(dType, ""))
    
    Debug.Print i & " " & cWord & " | " & bType & " | " & aType & " | " & dType
    'Call Print_L2_HTML(DeCode(i))
Next i

FinalAddress = Array(Address, "", Array(Array("Original String", "", Array(Address, ""))))
FinalAddress = PageInfo_RR(FinalAddress, "Parse", DeCode)

Set aPartsUn = New Collection
For i = 0 To UBound(DeCode)
'convert available parts to a list for assignment
    If i = 0 And PageInfoF(DeCode(i), "Basic Type")(0) = "n" Then
        FinalAddress = PageInfo_RR(FinalAddress, "House Number", DeCode(i))
    Else
        aPartsUn.Add DeCode(i)
    End If
Next i



cWord = ""
For i = 0 To UBound(DeCode)
cWord = cWord & PageInfoF(DeCode(i), "Advanced Type")(0)
Next i
Debug.Print cWord
FinalAddress = PageInfo_RR(FinalAddress, "A Summary", Array(cWord, ""))
FinalAddress = PageInfo_RR(FinalAddress, "Parsed", DeCode)

Call AddressParser_ItemAssignment(FinalAddress)

End Function
Private Function Load_Address_Parts() As Variant
Dim Parts As New Collection

Parts.Add Array("H", "Primary House Number")
Parts.Add Array("E", "PreDirectional")
Parts.Add Array("N", "Street Name")
Parts.Add Array("S", "Suffix")
Parts.Add Array("R", "Road Count")
Parts.Add Array("O", "PostDirectional")
Parts.Add Array(",", "Comma1")
Parts.Add Array("U", "Secondary Address Indentifier (Unit)")
Parts.Add Array(",", "Comma2")
Parts.Add Array("C", "City")
Parts.Add Array(",", "Comma3")
Parts.Add Array("T", "State")
Parts.Add Array("Z", "Zip")

Load_Address_Parts = CollectionConverter(Parts)
End Function

Private Function Address_Disector() As Variant
Dim Parts As New Collection

Parts.Add Array(True, "n", "", "H", "Primary House Number")
Parts.Add Array(True, "c", "", ",", "Comma1")
Parts.Add Array(False, "w", "d", "O", "PostDirectional")
Parts.Add Array(False, "n", "", "R", "Road Count")
Parts.Add Array(False, "w", "r", "S", "Suffix")
Parts.Add Array(True, "w", "d", "E", "PreDirectional")

If False Then
    Parts.Add Array("N", "Street Name")
    
    Parts.Add Array("U", "Secondary Address Indentifier (Unit)")
    Parts.Add Array(",", "Comma2")
    Parts.Add Array("C", "City")
    Parts.Add Array(",", "Comma3")
    Parts.Add Array("T", "State")
    Parts.Add Array("Z", "Zip")
End If

Load_Address_Parts = CollectionConverter(Parts)
End Function
Private Function AddressParserV3_Definer(cWord As Variant) As Variant
Dim AddressDictionary As Collection
Dim aType As String
Dim aTypeShort As String
Dim bType As String
Dim standardType As String
Dim wDescript As New Collection

Set AddressDictionary = AddressWordsDictionary()

aType = ""
bType = ""
standardType = ""
cWord = Trim((cWord))

If cWord = "," Then
    aType = "Comma"
    bType = "c"
    aTypeShort = "c"
    standardType = ","
End If

If IsNumeric(cWord) Then
    bType = "n"
    If Len(cWord) = 5 Then
        aType = "Zip"
        aTypeShort = "z"
        standardType = cWord
    Else
        aType = "Number"
        aTypeShort = "n"
        standardType = cWord
    End If
Else 'treat as a word
    bType = "w"
    aType = "Word"
    aTypeShort = "W"
    standardType = cWord
    For i = 1 To AddressDictionary.count
        If UCase((cWord)) = UCase((AddressDictionary(i)(2))) Or UCase((cWord)) = UCase((AddressDictionary(i)(3))) Then
            aType = AddressDictionary(i)(0)
            standardType = AddressDictionary(i)(3)
            aTypeShort = AddressDictionary(i)(2)
        End If
    Next i
End If

wDescript.Add Array("Basic", "", Array(bType, ""))
wDescript.Add Array("Advanced", "", Array(aType, aTypeShort))
wDescript.Add Array("Standard", "", Array(standardType, ""))
wDescript.Add Array("Original", "", Array(cWord, ""))

AddressParserV3_Definer = Array(cWord, UCase(cWord), CollectionConverter(wDescript))
End Function
Function APEv3Workbook(SingleLineAddress As String) As String

APEv3Workbook = PageInfoF(APEv3(SingleLineAddress), "Clarity")(0)

End Function
Private Function APEv3(AddressString As String, Optional HousingType As String = "") As Variant
'############
'## Address Parsing Engine v3
'## - Parse addresses into individual elements to standardize and allow for comparisons.
'############
Dim AdrString As String
Dim wString As String
Dim DeCode As Variant
Dim Addresslist As Collection
Dim cTemp As Collection
Dim Address As Variant
Dim Clarity As New Collection
Dim xCount As Double


AdrString = Replace(AddressString, "-", " - ", 1, , vbBinaryCompare)
If UCase(left(AdrString, 3)) = "ONE" Then
    AdrString = "1" & Right(AdrString, Len(AdrString) - 3) 'this corrects One Test Rd. to 1 Test Road
End If

xCount = 1
Do While xCount > 0 'elaborate loop to filter out '.' Unless it's in a number like Milepost 283.5
    xCount = InStr(1, AdrString, ".", vbTextCompare)
    If xCount > 0 Then
        wString = " "
        If xCount > 1 Then
            If IsNumeric(Mid(AdrString, xCount - 1, 1)) And IsNumeric(Mid(AdrString, xCount + 1, 1)) Then
                wString = "/*\" 'special temporary period character
            End If
        End If
        AdrString = left(AdrString, xCount - 1) & wString & Right(AdrString, Len(AdrString) - xCount)
    End If
Loop

AdrString = Replace(AdrString, "/*\", ".", 1, , vbBinaryCompare) 'this puts the period back if it was part of a number
AdrString = Trim(Replace(AdrString, ",", " , ", 1, -1, vbTextCompare))

Set Addresslist = Sequencer(AdrString, ", ")

Set cTemp = New Collection
cTemp.Add Array("Street", "", Array("", ""))
cTemp.Add Array("Unit", "", Array("", ""))
cTemp.Add Array("City", "", Array("", ""))
cTemp.Add Array("State", "", Array("", ""))
cTemp.Add Array("Zip", "", Array("", ""))
cTemp.Add Array("Original", "", Array(AddressString, ""))
Address = Array(AddressString, "", CollectionConverter(cTemp))

Call APEv3_CityStateZip(Addresslist, Address)


    
Address = PageInfo_RR(Address, "Street", APEv3_StreetAssigner((Addresslist(1)))) 'Analyze and return Street portion
Call APEv3_GreatStandardizer(Address)

'DeCode = APEv3_UnitAnalyzer((Addresslist(2)))
'Address = PageInfo_RR(Address, "Unit", APEv3_UnitAnalyzer((Addresslist(2)))) 'Analyze and return Unit portion
'Need routine for checking red flags like damaged addresses

Set cTemp = New Collection 'Name of Item to add; what goes before the element; add to clarity name
    cTemp.Add Array("Street.Primary House Number", "", True)
    cTemp.Add Array("Street.PreDirectional", " ", False)
    cTemp.Add Array("Street.Street Name", " ", True)
    cTemp.Add Array("Street.Suffix", " ", True)
    cTemp.Add Array("Street.Road Number", " ", True)
    cTemp.Add Array("Street.PostDirectional", " ", True)
    cTemp.Add Array("Unit", ", ", False)
    cTemp.Add Array("City", ", ", True)
    cTemp.Add Array("State", ", ", True)
    cTemp.Add Array("Zip", " ", True)

Set Addresslist = New Collection
    For i = 1 To cTemp.count
    
        AdrString = PageInfoS(Address, (cTemp(i)(0)))(0)
        If AdrString <> "" Then
            If Addresslist.count > 0 Then
                AdrString = cTemp(i)(1) & AdrString
            End If
            
            Addresslist.Add AdrString
            If cTemp(i)(2) = "True" Then
                Clarity.Add AdrString
            End If
        End If
    Next i

AdrString = Collection2String(Addresslist)
Address(0) = AdrString
Address(1) = UCase(AdrString)

AdrString = Collection2String(Clarity)
Address = PageInfo_RR(Address, "Clarity", Array(AdrString, UCase(AdrString)))
Address = PageInfo_RR(Address, "Type", Array(HousingType, ""))

'Debug.Print InfoPrinter(Address)
APEv3 = Address
End Function
Private Sub APEv3_GreatStandardizer(ByRef Address As Variant)
Dim Street As Variant
Dim tVar As Variant
Dim tString As String

Street = PageInfoF(Address, "Street")
If PageInfoF(Street, "Road Number")(0) <> "" Then
    tVar = PageInfoF(Street, "Street Name")
    tVar(0) = "US"
    Street = PageInfo_RR(Street, "Street Name", tVar)
End If

For i = 0 To UBound(Street(2))
    If Street(2)(i)(0) <> "" Then
        tString = tString & " " & Street(2)(i)(2)(0)
    End If
Next i
tString = Trim(tString)
Street(0) = tString

Address = PageInfo_RR(Address, "Street", Street)

End Sub
Private Function APEv3_MatchScore(Address1 As Variant, Address2 As Variant) As Double
Dim Score As New Collection
Dim fScore As Double
Dim vTemp As Variant
Dim PointValues As New Collection
Dim Val1 As String
Dim Val2 As String

    PointValues.Add Array("Street.Primary House Number", 15)
    
    If PageInfoS(Address1, "Street.Road Number")(0) = "" Then
        PointValues.Add Array("Street.Street Name", 15)
    Else
        PointValues.Add Array("Street.Road Number", 15)
    End If
    
    PointValues.Add Array("Street.Suffix", 7)
    PointValues.Add Array("Street.PostDirectional", 8)
    PointValues.Add Array("Unit.Number", 5)
    PointValues.Add Array("City", 10)
    PointValues.Add Array("State", 25)
    PointValues.Add Array("Zip", 15)
    
    
For i = 1 To PointValues.count
    Val1 = UCase((PageInfoS(Address1, (PointValues(i)(0)))(0)))
    Val2 = UCase((PageInfoS(Address2, (PointValues(i)(0)))(0)))
    
    
    If Val1 = Val2 Then
    Debug.Print Val1 & " vs " & Val2 & "  Scores: " & PointValues(i)(1) & " points!"
        Score.Add PointValues(i)(1)
    End If
Next i

For i = 1 To Score.count
    fScore = fScore + Score(i)
Next i

APEv3_MatchScore = fScore
End Function
Private Function APEv3_UnitAnalyzer(rUnit As String) As Variant
Dim cTemp As Collection
Dim DeCode As Variant
Dim tUnit As Variant
Dim uType As New Collection
Dim uNumber As New Collection
Dim sTemp As String

If rUnit <> "" Then 'If a blank unit was pushed then leave this blank
    Set cTemp = Sequencer(rUnit, " ")
    DeCode = CollectionConverter(cTemp)
    
        For i = 0 To UBound(DeCode)
            DeCode(i) = AddressParserV3_Definer(DeCode(i))
            If PageInfoS(DeCode(i), "Advanced")(0) = "Unit Word" Then
                uType.Add DeCode(i)
            Else
                uNumber.Add DeCode(i)
            End If
        Next i
End If

Set cTemp = New Collection
sTemp = ""
If uType.count > 0 Then
    For i = 1 To uType.count
        sTemp = sTemp & uType(i)(0)
    Next i
    cTemp.Add Array("Type", "", Array(sTemp, sTemp, CollectionConverter(uType)))
Else
    cTemp.Add Array("Type", "", Array("", ""))
End If

sTemp = ""
If uNumber.count > 0 Then
    For i = 1 To uNumber.count
        sTemp = sTemp & uNumber(i)(0)
    Next i
    cTemp.Add Array("Number", "", Array(sTemp, sTemp, CollectionConverter(uNumber)))
Else
    cTemp.Add Array("Number", "", Array("", ""))
End If

tUnit = Array("", "", CollectionConverter(cTemp))

sTemp = PageInfoF(tUnit, "Number")(0)
If sTemp <> "" Then
    tUnit(0) = "Unit " & sTemp
    tUnit(1) = sTemp
End If


APEv3_UnitAnalyzer = tUnit
End Function
Private Sub APEv3_CityStateZip(ByRef Addresslist As Collection, ByRef Address As Variant)
'#################
'# This works backwards to identify the Zip, State and then City of the address
'# [X] Add a placeholder for no unit
'# [ ] Repair addressess with excessive commas
'#################
Dim cTemp As Collection
Dim DeCode As Variant
Dim j As Double
Dim CriteriaList As Collection
Dim Criteria As String
Dim KeepLooking As Boolean
Dim MaxCounter As Double
Dim CollectedResults As New Collection
Dim Postal As Boolean
Dim State As Boolean
Dim CL As Double
Dim MatchyMatch As Boolean


    Set CriteriaList = New Collection
    CriteriaList.Add Array("Zip", "Z", False, "", "Zip")
    CriteriaList.Add Array("State", "T", False, "", "State Name")
    'CriteriaList.Add Array("Dump Stack", "", False, "", "Unmeetable Criteria")

j = Addresslist.count 'list of all address phrases to work backwards from
KeepLooking = True
MaxCounter = 0
CL = 1
Do While KeepLooking And MaxCounter < 20

DeCode = CollectionConverter(Sequencer((Addresslist(j)), " "))

    Set cTemp = New Collection
    For i = 0 To UBound(DeCode)
        If DeCode(i) <> "" Then 'This strips out any weird blank words
            cTemp.Add AddressParserV3_Definer(DeCode(i)) 'THis looks up the current word
        End If
    Next i
    DeCode = CollectionConverter(cTemp)
    
    Set cTemp = New Collection
    
    For i = 0 To UBound(DeCode)
        Criteria = CriteriaList(CL)(4)
        LocationToUse = UBound(DeCode) - i
        If Criteria <> "" And MatchyMatch = False Then
            sTemp = PageInfoF(DeCode(LocationToUse), "Advanced")(0)
            'Debug.Print "Advanced check: " & Criteria & " | " & sTemp
            If Criteria = sTemp Then
                DeCode(LocationToUse)(0) = WorksheetFunction.Proper(PageInfoF(DeCode(LocationToUse), "Standard")(0))
                CollectedResults.Add Array(CriteriaList(CL)(0), CriteriaList(CL)(1), DeCode(LocationToUse))
                MatchyMatchy = True
                CL = CL + 1
            End If
        End If
    Next i
    j = j - 1
    
    If CL > CriteriaList.count Then 'Once the Zip and State have been found the
        'Debug.Print "All Criteria Found"
        KeepLooking = False
        'CollectedResults.Add Array("City", "C", Array(WorksheetFunction.Proper((Addresslist(j))), UCase((Addresslist(j)))))
        DeCode = Array("City", "C", AddressParserV3_Definer((Addresslist(j))))
        DeCode(2)(0) = WorksheetFunction.Proper(DeCode(2)(0))
        'Debug.Print "|" & DeCode(2)(0) & "|"
        CollectedResults.Add DeCode
        
        j = j - 1
        If j > 1 Then
            CollectedResults.Add Array("Unit", "U", APEv3_UnitAnalyzer((Addresslist(j))))
        Else
            CollectedResults.Add Array("Unit", "U", APEv3_UnitAnalyzer(""))
        End If
    End If
    
    If j < 1 Then
        KeepLooking = False
    End If
    
    MaxCounter = MaxCounter + 1
Loop

For i = 1 To CollectedResults.count
    DeCode = CollectedResults(i)(2)
        If CollectedResults(i)(0) = "State" Then
            DeCode(0) = UCase((DeCode(0)))
        End If
    Address = PageInfo_RR(Address, (CollectedResults(i)(0)), DeCode)
Next i

End Sub
Private Function APEv3_StreetAssigner(Street As String) As Variant
Dim Addresslist As Collection
Dim cTemp As Collection
Dim DeCode As Variant
Dim unLow As Double
Dim unHigh As Double
Dim Criteria As String
Dim sTemp As String
Dim LocationToUse As Double
Dim MatchyMatchy As Boolean

'Debug.Print "Analyzing: " & Street
Set cTemp = Sequencer(Street, " ")
DeCode = CollectionConverter(cTemp)

Set cTemp = New Collection
For i = 0 To UBound(DeCode)
    If DeCode(i) <> "" Then 'This strips out any weird blank words from the street sentence
        cTemp.Add AddressParserV3_Definer(DeCode(i))
    End If
Next i


DeCode = CollectionConverter(cTemp)

Set Addresslist = New Collection
    Addresslist.Add Array("Primary House Number", "H", True, "n", "")
    Addresslist.Add Array("PreDirectional", "E", True, "", "Direction Word")
    Addresslist.Add Array("PostDirectional", "O", False, "", "Direction Word")
    Addresslist.Add Array("Road Number", "R", False, "n", "")
    Addresslist.Add Array("Suffix", "S", False, "", "Road Word")
    Addresslist.Add Array("Street Name", "N", True, "", "")

unLow = 0
unHigh = UBound(DeCode)

'Debug.Print InfoPrinter(Array("Address", "", DeCode))

Set cTemp = New Collection
For i = 1 To Addresslist.count
    'Debug.Print "Starting check for " & AddressList(i)(0)
    MatchyMatchy = False
    If Addresslist(i)(2) = "True" Then
        LocationToUse = unLow
        'Debug.Print "Going Low: " & DeCode(LocationToUse)(0)
    Else
        LocationToUse = unHigh
        'Debug.Print "Going High: " & DeCode(LocationToUse)(0)
    End If
    
    Criteria = Addresslist(i)(3)
    If Criteria <> "" Then
        sTemp = PageInfoF(DeCode(LocationToUse), "Basic")(0)
        'Debug.Print Criteria & " | " & sTemp
        If Criteria = sTemp Then
            cTemp.Add Array(Addresslist(i)(0), Addresslist(i)(1), DeCode(LocationToUse))
            MatchyMatchy = True
        End If
    End If
    Criteria = Addresslist(i)(4)
    If Criteria <> "" And MatchyMatch = False Then
        sTemp = PageInfoF(DeCode(LocationToUse), "Advanced")(0)
        'Debug.Print Criteria & " | " & sTemp
        If Criteria = sTemp Then
            DeCode(LocationToUse)(0) = WorksheetFunction.Proper(PageInfoF(DeCode(LocationToUse), "Standard")(0))
            cTemp.Add Array(Addresslist(i)(0), Addresslist(i)(1), DeCode(LocationToUse))
            MatchyMatchy = True
        End If
    End If
    
    If MatchyMatchy Then
        If Addresslist(i)(2) = "True" Then
            unLow = unLow + 1
        Else
            unHigh = unHigh - 1
        End If
    Else 'We still want to add the address part, but add it as blank
    
        If i = Addresslist.count Then 'what remains is the steet name and it should be combined together
            sTemp = ""
            For j = unLow To unHigh
                If DeCode(j)(0) <> "-" Then
                    sTemp = sTemp & " " & DeCode(j)(0)
                End If
            Next j
            If sTemp <> "" Then
                sTemp = Right(sTemp, Len(sTemp) - 1)
            End If
            sTemp = WorksheetFunction.Proper(sTemp)
            cTemp.Add Array(Addresslist(i)(0), Addresslist(i)(1), Array(sTemp, ""))
        Else
            cTemp.Add Array(Addresslist(i)(0), Addresslist(i)(1), Array("", ""))
        End If
    End If
    

Next i

'###Rearrange the street words in the right order
cTemp.Add cTemp(cTemp.count), , , 2
cTemp.Remove (cTemp.count)
cTemp.Add cTemp(4)
cTemp.Remove (4)

sTemp = ""

For i = 1 To cTemp.count
    'Debug.Print cTemp(i)(0) & " | " & cTemp(i)(2)(0)
    If cTemp(i)(2)(0) <> "" Then
        sTemp = sTemp & " " & cTemp(i)(2)(0)
   End If
Next i

APEv3_StreetAssigner = Array(Trim(sTemp), "", CollectionConverter(cTemp))

End Function

Private Sub SEVIS_Errors_S2129(EngagementID As String)
'## Corrects SEVIS error S2129 - SOA Update :Site of activity not found
'## This is caused by matches that need to be sent to SEVIS but don't have
'## SEVIS Update EV - Site Of Activity - Add box checked on match
'## To correct, find most recent match, check SOA add box and press send2sevis on engagement

Dim PAXn As Variant
Dim Matches As Variant
Dim EligibleMatches As New Collection
Dim PrimarySOA As Boolean
Dim FakePAX As Variant
Dim Readout As New Collection
Dim StatusConfirmation As String

PAXn = SEVIS_CollectInfo(EngagementID)

Matches = PageInfoF(PAXn, "Matches")

PrimarySOA = False
For i = 0 To UBound(Matches)
    If PageInfoF(Matches(i), "Stage")(0) = "Confirmed" Then
        EligibleMatches.Add Array(CDate(PageInfoF(Matches(i), "Created Date")(0)), Matches(i))
    End If
    If PageInfoF(Matches(i), "Is Primary SOA")(0) = "True" Then
        PrimarySOA = True
    End If
Next i

If EligibleMatches.count > 0 Then
    Matches = MergeSort(EligibleMatches)
    
    For i = 0 To UBound(Matches)
        Debug.Print Matches(i)(1)(0)
    Next i
    
    
    Dim TargetMatch As Variant
    TargetMatch = Matches(UBound(Matches))(1)


    Dim IE As Object
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & TargetMatch(1) & "/e?00Na000000B2eHZ=1")
    Call HitSave(IE)
    Call opNAV(IE, "nav", "https://c.na68.visual.force.com/apex/SendToSevis?scontrolCaching=1&id=" & PAXn(1)) 'Hit Send2SEVIS
    Call opNAV(IE, "nav", "https://na68.salesforce.com/" & PAXn(1))
    StatusConfirmation = FetchField(IE, "00Na000000B2mEA_ileinner")(1)
    Call opNAV(IE, "quit")
    If StatusConfirmation = "1" Then
        StatusConfirmation = "Successfull"
    Else
        StatusConfirmation = "Failed"
    End If

Else
    Debug.Print "PAX has no eligible matches"
    StatusConfirmation = "Failed - PAX has no Matches"
End If


If EligibleMatches.count > 0 Then
    Readout.Add "<table>"
    For i = 0 To UBound(TargetMatch(2))
        Readout.Add "<tr><td>" & TargetMatch(2)(i)(0) & "</td><td>" & TargetMatch(2)(i)(2)(0) & "</td></tr>"
    Next i
    Readout.Add "</table>"
Else
    Readout.Add "<br/>This PAX had no eligible matches.<br/><br/>"
End If

FakePAX = PAXbasicInfo("", "", "", 0)

FakePAX(2, 1) = "SOS - Sevis Error #S2129 - " & StatusConfirmation
For i = 1 To Readout.count
    FakePAX(3, 1) = FakePAX(3, 1) & Readout(i)
Next i
FakePAX(3, 1) = "Hello,<br/><br/>The following match should have the SOA Add box checked<br/><br/>https://na68.salesforce.com/##<br/><br/>" & FakePAX(3, 1) & "<br/><br/>Thank you,<br/>Andrew<br/>"
FakePAX(3, 1) = Replace(FakePAX(3, 1), "##", EngagementID, 1)
FakePAX(39, 2) = EngagementID
FakePAX(20, 2) = "0031B00002eGZCa"
FakePAX(1, 1) = ""

Set Readout = New Collection
Call Send_HTMLEmail(FakePAX, "NoReply", Readout)

End Sub

Private Function Sort_Merge(ListA As Variant, ListB As Variant) As Variant
Dim a As Long
Dim b As Long
Dim SortedList As New Collection
Dim ItemsRemaining As Boolean
Dim bLoop As Boolean

b = 0
a = 0
ItemsRemaining = True
'Debug.Print UBound(ListA) & " vs " & UBound(ListB)

Do While ItemsRemaining
    If b > UBound(ListB) Then
        SortedList.Add ListA(a)
        a = a + 1
    Else
        If a > UBound(ListA) Then
            SortedList.Add ListB(b)
            b = b + 1
        Else
            If ListA(a)(0) > ListB(b)(0) Then
            bLoop = True
                Do While bLoop
                    If ListA(a)(0) > ListB(b)(0) Then
                        SortedList.Add ListB(b)
                        b = b + 1
                        bLoop = False
                        
                        If b > UBound(ListB) Then
                        bLoop = False
                        End If
                    End If
                Loop
            Else
                SortedList.Add ListA(a)
                a = a + 1
            End If
        End If
    End If
    'Debug.Print "(" & a & b & ") sorted " & SortedList(SortedList.count)(0)
    If a > UBound(ListA) And b > UBound(ListB) Then
        ItemsRemaining = False
    End If
Loop

Sort_Merge = CollectionConverter(SortedList)
End Function
Function MergeSort(List As Collection) As Variant
Dim UnsortedList As New Collection
Dim StillWorking As Boolean
Dim CombinedList As Variant
Dim Counter As Long
Dim TempValue As Variant

For i = 1 To List.count
    UnsortedList.Add Array(List(i))
Next i

StillWorking = True
Counter = 0
Do While StillWorking And Counter < 999
    'Debug.Print "Sets remaining: " & UnsortedList.count
    If UnsortedList.count > 1 Then
        TempValue = Sort_Merge(UnsortedList(1), UnsortedList(2))
        UnsortedList.Remove 1
        UnsortedList.Remove 1
        UnsortedList.Add TempValue
    Else
        StillWorking = False
    End If
    Counter = Counter + 1
    'Debug.Print "sorting counter = " & Counter
Loop

MergeSort = UnsortedList(1)
End Function

Private Function PAX_NameBuilder() As Variant
Dim First As New Collection
Dim Last As New Collection
Dim NameSet As Variant
Dim Temp As Variant
Dim Gender As String

Gender = Rando_Number(0, 1)

If Gender = 1 Then
    First.Add "Ryker"
    First.Add "Carlos"
    First.Add "Maxwell"
    First.Add "Kingston"
    First.Add "Ivan"
    First.Add "Maddox"
    First.Add "Juan"
    First.Add "Ashton"
    First.Add "Jayce"
    First.Add "Rowan"
    First.Add "Kaiden"
    First.Add "Giovanni"
    First.Add "Eric"
    First.Add "Jesus"

    First.Add "Xander"
    First.Add "Timothy"
    First.Add "Victor"
    First.Add "Bryce"
    First.Add "Finn"
    First.Add "Brantley"
    First.Add "Edward"
    First.Add "Abraham"
    First.Add "Patrick"
    First.Add "Grant"
    First.Add "Karter"
    First.Add "Hayden"
    First.Add "Richard"
    First.Add "Miguel"
    First.Add "Joel"
    First.Add "Gael"
    First.Add "Tucker"
    First.Add "Rhett"
    First.Add "Avery"
    First.Add "Steven"
    First.Add "Graham"
    First.Add "Kaleb"
    First.Add "Jasper"
    First.Add "Jesse"
    First.Add "Matteo"
    First.Add "Dean"
    First.Add "Zayden"
    First.Add "Preston"
    First.Add "August"
    First.Add "Oscar"
    First.Add "Jeremy"
    First.Add "Alejandro"
    First.Add "Marcus"
    First.Add "Dawson"
    First.Add "Lorenzo"
    First.Add "Messiah"
    First.Add "Zion"
    First.Add "Maximus"
    First.Add "River"
    First.Add "Zane"
    First.Add "Mark"
    First.Add "Brooks"
    First.Add "Nicolas"
    First.Add "Paxton"
    First.Add "Judah"
    First.Add "Emiliano"
    First.Add "Kaden"
    First.Add "Bryan"
    First.Add "Kyle"
    First.Add "Myles"
    First.Add "Peter"
    First.Add "Charlie"
    First.Add "Kyrie"
    First.Add "Thiago"
    First.Add "Brian"
    First.Add "Kenneth"
    First.Add "Andres"

    First.Add "Derek"
    First.Add "Josue"
    First.Add "Cayden"
    First.Add "Holden"
    First.Add "Griffin"
    First.Add "Arthur"
    First.Add "Leon"
    First.Add "Felix"
    First.Add "Remington"
    First.Add "Jake"
    First.Add "Killian"
    First.Add "Clayton"
    First.Add "Sean"
    First.Add "Adriel"
    First.Add "Riley"
    First.Add "Archer"
    First.Add "Legend"
    First.Add "Erick"
    First.Add "Enzo"
    First.Add "Corbin"
    First.Add "Francisco"
    First.Add "Dallas"
    First.Add "Emilio"
    First.Add "Gunner"
    First.Add "Simon"
    First.Add "Andre"
    First.Add "Walter"
    First.Add "Damien"
    First.Add "Chance"
    First.Add "Phoenix"
    First.Add "Colt"
    First.Add "Tanner"
    First.Add "Stephen"
    First.Add "Kameron"
    First.Add "Tobias"
    First.Add "Manuel"
    First.Add "Amari"
    First.Add "Emerson"
    First.Add "Louis"
    First.Add "Cody"
    First.Add "Finley"
    First.Add "Iker"
    First.Add "Martin"
    First.Add "Rafael"
    First.Add "Nash"
    First.Add "Beckham"
    First.Add "Cash"
    First.Add "Karson"
    First.Add "Rylan"
    First.Add "Reid"
    First.Add "Theo"
    First.Add "Ace"
    First.Add "Eduardo"
    First.Add "Spencer"
    First.Add "Raymond"
    First.Add "Maximiliano"
    First.Add "Anderson"
    First.Add "Ronan"
    First.Add "Lane"
    First.Add "Cristian"
    First.Add "Titus"
    First.Add "Travis"
    First.Add "Jett"

    First.Add "Seth"
    First.Add "Jeffrey"
    First.Add "Tyson"
    First.Add "Jase"
    First.Add "Desmond"
    First.Add "Caiden"
    First.Add "Gage"
    First.Add "Atlas"
    First.Add "Major"
    First.Add "Devin"
    First.Add "Edwin"
    First.Add "Angelo"
    First.Add "Orion"
    First.Add "Conner"
    First.Add "Julius"
    First.Add "Marco"
    First.Add "Jensen"
    First.Add "Daxton"
    First.Add "Peyton"
    First.Add "Zayn"
    First.Add "Collin"
    First.Add "Jaylen"
    First.Add "Dakota"
    First.Add "Prince"
    First.Add "Johnny"
    First.Add "Kayson"
    First.Add "Cruz"
    First.Add "Hendrix"
    First.Add "Atticus"
    First.Add "Troy"
    First.Add "Kane"
    First.Add "Edgar"
    First.Add "Sergio"
    First.Add "Kash"
    First.Add "Marshall"
    First.Add "Johnathan"
    First.Add "Romeo"
    First.Add "Shane"
    First.Add "Warren"
    First.Add "Joaquin"
    First.Add "Wade"
    First.Add "Leonel"
    First.Add "Trevor"
    First.Add "Dominick"
    First.Add "Muhammad"
    First.Add "Erik"
    First.Add "Odin"
    First.Add "Quinn"
    First.Add "Jaxton"
    First.Add "Dalton"
    First.Add "Nehemiah"
    First.Add "Frank"
    First.Add "Grady"
    First.Add "Gregory"
    First.Add "Andy"
    First.Add "Solomon"
    First.Add "Malik"
    First.Add "Rory"

    First.Add "Roberto"
    First.Add "Lennox"
    First.Add "Hayes"
    First.Add "Finnegan"
    First.Add "Nasir"
    First.Add "Kade"
    First.Add "Nico"
    First.Add "Emanuel"
    First.Add "Landen"
    First.Add "Moises"
    First.Add "Ruben"
    First.Add "Hugo"
    First.Add "Abram"
    First.Add "Adan"
    First.Add "Khalil"
    First.Add "Zaiden"
    First.Add "Augustus"
    First.Add "Marcos"
    First.Add "Philip"
    First.Add "Phillip"
    First.Add "Cyrus"
    First.Add "Esteban"
    First.Add "Braylen"
    First.Add "Albert"
    First.Add "Bruce"
    First.Add "Kamden"
    First.Add "Lawson"
    First.Add "Jamison"
    First.Add "Sterling"
    First.Add "Damon"
    First.Add "Gunnar"
    First.Add "Kyson"
    First.Add "Luka"
    First.Add "Franklin"
    First.Add "Ezequiel"
    First.Add "Pablo"
    First.Add "Derrick"
    First.Add "Zachariah"
    First.Add "Cade"
    First.Add "Jonas"
    First.Add "Dexter"
    First.Add "Kolton"
    First.Add "Remy"
    First.Add "Hank"
    First.Add "Tate"
    First.Add "Trenton"
    First.Add "Kian"
    First.Add "Drew"
    First.Add "Mohamed"
    First.Add "Dax"
    First.Add "Rocco"
    First.Add "Bowen"

    First.Add "Ariel"
    First.Add "Enrique"
    First.Add "Donald"
    First.Add "Chandler"
    First.Add "Asa"
    First.Add "Eden"
    First.Add "Davis"
    First.Add "Keith"
    First.Add "Frederick"
    First.Add "Rowen"
    First.Add "Lawrence"
    First.Add "Leonidas"
    First.Add "Aden"
    First.Add "Julio"
    First.Add "Darius"
    First.Add "Johan"
    First.Add "Deacon"
    First.Add "Cason"
    First.Add "Danny"
    First.Add "Nikolai"
    First.Add "Taylor"
    First.Add "Alec"
    First.Add "Royal"
    First.Add "Armani"
    First.Add "Kieran"
    First.Add "Luciano"
    First.Add "Omari"
    First.Add "Rodrigo"
    First.Add "Arjun"
    First.Add "Ahmed"
    First.Add "Brendan"
    First.Add "Cullen"
    First.Add "Raul"
    First.Add "Raphael"
    First.Add "Ronin"
    First.Add "Brock"
    First.Add "Pierce"
    First.Add "Alonzo"
    First.Add "Casey"

    First.Add "Quentin"
    First.Add "Sam"
    First.Add "Lewis"
    First.Add "Tony"
    First.Add "Uriah"
    First.Add "Dennis"
    First.Add "Moshe"
    First.Add "Isaias"
    First.Add "Braden"
    First.Add "Quinton"
    First.Add "Cannon"
    First.Add "Ayaan"
    First.Add "Mathew"
    First.Add "Kellan"
    First.Add "Niko"
    First.Add "Edison"
    First.Add "Izaiah"
    First.Add "Jerry"
    First.Add "Gustavo"
    First.Add "Jamari"
    First.Add "Marvin"
    First.Add "Mauricio"
    First.Add "Ahmad"
    First.Add "Mohammad"
    First.Add "Justice"
    First.Add "Trey"
    First.Add "Elian"
    First.Add "Mohammed"
    First.Add "Sincere"
    First.Add "Yusuf"
    First.Add "Arturo"
    First.Add "Callen"
    First.Add "Rayan"
    First.Add "Keaton"
    First.Add "Wilder"
    First.Add "Mekhi"
    First.Add "Memphis"
    First.Add "Cayson"
    First.Add "Conrad"
    First.Add "Kaison"
    First.Add "Kyree"
    First.Add "Soren"
    
    First.Add "Jalen"
    First.Add "Santino"
    First.Add "Case"
    First.Add "Leonard"
    First.Add "Alvin"
    First.Add "Issac"
    First.Add "Bo"
    First.Add "Quincy"
    First.Add "Mack"
    First.Add "Samson"
    First.Add "Rex"
    First.Add "Alberto"
    First.Add "Callum"
    First.Add "Curtis"
    First.Add "Hezekiah"
    First.Add "Finnley"
    First.Add "Briggs"
    First.Add "Kamari"
    First.Add "Zeke"
    First.Add "Raylan"
    First.Add "Neil"
    First.Add "Titan"
    First.Add "Julien"
    First.Add "Kellen"
    First.Add "Devon"
    First.Add "Kylan"
    First.Add "Roger"
    First.Add "Axton"
    First.Add "Carl"
    First.Add "Douglas"
    First.Add "Larry"
    First.Add "Crosby"
    First.Add "Fletcher"
    First.Add "Makai"
    First.Add "Nelson"

    First.Add "Orlando"
    First.Add "Kingsley"
    First.Add "Kaysen"
    First.Add "Sylas"
    First.Add "Trent"
    First.Add "Ramon"
    First.Add "Boston"
    First.Add "Lucca"
    First.Add "Noe"
    First.Add "Jagger"
    First.Add "Reyansh"
    First.Add "Vihaan"
    First.Add "Randy"
    First.Add "Thaddeus"
    First.Add "Lennon"
    First.Add "Kannon"
    First.Add "Kohen"
    First.Add "Tristen"
    First.Add "Valentino"
    First.Add "Maxton"
    First.Add "Salvador"
    First.Add "Abdiel"
    First.Add "Langston"
    First.Add "Rohan"
    First.Add "Kristopher"
    First.Add "Yosef"
    First.Add "Rayden"
    First.Add "Lee"
    First.Add "Callan"
    First.Add "Tripp"
    First.Add "Deandre"
    First.Add "Joe"
    First.Add "Morgan"
    First.Add "Dariel"
    First.Add "Colten"
    First.Add "Reese"
    First.Add "Jedidiah"
    First.Add "Ricky"
    First.Add "Bronson"
    First.Add "Terry"
    First.Add "Eddie"
    First.Add "Jefferson"
    First.Add "Lachlan"
    First.Add "Layne"
 
    First.Add "Leandro"
    First.Add "Samir"
    First.Add "Jaziel"
    First.Add "Magnus"
    First.Add "Abdullah"
    First.Add "Yousef"
    First.Add "Branson"
    First.Add "Jadiel"
    First.Add "Jaxen"
    First.Add "Layton"
    First.Add "Franco"
    First.Add "Ben"
    First.Add "Grey"
    First.Add "Kelvin"
    First.Add "Chaim"
    First.Add "Demetrius"
    First.Add "Blaine"
    First.Add "Ridge"
    First.Add "Colson"
    First.Add "Melvin"
    First.Add "Anakin"
    First.Add "Aryan"
    First.Add "Lochlan"
    First.Add "Jon"
    First.Add "Canaan"
    First.Add "Dash"
    First.Add "Zechariah"
    First.Add "Alonso"
    First.Add "Otis"
    First.Add "Zaire"

    First.Add "Fox"
    First.Add "Jamie"
    First.Add "Rey"
    First.Add "Zaid"
    First.Add "Allan"
    First.Add "Emery"
    First.Add "Gannon"
    First.Add "Joziah"
    First.Add "Rodney"
    First.Add "Juelz"
    First.Add "Sonny"
    First.Add "Terrance"
    First.Add "Zyaire"
    First.Add "Augustine"
    First.Add "Cory"
    First.Add "Felipe"
    First.Add "Aron"
    First.Add "Jacoby"
    First.Add "Harlan"
    First.Add "Marc"
    First.Add "Bobby"
    First.Add "Joey"
    First.Add "Anson"
    First.Add "Huxley"
    First.Add "Marlon"
    First.Add "Anders"
    First.Add "Guillermo"
    First.Add "Payton"
    First.Add "Castiel"
    First.Add "Damari"
    First.Add "Shepherd"
    First.Add "Azariah"
    First.Add "Harold"
    First.Add "Harper"
    First.Add "Henrik"
    First.Add "Houston"
    First.Add "Kairo"
    First.Add "Willie"
    First.Add "Elisha"
    First.Add "Ameer"
    First.Add "Emory"
    First.Add "Skylar"
    First.Add "Sutton"
    First.Add "Alfonso"
    First.Add "Brentley"
    First.Add "Toby"
    First.Add "Blaze"
    First.Add "Eugene"
    First.Add "Shiloh"
    First.Add "Wayne"
    First.Add "Darian"
    First.Add "Gordon"
    First.Add "London"
    First.Add "Bodie"
    First.Add "Jordy"
    First.Add "Jermaine"
    First.Add "Denver"
    First.Add "Gerald"
    First.Add "Merrick"
    First.Add "Musa"

    First.Add "Thatcher"
    First.Add "Landry"
    First.Add "Rene"
    First.Add "Westley"
    First.Add "Miller"
    First.Add "Alvaro"
    First.Add "Cristiano"
    First.Add "Eliseo"
    First.Add "Ephraim"
    First.Add "Adrien"
    First.Add "Jerome"
    First.Add "Khalid"
    First.Add "Aydin"
    First.Add "Mayson"
    First.Add "Alfred"
    First.Add "Duncan"
    First.Add "Junior"
    First.Add "Kendall"
    First.Add "Zavier"
    First.Add "Koda"
    First.Add "Maison"
    First.Add "Caspian"
    First.Add "Maxim"
    First.Add "Kace"
    First.Add "Zackary"
    First.Add "Rudy"
    First.Add "Coleman"
    First.Add "Keagan"
    First.Add "Kolten"
    First.Add "Maximo"
    First.Add "Dario"
    First.Add "Davion"
    First.Add "Kalel"
    First.Add "Briar"
    First.Add "Jairo"
    First.Add "Misael"
    First.Add "Rogelio"
    First.Add "Terrell"
    First.Add "Heath"
    First.Add "Micheal"
    First.Add "Wesson"
    First.Add "Aaden"

    First.Add "Dimitri"
    First.Add "Keenan"
    First.Add "Van"
    First.Add "Achilles"
    First.Add "Channing"
    First.Add "Ishaan"
    First.Add "Wells"
    First.Add "Benton"
    First.Add "Lamar"
    First.Add "Nova"
    First.Add "Yahya"
    First.Add "Dilan"
    First.Add "Gibson"
    First.Add "Camdyn"
    First.Add "Ulises"
    First.Add "Alexzander"
    First.Add "Valentin"
    First.Add "Shepard"
    First.Add "Alistair"
    First.Add "Eason"
    First.Add "Kaiser"
    First.Add "Leroy"
    First.Add "Zayd"
    First.Add "Camilo"
    First.Add "Markus"
    First.Add "Foster"
    First.Add "Davian"
    First.Add "Dwayne"
    First.Add "Jabari"
    First.Add "Judson"
    First.Add "Koa"
    First.Add "Yehuda"
    First.Add "Lyric"
    First.Add "Tristian"
    First.Add "Agustin"
    First.Add "Bridger"
    First.Add "Vivaan"
    First.Add "Brayson"
    First.Add "Emmet"
    First.Add "Marley"
    First.Add "Mike"
    First.Add "Nickolas"
    First.Add "Kenny"
    First.Add "Leif"
    First.Add "Bjorn"
    First.Add "Ignacio"
    First.Add "Rocky"
    First.Add "Chad"
    First.Add "Gatlin"
    First.Add "Greysen"
    First.Add "Kyng"
    First.Add "Randall"
    First.Add "Reign"
    First.Add "Vaughn"
    First.Add "Jessie"
    First.Add "Louie"
    First.Add "Shmuel"
    First.Add "Zahir"
    First.Add "Ernest"
    First.Add "Javon"
    First.Add "Khari"
    First.Add "Reagan"
    First.Add "Avi"
    First.Add "Ira"
    First.Add "Ledger"
    First.Add "Simeon"
    First.Add "Yadiel"
    First.Add "Maddux"
    First.Add "Seamus"
    First.Add "Jad"
    First.Add "Jeremias"
    First.Add "Kylen"
    First.Add "Rashad"
    First.Add "Santos"
    First.Add "Cedric"
    First.Add "Craig"
    First.Add "Dominique"
    First.Add "Gianluca"
    First.Add "Jovanni"
    First.Add "Bishop"
    First.Add "Brenden"
    First.Add "Anton"
    First.Add "Camron"
    First.Add "Giancarlo"
    First.Add "Lyle"
    First.Add "Alaric"
    First.Add "Decker"
    First.Add "Eliezer"
    First.Add "Ramiro"
    First.Add "Yisroel"
    First.Add "Howard"
    First.Add "Jaxx"
Else
   
    First.Add "Stella"
    First.Add "Hazel"
    First.Add "Ellie"
    First.Add "Paisley"
    First.Add "Audrey"
    First.Add "Skylar"
    First.Add "Violet"
    First.Add "Claire"
    First.Add "Bella"
    First.Add "Aurora"
    First.Add "Lucy"
    First.Add "Anna"
    First.Add "Samantha"
    First.Add "Caroline"
    First.Add "Genesis"
    First.Add "Aaliyah"
    First.Add "Kennedy"
    First.Add "Kinsley"
    First.Add "Allison"
    First.Add "Maya"
    First.Add "Sarah"
    First.Add "Madelyn"
    First.Add "Adeline"
    First.Add "Alexa"
    First.Add "Ariana"
    First.Add "Elena"
    First.Add "Gabriella"
    First.Add "Naomi"
    First.Add "Alice"
    First.Add "Sadie"
    First.Add "Hailey"
    First.Add "Eva"
    First.Add "Emilia"
    First.Add "Autumn"
    First.Add "Quinn"
    First.Add "Nevaeh"
    First.Add "Piper"
    First.Add "Ruby"
    First.Add "Serenity"
    First.Add "Willow"
    First.Add "Everly"
    First.Add "Cora"
    First.Add "Kaylee"
    First.Add "Lydia"
    First.Add "Aubree"
    First.Add "Arianna"
    First.Add "Eliana"
    First.Add "Peyton"
    First.Add "Melanie"
    First.Add "Gianna"
    First.Add "Isabelle"
    First.Add "Julia"
    First.Add "Valentina"
    First.Add "Nova"
    First.Add "Clara"
    First.Add "Vivian"
    First.Add "Reagan"
    First.Add "Mackenzie"
    First.Add "Madeline"
    First.Add "Brielle"
    First.Add "Delilah"

    First.Add "Brianna"
    First.Add "Raelynn"
    First.Add "Bailey"
    First.Add "Mary"
    First.Add "Athena"
    First.Add "Andrea"
    First.Add "Leilani"
    First.Add "Jasmine"
    First.Add "Lyla"
    First.Add "Margaret"
    First.Add "Alyssa"
    First.Add "Adalyn"
    First.Add "Arya"
    First.Add "Norah"
    First.Add "Khloe"
    First.Add "Kayla"
    First.Add "Eden"
    First.Add "Eliza"
    First.Add "Rose"
    First.Add "Ariel"
    First.Add "Melody"
    First.Add "Alexis"
    First.Add "Isabel"
    First.Add "Sydney"
    First.Add "Juliana"
    First.Add "Lauren"
    First.Add "Iris"
    First.Add "Emerson"
    First.Add "London"
    First.Add "Morgan"
    First.Add "Lilly"
    First.Add "Charlie"
    First.Add "Aliyah"
    First.Add "Valeria"
    First.Add "Arabella"
    First.Add "Sara"
    First.Add "Finley"
    First.Add "Trinity"
    First.Add "Ryleigh"
    First.Add "Jordyn"
    First.Add "Jocelyn"
    First.Add "Kimberly"
    First.Add "Esther"
    First.Add "Molly"
    First.Add "Valerie"
    First.Add "Cecilia"
    First.Add "Anastasia"
    First.Add "Daisy"
    First.Add "Reese"
    First.Add "Laila"
    First.Add "Mya"
    First.Add "Amy"
    First.Add "Teagan"
    First.Add "Amaya"
    First.Add "Elise"
    First.Add "Harmony"
    First.Add "Paige"
    First.Add "Adaline"
    First.Add "Fiona"
    First.Add "Alaina"
    First.Add "Nicole"
    First.Add "Genevieve"
    First.Add "Lucia"
    First.Add "Alina"
    First.Add "Mckenzie"
    First.Add "Callie"
    First.Add "Payton"
    First.Add "Eloise"
    First.Add "Brooke"
    First.Add "Londyn"
    First.Add "Mariah"
    First.Add "Julianna"
    First.Add "Rachel"
    First.Add "Daniela"
    First.Add "Gracie"
    First.Add "Catherine"
    First.Add "Angelina"
    First.Add "Presley"
    First.Add "Josie"
    First.Add "Harley"
    First.Add "Adelyn"
    First.Add "Vanessa"
    First.Add "Makayla"
    First.Add "Parker"
    First.Add "Juliette"
    First.Add "Amara"
    First.Add "Marley"
    First.Add "Lila"
    First.Add "Ana"
    First.Add "Rowan"
    First.Add "Alana"
    First.Add "Michelle"
    First.Add "Malia"
    First.Add "Rebecca"
    First.Add "Brooklynn"
    First.Add "Brynlee"
    First.Add "Summer"
    First.Add "Sloane"
    First.Add "Leila"
    First.Add "Sienna"
    First.Add "Adriana"
    First.Add "Sawyer"
    First.Add "Kendall"
    First.Add "Juliet"
    First.Add "Destiny"
    First.Add "Alayna"
    First.Add "Elliana"
    First.Add "Diana"
    First.Add "Hayden"

    First.Add "Izabella"
    First.Add "Catalina"
    First.Add "Raegan"
    First.Add "Journee"
    First.Add "Gabrielle"
    First.Add "Lucille"
    First.Add "Ruth"
    First.Add "Amiyah"
    First.Add "Evangeline"
    First.Add "Blake"
    First.Add "Thea"
    First.Add "Amina"
    First.Add "Giselle"
    First.Add "Lilah"
    First.Add "Melissa"
    First.Add "River"
    First.Add "Kate"
    First.Add "Adelaide"
    First.Add "Charlee"
    First.Add "Vera"
    First.Add "Leia"
    First.Add "Gabriela"
    First.Add "Zara"
    First.Add "Jane"
    First.Add "Journey"
    First.Add "Elaina"
    First.Add "Miriam"
    First.Add "Briella"
    First.Add "Stephanie"
    First.Add "Cali"
    First.Add "Ember"
    First.Add "Lilliana"
    First.Add "Aniyah"
    First.Add "Logan"
    First.Add "Kamila"
    First.Add "Brynn"
    First.Add "Ariella"
    First.Add "Makenzie"
    First.Add "Annie"
    First.Add "Mariana"
    First.Add "Kali"
    First.Add "Haven"
    First.Add "Elsie"
    First.Add "Nyla"

    First.Add "Arielle"
    First.Add "Phoebe"
    First.Add "Kinley"
    First.Add "Ada"
    First.Add "Nina"
    First.Add "Ariah"
    First.Add "Samara"
    First.Add "Myla"
    First.Add "Brinley"
    First.Add "Cassidy"
    First.Add "Maci"
    First.Add "Aspen"
    First.Add "Allie"
    First.Add "Keira"
    First.Add "Kaia"
    First.Add "Makenna"
    First.Add "Amanda"
    First.Add "Heaven"
    First.Add "Joy"
    First.Add "Lia"
    First.Add "Madilyn"
    First.Add "Gracelyn"
    First.Add "Laura"
    First.Add "Evelynn"
    First.Add "Lexi"
    First.Add "Haley"
    First.Add "Miranda"
    First.Add "Kaitlyn"
    First.Add "Daniella"
    First.Add "Felicity"
    First.Add "Jacqueline"
    First.Add "Evie"
    First.Add "Angel"
    First.Add "Danielle"
    First.Add "Ainsley"
    First.Add "Dylan"
    First.Add "Kiara"
    First.Add "Millie"
    First.Add "Jordan"

    First.Add "Erin"
    First.Add "Christina"
    First.Add "Katie"
    First.Add "Ryan"
    First.Add "Viviana"
    First.Add "Alexia"
    First.Add "Anaya"
    First.Add "Serena"
    First.Add "Katelyn"
    First.Add "Ophelia"
    First.Add "Regina"
    First.Add "Helen"
    First.Add "Remington"
    First.Add "Camryn"
    First.Add "Cadence"
    First.Add "Royalty"
    First.Add "Amari"
    First.Add "Kathryn"
    First.Add "Skye"
    First.Add "Emely"

    First.Add "Avianna"
    First.Add "Maryam"
    First.Add "Emmalyn"
    First.Add "Hattie"
    First.Add "Kensley"
    First.Add "Macie"
    First.Add "Bristol"
    First.Add "Marlee"
    First.Add "Demi"
    First.Add "Cataleya"
    First.Add "Maia"
    First.Add "Sylvia"
    First.Add "Itzel"
    First.Add "Allyson"
    First.Add "Lilith"
    First.Add "Melany"
    First.Add "Kaydence"
    First.Add "Holly"
    First.Add "Nayeli"
    First.Add "Meredith"
    First.Add "Nia"
    First.Add "Liana"
    First.Add "Megan"
    First.Add "Justice"
    First.Add "Bethany"
    First.Add "Alejandra"
    First.Add "Janelle"
    First.Add "Elisa"
    First.Add "Adelina"
    First.Add "Ashlynn"
    First.Add "Elianna"
    First.Add "Aleah"
    First.Add "Myra"
    First.Add "Lainey"
    First.Add "Blair"
    First.Add "Kassidy"
    First.Add "Charley"
    First.Add "Virginia"
    First.Add "Kara"
    First.Add "Helena"
    First.Add "Kalani"
    First.Add "Alanna"
    First.Add "Lorelai"
    First.Add "Macy"
    First.Add "Karina"
    First.Add "Addyson"
    First.Add "Aleena"
    First.Add "Aisha"
    First.Add "Johanna"

    First.Add "Azalea"
    First.Add "Jayda"
    First.Add "Tiffany"
    First.Add "Avah"
    First.Add "Shiloh"
    First.Add "Bailee"
    First.Add "Jazmine"
    First.Add "Esme"
    First.Add "Coraline"
    First.Add "Madisyn"
    First.Add "Elaine"
    First.Add "Lilian"
    First.Add "Kyra"
    First.Add "Kaliyah"
    First.Add "Kora"
    First.Add "Octavia"
    First.Add "Irene"
    First.Add "Kelly"
    First.Add "Lacey"
    First.Add "Laurel"
    First.Add "Adley"
    First.Add "Anika"
    First.Add "Janiyah"
    First.Add "Dorothy"
    First.Add "Sutton"
    First.Add "Julieta"
    First.Add "Kimber"
    First.Add "Remy"
    First.Add "Cassandra"
    First.Add "Rebekah"
    First.Add "Collins"

    First.Add "Addisyn"
    First.Add "Alia"
    First.Add "Lylah"
    First.Add "Angie"
    First.Add "Ariya"
    First.Add "Alma"
    First.Add "Crystal"
    First.Add "Jayde"
    First.Add "Aileen"
    First.Add "Kinslee"
    First.Add "Siena"
    First.Add "Zelda"
    First.Add "Katalina"
    First.Add "Marie"
    First.Add "Pearl"
    First.Add "Reyna"
    First.Add "Mae"
    First.Add "Zahra"
    First.Add "Kailey"
    First.Add "Jessie"
    First.Add "Tiana"
    First.Add "Amirah"
    First.Add "Madalyn"
    First.Add "Alaya"
    First.Add "Lilyana"
    First.Add "Julissa"
    First.Add "Armani"
    First.Add "Lennox"
    First.Add "Lillie"
    First.Add "Jolie"
    First.Add "Laney"
    First.Add "Roselyn"
    First.Add "Mara"
    First.Add "Joelle"
    First.Add "Rosa"
    First.Add "Kaylani"
    First.Add "Bridget"
    First.Add "Liv"
    First.Add "Oaklyn"
    First.Add "Aurelia"
    First.Add "Clarissa"
    First.Add "Elyse"
    First.Add "Marissa"
    First.Add "Monroe"
    First.Add "Kori"
    First.Add "Elsa"
    First.Add "Rosie"
    First.Add "Amelie"
    First.Add "Aitana"
    First.Add "Aliza"
    First.Add "Eileen"
    First.Add "Poppy"
    First.Add "Emmie"
    First.Add "Braylee"
    First.Add "Milana"
    First.Add "Addilynn"
    First.Add "Royal"
    First.Add "Chaya"
    First.Add "Frida"
    First.Add "Bonnie"
    First.Add "Amora"
    First.Add "Stevie"
    First.Add "Tatiana"
    First.Add "Malaya"
    First.Add "Mina"
    First.Add "Emerie"
    First.Add "Reign"
    First.Add "Zaylee"
    First.Add "Annika"
    First.Add "Kenia"
    First.Add "Linda"
    First.Add "Kenna"
    First.Add "Faye"
    First.Add "Reina"
    First.Add "Brittany"
    First.Add "Marina"
    First.Add "Astrid"
    First.Add "Kadence"
    First.Add "Mikaela"
    First.Add "Jaelyn"
    First.Add "Briar"
    First.Add "Kaylie"
    First.Add "Teresa"
    First.Add "Bria"
    First.Add "Hadassah"
    First.Add "Lilianna"
    First.Add "Guadalupe"
    First.Add "Rayna"
    First.Add "Chanel"
    First.Add "Lyra"
    First.Add "Noa"
    First.Add "Zariyah"
    First.Add "Laylah"
    First.Add "Aubrielle"
    First.Add "Aniya"
    First.Add "Livia"
    First.Add "Ellen"
    First.Add "Meadow"
    First.Add "Amiya"
    First.Add "Ellis"
    First.Add "Elora"
    First.Add "Milan"
    First.Add "Hunter"
    First.Add "Princess"
    First.Add "Leanna"
    First.Add "Nathalie"
    First.Add "Clementine"
    First.Add "Nola"
    First.Add "Tenley"
    First.Add "Simone"
    First.Add "Lina"
    First.Add "Marianna"

    First.Add "Celia"
    First.Add "Lyanna"
    First.Add "Opal"
    First.Add "Amaris"
    First.Add "Clare"
    First.Add "Gwen"
    First.Add "Giana"
    First.Add "Veda"
    First.Add "Alisha"
    First.Add "Davina"
    First.Add "Rhea"
    First.Add "Sariyah"
    First.Add "Noor"
    First.Add "Danica"
    First.Add "Kathleen"
    First.Add "Lillianna"
    First.Add "Lindsey"
    First.Add "Maxine"
    First.Add "Paulina"
    First.Add "Hailee"
    First.Add "Harleigh"
    First.Add "Nancy"
    First.Add "Jessa"
    First.Add "Raquel"
    First.Add "Raylee"
    First.Add "Zainab"
    First.Add "Chana"
    First.Add "Lisa"
    First.Add "Heavenly"
    First.Add "Oaklynn"
    First.Add "Aminah"
   
End If


NameSet = Array(First(Rando_Number(1, First.count)), First(Rando_Number(1, First.count)), "")

Set First = New Collection

Last.Add "Smith"
Last.Add "Johnson"
Last.Add "Williams"
Last.Add "Brown"
Last.Add "Jones"
Last.Add "Miller"

Last.Add "Lee"
Last.Add "Gonzalez"
Last.Add "Harris"
Last.Add "Clark"
Last.Add "Lewis"
Last.Add "Robinson"
Last.Add "Walker"
Last.Add "Perez"
Last.Add "Hall"
Last.Add "Young"

Last.Add "Hopkins"
Last.Add "Keller"
Last.Add "Guerrero"
Last.Add "Stanley"
Last.Add "Bates"
Last.Add "Alvarado"
Last.Add "Beck"
Last.Add "Ortega"
Last.Add "Wade"
Last.Add "Estrada"
Last.Add "Contreras"

Last.Add "Padilla"
Last.Add "Bush"
Last.Add "Thornton"

Last.Add "Barber"
Last.Add "Acosta"
Last.Add "Luna"
Last.Add "Chandler"
Last.Add "Daniel"
Last.Add "Blair"
Last.Add "Cross"
Last.Add "Simon"
Last.Add "Dennis"
Last.Add "Oconnor"
Last.Add "Quinn"
Last.Add "Gross"
Last.Add "Navarro"
Last.Add "Moss"
Last.Add "Fitzgerald"
Last.Add "Wang"
Last.Add "Saunders"
Last.Add "Tate"
Last.Add "Mack"
Last.Add "Hammond"
Last.Add "Carrillo"
Last.Add "Townsend"
Last.Add "Wise"
Last.Add "Ingram"
Last.Add "Barton"
Last.Add "Mejia"
Last.Add "Ayala"
Last.Add "Schroeder"
Last.Add "Hampton"
Last.Add "Rowe"
Last.Add "Parsons"
Last.Add "Mckenzie"
Last.Add "Serrano"
Last.Add "Wilcox"
Last.Add "Carey"
Last.Add "Clayton"
Last.Add "Poole"
Last.Add "Calderon"
Last.Add "Gallegos"
Last.Add "Greer"
Last.Add "Rivas"
Last.Add "Guerra"
Last.Add "Decker"
Last.Add "Collier"
Last.Add "Wall"
Last.Add "Whitaker"
Last.Add "Bass"
Last.Add "Flowers"
Last.Add "Davenport"
Last.Add "Conley"
Last.Add "Houston"
Last.Add "Huff"
Last.Add "Copeland"
Last.Add "Hood"
Last.Add "Monroe"
Last.Add "Clay"
Last.Add "Barron"
Last.Add "Beasley"
Last.Add "Oneal"
Last.Add "Small"
Last.Add "Preston"
Last.Add "Wu"
Last.Add "Zamora"
Last.Add "Macdonald"
Last.Add "Vance"
Last.Add "Snow"
Last.Add "Mcclain"
Last.Add "Stafford"
Last.Add "Roach"
Last.Add "Nolan"
Last.Add "Lam"
Last.Add "Yoder"
Last.Add "Lowery"
Last.Add "Hardin"
Last.Add "Hull"
Last.Add "Sellers"
Last.Add "Ellison"
Last.Add "Calhoun"
Last.Add "Gillespie"
Last.Add "Mora"
Last.Add "Knapp"
Last.Add "Mccall"
Last.Add "Morse"
Last.Add "Dorsey"
Last.Add "Pennington"
Last.Add "Reilly"
Last.Add "Hebert"
Last.Add "Mcfarland"
Last.Add "Hickman"
Last.Add "Noble"
Last.Add "Spears"
Last.Add "Conrad"
Last.Add "Arias"
Last.Add "Galvan"
Last.Add "Velazquez"
Last.Add "Huynh"
Last.Add "Frederick"
Last.Add "Coffey"
Last.Add "Ponce"
Last.Add "Faulkner"
Last.Add "Donaldson"
Last.Add "Schmitt"
Last.Add "Novak"
Last.Add "Costa"
Last.Add "Montes"
Last.Add "Booker"
Last.Add "Cordova"
Last.Add "Waller"
Last.Add "Arellano"
Last.Add "Maddox"
Last.Add "Mata"
Last.Add "Bonilla"
Last.Add "Stanton"
Last.Add "Compton"
Last.Add "Kaufman"
Last.Add "Dudley"
Last.Add "Mcpherson"
Last.Add "Beltran"
Last.Add "Dickson"
Last.Add "Mccann"
Last.Add "Villegas"


NameSet(2) = "Test " & Last(Rando_Number(1, Last.count))
Set Last = New Collection

Temp = Array(NameSet(0) & " " & NameSet(2), "Name", Array(Array("First", "First Name", Array(NameSet(0), ""))))
Temp = PageInfo_RR(Temp, "Middle", Array(NameSet(1), ""))
Temp = PageInfo_RR(Temp, "Last", Array("" & NameSet(2), ""))
    If Gender = 1 Then
    Temp = PageInfo_RR(Temp, "Gender", Array("Male", "1"))
    Else
    Temp = PageInfo_RR(Temp, "Gender", Array("Female", "0"))
    End If
Temp = PageInfo_RR(Temp, "DOB", Array(Rando(21, 28, "Date"), ""))
Temp = PageInfo_RR(Temp, "Phone", Array(Format(Rando(112, 819) & Rando(175, 999) & Rando(1111, 9999), "(###) ###-####"), ""))
Temp = PageInfo_RR(Temp, "Email", Array(Replace(left(PageInfoS(Temp, "First")(0), 1) & PageInfoS(Temp, "Last")(0) & Format(PageInfoS(Temp, "DOB")(0), "md") & "@mail.com", " ", "_"), ""))

PAX_NameBuilder = Temp

End Function
Private Function Rando_Number(Low As Double, high As Double)
Dim Result As Double

Call Randomize(Format(Now(), "nnmmhhdd") * 1)

Result = Int((high - Low + 1) * Rnd() + Low)

Debug.Print "Low = " & Low & " | High= " & high & " | Result= " & Result

Rando_Number = Result
End Function
Private Function Rando(Low As Double, high As Double, Optional RandoType As String = "Number") As Variant
Dim Result As Variant
Dim tWord As String

If RandoType = "Number" Then
    Result = Rando_Number(Low, high)
End If

If RandoType = "Date" Then
    Result = high
    high = Format(Now(), "yyyy") * 1 - Low
    Low = Format(Now(), "yyyy") * 1 - (Result * 1)

    Result = Int((12 - 1 + 1) * Rnd() + 1) & "/" & Int((28 - 1 + 1) * Rnd() + 1) & "/" & Format(Int((high - Low + 1) * Rnd() + Low), "####")
End If

If RandoType = "Person" Then
    Result = PAX_NameBuilder()
End If

If RandoType = "Address" Then
    Result = Rando_Address()
End If


Rando = Result
End Function
Private Function Rando_Address() As Variant
Dim Address As Variant
Dim tWord As String
Dim Direction As String
Dim WordList As New Collection
Dim DList As Collection
Dim cRando As Variant

WordList.Add Array("North", "N")
WordList.Add Array("South", "S")
WordList.Add Array("East", "E")
WordList.Add Array("West", "W")

Address = Array("", "", Array(Array("Country", "", Array("United States", "USA"))))

If Rando(1, 10) > 7 Then
    Direction = WordList(Rando(1, WordList.count))(1)
End If

tWord = Rando(1, 999) & " "

If Rando(1, 15) <= 10 Then
    tWord = tWord & Address_Numbering(Rando(5, 75))
Else
    tWord = tWord & PageInfoF(PAX_NameBuilder(), "Last")(0)
End If

tWord = tWord & " "


Set WordList = New Collection
    WordList.Add Array("Rd")
    WordList.Add Array("St")
    WordList.Add Array("Ave")
    WordList.Add Array("Blvd")
    WordList.Add Array("Ln")
    WordList.Add Array("Dr")

tWord = tWord & WordList(Rando(1, WordList.count))(0)

If Direction <> "" Then
    tWord = tWord & " " & Direction
End If

Address = PageInfo_RR(Address, "Street", (tWord)) 'street address
Address = PageInfo_RR(Address, "Street2", "#" & Rando(1, 14)) 'apartment


Set WordList = New Collection
    WordList.Add Array("Sea")
    WordList.Add Array("Long")
    WordList.Add Array("Scenic")
    WordList.Add Array("Forrest")
    WordList.Add Array("Hill")
    WordList.Add Array("Fruit")
    WordList.Add Array("Pleasant")
    WordList.Add Array("Tropic")
    WordList.Add Array("River")
    WordList.Add Array("Mountain")
tWord = WordList(Rando(1, WordList.count))(0)

Set WordList = New Collection
    WordList.Add Array("$vale")
    WordList.Add Array("$ville")
    WordList.Add Array("$town")
    WordList.Add Array("Saint")
    WordList.Add Array("New")
    WordList.Add Array("$view")

cRando = WordList(Rando(1, WordList.count))(0)

If left(cRando, 1) = "$" Then
tWord = Replace(tWord & cRando, "$", "")
Else
tWord = cRando & " " & tWord
End If

Debug.Print "The city is: " & tWord
Address = PageInfo_RR(Address, "City", tWord) 'City

cRando = LoadRAMtable()

Address = PageInfo_RR(Address, "State", cRando(Rando(1, 25), 0)) 'State
Address = PageInfo_RR(Address, "Postal", Rando(12345, 98765)) 'ZIP

Address(0) = PageInfoF(Address, "Street")(0) & ", " & PageInfoF(Address, "City")(0) & ", " & PageInfoF(Address, "State")(0) & " " & PageInfoF(Address, "Postal")(0)

'Print_L2_HTML (Address)
Rando_Address = Address
End Function
Private Function Address_Numbering(Number As String) As String
'appends st,nd,rd,th as needed
Dim Resolution As New Collection
Dim LastDigit As String

Resolution.Add Array("0", "th")
Resolution.Add Array("1", "st")
Resolution.Add Array("2", "nd")
Resolution.Add Array("3", "rd")
Resolution.Add Array("4", "th")
Resolution.Add Array("5", "th")
Resolution.Add Array("6", "th")
Resolution.Add Array("7", "th")
Resolution.Add Array("8", "th")
Resolution.Add Array("9", "th")

Address_Numbering = Number
LastDigit = Right(Number, 1)

For i = 1 To Resolution.count
    If LastDigit = Resolution(i)(0) Then
        Address_Numbering = Number & Resolution(i)(1)
    End If
Next i

End Function

Private Function PAX_Create_Fake() As Variant
Dim fPAX As Variant
Dim Name As Variant
Dim tValue As Variant
Dim tSource As Variant
Dim PAXbuilder As New Collection
Dim StartDate As Date
Dim EndDate As Date
Dim tCollect As Collection
Dim Random As Double
Dim tWord As String
Dim Confirmer As Boolean

'fPAX = Rando_Address()


fPAX = Array("", "ID", "")
fPAX = PageInfo_RR(fPAX, "Service Level", "Premium")

tSource = LoadPARTNERtable()
Random = Rando_Number(0, UBound(tSource))
tSource = Array(tSource(Random, 0), tSource(Random, 5), tSource(Random, 1))
    fPAX = PageInfo_RR(fPAX, "Partner", Array(tSource(2), tSource(0)))

   
Set tCollect = LoadEmbassyDates()
    Confirmer = False
    tWord = tSource(1)
    Debug.Print "Country Selected = " & tSource(1)
    For i = 1 To tCollect.count
        If tCollect(i)(0) = tWord Then
            tSource = tCollect(i)
            Confirmer = True
        End If
    Next i
    
If Confirmer = False Then
    tSource = tCollect(5)
End If
'tSource = tCollect(Int((1 - tCollect.count + 1) * Rnd() + tCollect.count))

tValue = Array(tSource(0), "Country", Array(Array("Embassy Start", "", Array(tSource(1), ""))))
    fPAX = PageInfo_RR(fPAX, "Embassy End", Array(tSource(2), ""))
    fPAX = PageInfo_RR(fPAX, "Country", tValue)
    

tValue = Rando(1, 1, "Person")
tValue = PageInfo_RR(tValue, "Skype ID", "TestPAX.Skype")
tValue = PageInfo_RR(tValue, "Citizenship", PageInfoF(fPAX, "Country"))
tValue = PageInfo_RR(tValue, "Nationality", PageInfoF(fPAX, "Country"))
tValue = PageInfo_RR(tValue, "Birth Country", PageInfoF(fPAX, "Country"))
tValue = PageInfo_RR(tValue, "Country of Residence", PageInfoF(fPAX, "Country"))
tValue = PageInfo_RR(tValue, "Residency Status", "Full-Time")
tValue = PageInfo_RR(tValue, "Birth City", "Birthville")

fPAX = PageInfo_RR(fPAX, "Account", tValue)

   
    tValue = PageInfoS(fPAX, "Country.Embassy Start")
        If Format(tValue(0), "mm") > 4 Then
            If Format(tValue(0), "mm") > 9 Then
                fPAX = PageInfo_RR(fPAX, "Season", "Winter")
            Else
                fPAX = PageInfo_RR(fPAX, "Season", "Summer")
            End If
        Else
            fPAX = PageInfo_RR(fPAX, "Season", "Spring")
        End If
    fPAX = PageInfo_RR(fPAX, "Engagement Start", Format(DateAdd("d", Rando_Number(1, 20), CDate(tValue(0))), "mm/dd/yyyy"))
    tValue = PageInfoS(fPAX, "Embassy End")

    fPAX = PageInfo_RR(fPAX, "Engagement End", Format(DateAdd("d", Rando_Number(1, 20) * -1, CDate(tValue(0))), "mm/dd/yyyy"))
    tValue = Array(Format(PageInfoF(fPAX, "Engagement Start")(0), "yyyy"), "")
    fPAX = PageInfo_RR(fPAX, "Year", tValue)

    fPAX(0) = PageInfoF(fPAX, "Account")(0) & "-WT" & PageInfoF(fPAX, "Year")(0)
    
    tValue = Rando(1, 1, "Address")
    tValue = PageInfo_RR(tValue, "Country", PageInfoF(fPAX, "Country"))
    tValue = PageInfo_RR(tValue, "Province", "")
    fPAX = PageInfo_RR(fPAX, "Address", tValue)
    fPAX = PageInfo_RR(fPAX, "University", Array("University of " & PageInfoF(fPAX, "Country")(0), ""))
    fPAX = PageInfo_RR(fPAX, "Major", Array("Engineering", ""))
    fPAX = PageInfo_RR(fPAX, "Language 1", Array("English", "Advanced"))
    fPAX = PageInfo_RR(fPAX, "Intrax Program", "Work Travel")

fPAX = PageInfo_RR(fPAX, "Position_Info", PAX_JobBuilder())

PAX_Create_Fake = fPAX
End Function
Private Function Rando_Jobs() As Variant
Dim WordC As New Collection
Dim Industry As Variant
Dim Package As New Collection


Debug.Print "Begin Industry"
Industry = Array("F&B", "Food and Beverage", "")
Set WordC = New Collection
    WordC.Add "Server"
    WordC.Add "Busser"
    WordC.Add "Bartender"
    WordC.Add "Dishwasher"
Industry = PageInfo_RR(Industry, "Jobs", CollectionConverter(WordC))
Set WordC = New Collection
    WordC.Add "Restaurant"
    WordC.Add "Pizzaria"
    WordC.Add "Cafe"
Industry = PageInfo_RR(Industry, "Names", CollectionConverter(WordC))
Set WordC = New Collection
    WordC.Add "Seafood"
    WordC.Add "Burger"
    WordC.Add "Meat"
    WordC.Add "Taco"
    WordC.Add "Chinese"
    WordC.Add "Italian"
    WordC.Add "Icecream"
    WordC.Add "Candy"
Industry = PageInfo_RR(Industry, "Descriptors", CollectionConverter(WordC))
Industry = PageInfo_RR(Industry, "Tipped", Array("Yes", 1))
Industry = PageInfo_RR(Industry, "Mask", Array("$'s #", "Manager.First"))


Package.Add Industry '################################

Industry = Array("Hospitality", "Hospitality", "")
Set WordC = New Collection
    WordC.Add "Housekeeper"
    WordC.Add "Laundry"
    WordC.Add "Maintenance"
Industry = PageInfo_RR(Industry, "Jobs", CollectionConverter(WordC))
Set WordC = New Collection
    WordC.Add "Inns & Suites"
    WordC.Add "Hotel"
    WordC.Add "Motel"
Industry = PageInfo_RR(Industry, "Names", CollectionConverter(WordC))
Set WordC = New Collection
    WordC.Add "Grand"
    WordC.Add "Comfort"
    WordC.Add "Restfull"
Industry = PageInfo_RR(Industry, "Descriptors", CollectionConverter(WordC))
Industry = PageInfo_RR(Industry, "Tipped", Array("No", 0))
Industry = PageInfo_RR(Industry, "Mask", Array("$ #", "Address.City"))

Package.Add Industry '################################

Rando_Jobs = CollectionConverter(Package)
End Function
Private Function PAX_JobBuilder() As Variant

Dim tValue As Variant
Dim Business As Variant
Dim WordC As Collection
Dim tWord As String

Dim JobStats As New Collection
Dim FakeEmployer As Variant

JobStats.Add Array("Address", Rando(1, 1, "Address"))
JobStats.Add Array("Manager", Rando(1, 1, "Person"))
JobStats.Add Array("Phone", Array(Format(Rando_Number(2131111111, 9879999999#), "(###) ###-####"), ""))
JobStats.Add Array("Pay Rate", Format(Rnd() * 100, "##.00"))
JobStats.Add Array("EIN", Array(Format(Int(Rnd() * 1000000000#), "##-#######"), ""))

tValue = Rando_Jobs()
Business = tValue(Rando(0, UBound(tValue)))
Debug.Print "Picked a job in the " & Business(0) & " industry!"
FakeEmployer = Array("Name", "", "")
tValue = PageInfoF(Business, "Jobs")
JobStats.Add Array("Industry", Business(0))
JobStats.Add Array("Title", tValue(Rando(0, UBound(tValue))))
JobStats.Add Array("Tipped", PageInfoF(Business, "Tipped"))
    For i = 1 To JobStats.count
        FakeEmployer = PageInfo_RR(FakeEmployer, (JobStats(i)(0)), JobStats(i)(1))
    Next i
tValue = PageInfoF(Business, "Descriptors")
tWord = tValue(Rando(1, UBound(tValue)))
tValue = PageInfoF(Business, "Names")
tWord = tWord & " " & tValue(Rando(1, UBound(tValue)))
tValue = PageInfoF(Business, "Mask")
tWord = Replace(tValue(0), "#", tWord)
tWord = Replace(tWord, "$", PageInfoS(FakeEmployer, (tValue(1)))(0))

FakeEmployer(0) = tWord

'Call Print_L2_HTML(FakeEmployer)
PAX_JobBuilder = FakeEmployer

End Function
Private Function PAX_App_PersonBuilder(fPAX As Variant) As Variant
Dim FieldList As New Collection
Dim fPerson As Variant
Dim tValue As Variant

FieldList.Add Array("CF00Na0000009qBKX_lkid", PageInfoS(fPAX, "Application")(1))

FieldList.Add Array("Name", PageInfoS(fPAX, "Acount")(0))
FieldList.Add Array("00Na0000009qBUN", PageInfoS(fPAX, "Account.Gender")(0))

FieldList.Add Array("00Na0000009qBTt", PageInfoS(fPAX, "Account.First")(0))
FieldList.Add Array("00Na0000009qBKs", PageInfoS(fPAX, "Account.Middle")(0))
FieldList.Add Array("00Na0000009qBU3", PageInfoS(fPAX, "Account.Last")(0))
FieldList.Add Array("00Na0000009qBUS", PageInfoS(fPAX, "Account.DOB")(0))

FieldList.Add Array("00Na0000009qCen", "1")

FieldList.Add Array("00Na0000009qGtO", PageInfoS(fPAX, "Account.Role")(0))
FieldList.Add Array("00Na0000009qGtN", PageInfoS(fPAX, "Role Other")(0))
FieldList.Add Array("00Na0000009qBUw", PageInfoS(fPAX, "Account.Skype Id")(0))

FieldList.Add Array("00Na0000009qBVB", PageInfoS(fPAX, "Account.Citizenship")(0))
FieldList.Add Array("00Na0000009qBKp", PageInfoS(fPAX, "Account.Birth City")(0))
FieldList.Add Array("00Na0000009qBUI", PageInfoS(fPAX, "Account.Nationality")(0))
FieldList.Add Array("00Na0000009qBKq", PageInfoS(fPAX, "Account.Birth Country")(0))
FieldList.Add Array("00Na0000009qBKr", PageInfoS(fPAX, "Account.Country of Residence")(0))
FieldList.Add Array("00Na0000009qGtM", PageInfoS(fPAX, "Account.Residency Status")(0))

PAX_App_PersonBuilder = fPAX
End Function
Private Function PAX_Application_Creator(fPAX As Variant, Optional Salesforce As String = "cs45") As Variant
Dim FieldList As New Collection
Dim IE As Object
Dim URL As String

'## Base Application
    FieldList.Add Array("00N1300000BOJVx", PageInfoS(fPAX, "Country")(0))
    FieldList.Add Array("00Na000000Algwg", PageInfoS(fPAX, "Engagement End")(0))
    FieldList.Add Array("00Na0000009qBVG", PageInfoS(fPAX, "Engagement Start")(0))
    FieldList.Add Array("00N30000008RrqU", PageInfoS(fPAX, "Major")(0))
    FieldList.Add Array("00Na0000009qDo5", PageInfoS(fPAX, "Year")(0))
    'FieldList.Add Array("00Na000000B2tGV", PageInfoS(fPAX, "Season")(0))
    FieldList.Add Array("Name", fPAX(0))
    FieldList.Add Array("00Na0000009qDAF", PageInfoS(fPAX, "Intrax Program")(0))
    'FieldList.Add Array("00Na0000009qBKm", PageInfoS(fPAX, "Partner")(1))
    FieldList.Add Array("00Na0000009qBKm", "I-1250890")
    FieldList.Add Array("00N30000008RrqF", PageInfoS(fPAX, "University")(0))
    FieldList.Add Array("00Na0000009qGq1", PageInfoS(fPAX, "Address.Street")(0))
    FieldList.Add Array("00Na0000009qGq2", PageInfoS(fPAX, "Address.Street2")(0))
    FieldList.Add Array("00Na0000009qGpw", PageInfoS(fPAX, "Address.City")(0))
    FieldList.Add Array("00Na0000009qGq0", PageInfoS(fPAX, "Address.State")(0))
    FieldList.Add Array("00Na000000Algwn", PageInfoS(fPAX, "Address.Province")(0))
    FieldList.Add Array("00Na0000009qGpx", PageInfoS(fPAX, "Country")(0))
    FieldList.Add Array("00Na0000009qGpy", PageInfoS(fPAX, "Address.Postal")(0))
    FieldList.Add Array("00Na000000B1cZC", PageInfoS(fPAX, "Account.First")(0))
    FieldList.Add Array("00N30000008RJ5z", PageInfoS(fPAX, "Account.Last")(0))
    FieldList.Add Array("00N30000008RJ7H", PageInfoS(fPAX, "Account.Email")(0))
    FieldList.Add Array("00N30000008RJ72", PageInfoS(fPAX, "Account.DOB")(0))
    FieldList.Add Array("00Na0000009s13w", PageInfoS(fPAX, "Language 1")(0))
    FieldList.Add Array("00Na0000009s13v", PageInfoS(fPAX, "Language 1")(1))
    
    FieldList.Add Array("00N30000009p9lv", "Participant")
    FieldList.Add Array("00Na0000009qGpD", "Main")
    FieldList.Add Array("00Na0000009qGpE", "In-Review")
    FieldList.Add Array("00N30000009p9lv", "Participant")
    FieldList.Add Array("00Na0000009qDAF", "Work Travel")
    FieldList.Add Array("00Na0000009qDnv", "United States")
    FieldList.Add Array("00Na000000B2Zfy", "Partner")
    FieldList.Add Array("00Na0000009qDo0", "Independent")
    FieldList.Add Array("00Na0000009qBKm", "I-0800670")
    'I-0800670
    
    
    Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/a0U/e?retURL=%2Fa0U%2Fo&RecordType=012a0000001NYBQ&ent=01I30000002JcXi")
    IE.Visible = True
    URL = PushUpdates2Page(IE, FieldList, True)
    fPAX = PageInfo_RR(fPAX, "Application", Array("application", Right(URL, 15)))
    IE.Visible = True
    
    URL = Replace("https://" & Salesforce & ".salesforce.com/a0g/e?CF00Na0000009qBKX=Applicaton&CF00Na0000009qBKX_lkid=<ID>&retURL=%2F<ID>&RecordType=01213000000AVJO&ent=01Ia0000002KjVc", "<ID>", PageInfoF(fPAX, "Application")(1))
    Call opNAV(IE, "nav", URL)
    
    Set FieldList = New Collection 'PAX Info
        FieldList.Add Array("00Na0000009qBTt", PageInfoS(fPAX, "Account.First")(0))
        FieldList.Add Array("00Na0000009qBKs", PageInfoS(fPAX, "Account.Middle")(0))
        FieldList.Add Array("00Na0000009qBU3", PageInfoS(fPAX, "Account.Last")(0))
        FieldList.Add Array("Name", PageInfoS(fPAX, "Account")(0))
        
        FieldList.Add Array("00Na0000009qBUS", PageInfoS(fPAX, "Account.DOB")(0))
        FieldList.Add Array("00Na0000009qBUr", PageInfoS(fPAX, "Account.Email")(0))
        FieldList.Add Array("00Na0000009qBU8", PageInfoS(fPAX, "+" & Rando_Number(18, 99) & Format(Rando_Number(2131111111, 9879999999#), "(###) ###-####")))
        FieldList.Add Array("00Na0000009qBVB", PageInfoS(fPAX, "Account.Citizenship")(0))
        FieldList.Add Array("00Na0000009qBKp", PageInfoS(fPAX, "Account.Birth City")(0))
        FieldList.Add Array("00Na0000009qBUI", PageInfoS(fPAX, "Account.Nationality")(0))
        FieldList.Add Array("00Na0000009qBKq", PageInfoS(fPAX, "Account.Birth Country")(0))
        FieldList.Add Array("00Na0000009qBKr", PageInfoS(fPAX, "Account.Country of Residence")(0))
        FieldList.Add Array("00Na0000009qBUN", PageInfoS(fPAX, "Account.Gender")(0))
        FieldList.Add Array("00Na0000009qGtM", "Full-Time")
          
        FieldList.Add Array("00Na0000009qCen", "1")
        FieldList.Add Array("00Na0000009qGtO", "Student")
    Call PushUpdates2Page(IE, FieldList, True)
    Call opNAV(IE, "nav", URL)
    
        Set FieldList = New Collection 'Emergency Contact
        FieldList.Add Array("00Na0000009qBTt", PageInfoS(fPAX, "Account.First")(0) & " Sr.")
        FieldList.Add Array("00Na0000009qBU3", PageInfoS(fPAX, "Account.Last")(0))
        FieldList.Add Array("Name", PageInfoS(fPAX, "Account.First")(0) & " Sr. " & PageInfoS(fPAX, "Account.Last")(0))

        FieldList.Add Array("00Na0000009qBUr", PageInfoS(fPAX, "Account.Email")(0))
        FieldList.Add Array("00Na0000009qBU8", PageInfoS(fPAX, "+" & Rando(999999, 99999999)))

        FieldList.Add Array("00Na0000009qGtN", "Parent")
        FieldList.Add Array("00Na0000009qGtO", "Other")
    Call PushUpdates2Page(IE, FieldList, True)
    Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & PageInfoF(fPAX, "Application")(1))
    
    'Essays
    URL = Replace("https://" & Salesforce & ".salesforce.com/a0k/e?CF00Na0000009qGsh=PAX&CF00Na0000009qGsh_lkid=<ID>&retURL=%2Fa<ID>", "<ID>", PageInfoF(fPAX, "Application")(1))
    Call opNAV(IE, "nav", URL)
        Set FieldList = New Collection
        FieldList.Add Array("Name", "Participant Skills")
        FieldList.Add Array("00Na0000009qGsi", "Do you have any skills or qualities that make you a good candidate for employment?")
        FieldList.Add Array("00Na0000009qGsl", "I am hard worker, very responsible and good team worker.")
    Call PushUpdates2Page(IE, FieldList, True)
        Set FieldList = New Collection
        FieldList.Add Array("Name", "Participant Hobbies")
        FieldList.Add Array("00Na0000009qGsi", "Do you have any hobbies?")
        FieldList.Add Array("00Na0000009qGsl", "Making beds and scrubbing bathrooms.")
    
    Call opNAV(IE, "nav", URL)
    Call PushUpdates2Page(IE, FieldList, True)
    
    'Position Info
    Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/a1h/e?RecordType=01213000000AWA1&ent=01Ia0000002Kt75&retURL=" & PageInfoF(fPAX, "Application")(1))
        Set FieldList = New Collection
        FieldList.Add Array("00N1300000BQpYs", "Work Travel")
        FieldList.Add Array("Name", "Job info for " & PageInfoF(fPAX, "Application")(0))
        FieldList.Add Array("CF00Na0000009s13r_lkid", PageInfoF(fPAX, "Application")(1))
        FieldList.Add Array("00Na0000009s155", PageInfoS(fPAX, "Position_Info")(0))
        FieldList.Add Array("00Na0000009s159", PageInfoS(fPAX, "Position_Info.Address.Street")(0))
        FieldList.Add Array("00Na0000009s15A", PageInfoS(fPAX, "Position_Info.Address.Street2")(0))
        FieldList.Add Array("00Na0000009s152", PageInfoS(fPAX, "Position_Info.Address.City")(0))
        FieldList.Add Array("00Na0000009s158", PageInfoS(fPAX, "Position_Info.Address.State")(0))
        FieldList.Add Array("00Na0000009s157", PageInfoS(fPAX, "Position_Info.Address.Postal")(0))
        FieldList.Add Array("00Na0000009s153", PageInfoS(fPAX, "Position_Info.Address.Country")(0))
        FieldList.Add Array("00Na0000009s15H", PageInfoS(fPAX, "Position_Info.Manager.First")(0))
        FieldList.Add Array("00Na0000009s15I", PageInfoS(fPAX, "Position_Info.Manager.Last")(0))
        FieldList.Add Array("00Na0000009s15J", PageInfoS(fPAX, "Position_Info.Manager.Phone")(0))
        FieldList.Add Array("00Na0000009s15G", PageInfoS(fPAX, "Position_Info.Manager.Email")(0))
        FieldList.Add Array("00Na0000009s15F", PageInfoS(fPAX, "Position_Info.Title")(0))
        FieldList.Add Array("00N1300000BQpYv", PageInfoS(fPAX, "Position_Info.Pay Rate")(0))
        FieldList.Add Array("00N1300000BQpYy", PageInfoS(fPAX, "Position_Info.Tipped")(0))
        FieldList.Add Array("00Na0000009s156", PageInfoS(fPAX, "Position_Info.Phone")(0))
        'FieldList.Add Array("00N1300000BRdfg", PageInfoS(fPAX, "Position_Info.EIN")(0))
        FieldList.Add Array("00Na0000009s154", PageInfoS(fPAX, "Position_Info.Industry")(0))
        FieldList.Add Array("00Na0000009s15E", "All of the job duties")
        'FieldList.Add Array("00N1B00000BLwsP", ">32")
        FieldList.Add Array("00N1300000BQpYw", PageInfoS(fPAX, "Engagement Start")(0))
        FieldList.Add Array("00N1300000BQpYq", PageInfoS(fPAX, "Engagement End")(0))
    Call PushUpdates2Page(IE, FieldList, True)
    
    IE.Visible = True
    
    fPAX = PageInfo_RR(fPAX, "Engagement", PAX_Application_Sync(fPAX, Salesforce))
    
    fPAX = PageInfo_RR(fPAX, "Housing", PAX_FakeHousingTest(Salesforce))
    
    URL = "https://" & Salesforce & ".salesforce.com/a1l/e?RecordType=0128A0000000H7i&ent=01Ia0000002Ky1A&retURL=%2Fa0d8A0000014KSq"
    Call opNAV(IE, "nav", URL)
    
Call opNAV(IE, "quit")
PAX_Application_Creator = fPAX
End Function
Private Function PAX_Application_Sync(fPAX As Variant, Salesforce As String) As Variant
Dim IE As Object
Dim URL As String
Dim PageForm As Object
Dim FieldList As Collection
Dim ButtonList As New Collection
Dim SubmitButton As Variant
Dim ButtonName As String

SubmitButton = Array("Next Buttons", "", Array(Array("", "", Array("", ""))))
SubmitButton = PageInfo_RR(SubmitButton, "Next", "j_id0:j_id1:i:f:pb:pbb:bottom:next")
SubmitButton = PageInfo_RR(SubmitButton, "Finish", "j_id0:j_id1:i:f:pb:pbb:bottom:finish")

ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:OppOverwriteWarning", "Create_New", "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Engagement_End_Date.input", Format(Now(), "mm/dd/yyyy"), "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Use_selected_or_create_new.input", "Create_New", "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Engagement_Name.input", fPAX(0), "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Use_selected_or_create_new_acct_1.input", "Use_Existing", "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Use_selected_or_create_new_acct_1_1.input", "Use_Existing", "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Use_selected_or_create_new_pos0.input", "Create_New", "Next")
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Errormessaage", "", "Next") 'create new HC dialogue
ButtonList.Add Array("j_id0:j_id1:i:f:pb:d:Summary", "", "Finish")

URL = "https://c." & Salesforce & ".visual.force.com/apex/FLAppSyncLeadExists?scontrolCaching=1&id=" & PageInfoF(fPAX, "Application")(1)
    Call opNAV(IE, "nav", URL)
    IE.Visible = True
    Application.Wait (Now + #12:00:02 AM#)
    
    Set PageForm = IE.document.getelementsbytagname("form")
    
    For i = 1 To ButtonList.count
    
        If IsObject(IE.document.getelementbyid((ButtonList(i)(0)))) Then
        
            If ButtonList(i)(1) <> "" Then
                Set FieldList = New Collection
                    FieldList.Add ButtonList(i)
                    Call PushUpdates2Page(IE, FieldList, False)
                    IE.Visible = True
            End If
            Application.Wait (Now + #12:00:03 AM#)
            ButtonName = PageInfoF(SubmitButton, (ButtonList(i)(2)))(0)
            If ButtonName <> "" Then
                IE.document.getelementbyid(ButtonName).Click
                Do While IE.busy
                    Application.Wait (Now + #12:00:01 AM#)
                Loop
            End If
            Application.Wait (Now + #12:00:05 AM#)
            i = 1
        End If
    Next i
    
Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & PageInfoF(fPAX, "Application")(1) & "/e?retURL=" & PageInfoF(fPAX, "Application")(1))
    Set FieldList = New Collection
        FieldList.Add Array("00Na0000009qGpE", "Accepted")
    Call PushUpdates2Page(IE, FieldList, True)


PAX_Application_Sync = FetchField(IE, "CF00Na000000B2Kea_ileinner")
Call opNAV(IE, "quit")
End Function
Private Function PAX_FakeHousingTest(Salesforce As String) As Variant
Dim hLead As Variant
Dim FieldList As Collection
Dim URL As String
Dim nLandlord As Variant
Dim IE As Object


hLead = PAX_JobBuilder()

'####Create Landlord Account Page
Set FieldList = New Collection
    FieldList.Add Array("acc2", PageInfoS(hLead, "Manager")(0))
    FieldList.Add Array("acc10", PageInfoS(hLead, "Manager.Phone")(0))
    FieldList.Add Array("00N300000068R7Q", PageInfoS(hLead, "Manager.Email")(0))
    FieldList.Add Array("acc17street", PageInfoS(hLead, "Address.Street")(0))
    'FieldList.Add Array("acc17street", PageInfoS(hLead, "Address.Street2")(0))
    FieldList.Add Array("acc17city", PageInfoS(hLead, "Address.City")(0))
    FieldList.Add Array("acc17state", PageInfoS(hLead, "Address.State")(0))
    FieldList.Add Array("acc17zip", PageInfoS(hLead, "Address.Postal")(0))
    FieldList.Add Array("acc17country", PageInfoS(hLead, "Address.Country")(0))
    FieldList.Add Array("00N30000007CCDy", "United States")
    'FieldList.Add Array("acc6", "Participant")
    FieldList.Add Array("00N300000068JZd", "Work Travel")
Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/001/e?retURL=%2F001%2Fo&RecordType=0128A0000008dcl&ent=Account")
IE.Visible = True
URL = PushUpdates2Page(IE, FieldList, True)
IE.Visible = True

hLead(1) = Right(URL, 15)

'#####Create Contact Object
Set FieldList = New Collection
    FieldList.Add Array("name_firstcon2", PageInfoS(hLead, "Manager.First")(0))
    FieldList.Add Array("name_lastcon2", PageInfoS(hLead, "Manager.Last")(0))
    FieldList.Add Array("con5", "Landlord")
    FieldList.Add Array("con10", PageInfoS(hLead, "Manager.Phone")(0))
    FieldList.Add Array("con15", PageInfoS(hLead, "Manager.Email")(0))
    FieldList.Add Array("name_firstcon2", "")
    FieldList.Add Array("name_firstcon2", "")
    FieldList.Add Array("name_firstcon2", "")
Call opNAV(IE, "nav", Replace("https://" & Salesforce & ".salesforce.com/003/e?retURL=%2F<ID>&accid=<ID>", "<ID>", hLead(1), , , vbTextCompare))
URL = PushUpdates2Page(IE, FieldList, True)
nLandlord = PageInfoF(hLead, "Manager")
nLandlord(1) = Right(URL, 15)
hLead = PageInfo_RR(hLead, "Manager", nLandlord)

'#####Create Opportunity
Set FieldList = New Collection
    FieldList.Add Array("opp3", left("Housing Validation - " & PageInfoS(hLead, "Address")(0), 80))
    FieldList.Add Array("opp11", "Prospecting")
    FieldList.Add Array("CF00Na0000009rUSE_lkid", PageInfoS(hLead, "Manager")(1))
    FieldList.Add Array("00N30000008QXjl", "Summer")
    FieldList.Add Array("00N300000068ZDp", "2019")
    FieldList.Add Array("00N30000007CyHC", "No Agreement")
    FieldList.Add Array("00N30000007CyHH", "Drafting")
    FieldList.Add Array("opp9", Format(Now(), "mm/dd/yyyy"))
URL = Replace("https://" & Salesforce & ".salesforce.com/006/e?RecordType=0128A0000008dcq&ent=Opportunity&accid=<ID>&retURL=<ID>", "<ID>", hLead(1), , , vbTextCompare)
Call opNAV(IE, "nav", URL)
URL = PushUpdates2Page(IE, FieldList, True)
IE.Visible = True

hLead = PageInfo_RR(hLead, "Opportunity", Array("Housing Validation", Right(URL, 15)))

'#####Create Accommodation Site
Set FieldList = New Collection
    FieldList.Add Array("Name", "Housing Address")
    FieldList.Add Array("00N30000009ot82", PageInfoS(hLead, "Address.Street")(0))
    'FieldList.Add Array("00Na000000B2eGP", PageInfoS(hLead, "Address.Street2")(0))
    FieldList.Add Array("00N30000009ot7d", PageInfoS(hLead, "Address.City")(0))
    FieldList.Add Array("00N30000009ot7x", PageInfoS(hLead, "Address.State")(0))
    FieldList.Add Array("00N30000009ot7s", PageInfoS(hLead, "Address.Postal")(0))
    FieldList.Add Array("00N30000009ot7i", PageInfoS(hLead, "Address.Country")(0))
    FieldList.Add Array("CF00N8A000000fyv6_lkid", hLead(1))
URL = "https://" & Salesforce & ".salesforce.com/a0c/e?retURL=%2Fa0c%2Fo"
Call opNAV(IE, "nav", URL)
URL = PushUpdates2Page(IE, FieldList, True)
nLandlord = PageInfoF(hLead, "Address")
nLandlord(1) = Right(URL, 15)
hLead = PageInfo_RR(hLead, "Address", nLandlord)

'#####Create Accommodation Option
Set FieldList = New Collection
    FieldList.Add Array("Name", "Pending PAX - " & PageInfoS(hLead, "Address")(0))
    FieldList.Add Array("CF00Na000000B2kKs_lkid", hLead(1))
    FieldList.Add Array("CF00Na000000B2LkB_lkid", PageInfoS(hLead, "Opportunity")(1))
URL = "https://" & Salesforce & ".salesforce.com/a1p/e?CF00Na000000B2kKu=Address&CF00Na000000B2kKu_lkid=<ID>&retURL=%2F<ID>"
URL = Replace(URL, "<ID>", PageInfoF(hLead, "Address")(1), , , vbTextCompare)
Call opNAV(IE, "nav", URL)
URL = PushUpdates2Page(IE, FieldList, True)
IE.Visible = True

hLead = PageInfo_RR(hLead, "Accommodation Option", Array("Pending", Right(URL, 15)))


Call opNAV(IE, "quit")
PAX_FakeHousingTest = hLead
End Function
Private Function Housing_Load_2019Plan(HousingLead As Variant, fPAX As Variant, Salesforce As String) As Variant
Dim IE As Object
Dim URL As String
Dim FieldList As Collection
Dim tInfo As Variant

Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & PageInfoF(fPAX, "Engagement")(1))
tInfo = PageInfoF(fPAX, "Engagement")
tInfo = PageInfo_RR(tInfo, "Account", FetchField(IE, "CF00Na0000009s148_ileinner"))
fPAX = PageInfo_RR(fPAX, "Engagement", tInfo)

Debug.Print "Engagement for Housing plan is " & PageInfoF(fPAX, "Engagement")(1)
'fPAX = PageInfo_RR(fPAX, "Engagement", PAHR_CollectInfo((PageInfoF(fPAX, "Engagement")(1)), "Case", Salesforce))
  

URL = "https://" & Salesforce & ".salesforce.com/a1l/e?ent=01Ia0000002Ky1A&RecordType=0128A0000000H7i&retURL=%2F" & PageInfoF(fPAX, "Engagement")(1)
Call opNAV(IE, "nav", URL)
    Set FieldList = New Collection
        FieldList.Add Array("CF00Na000000B2Kf5_lkid", PageInfoF(fPAX, "Engagement")(1))
        FieldList.Add Array("Name", "Test Housing Plan")
        FieldList.Add Array("00Na000000B2KgF", "Complete")
        
        FieldList.Add Array("CF00Na000000B2Kfp_lkid", PageInfoS(fPAX, "Engagement.Account")(1))
        FieldList.Add Array("00Na000000B34SF", PageInfoS(HousingLead, "Address.Street")(0))
        FieldList.Add Array("00Na000000B34SE", PageInfoS(HousingLead, "Address.Street2")(0))
        FieldList.Add Array("00Na000000B34S5", PageInfoS(HousingLead, "Address.City")(0))
        FieldList.Add Array("00Na000000B34SD", PageInfoS(HousingLead, "Address.State")(0))
        FieldList.Add Array("00Na000000B34SC", PageInfoS(HousingLead, "Address.Postal")(0))
        FieldList.Add Array("00Na000000B34S6", PageInfoS(HousingLead, "Address.Country")(0))
        
        FieldList.Add Array("00N8A000000YC5Q", PageInfoS(HousingLead, "Manager")(0))
        FieldList.Add Array("00N8A000000YC5V", PageInfoS(HousingLead, "Manager.Email")(0))
        FieldList.Add Array("00N8A000000YC5a", PageInfoS(HousingLead, "Manager.Phone")(0))
        FieldList.Add Array("CF00N8A000000YC6E_lkid", PageInfoS(HousingLead, "Accommodation Option")(1))
        'Primary Match
        'FieldList.Add Array("CF00Na000000B2Kff", PageInfoS(fPAX, "Engagement.Primary Match")(1))
URL = PushUpdates2Page(IE, FieldList, True)
IE.Visible = True
'MsgBox "check on housing plan", , "debugging"
fPAX = PageInfo_RR(fPAX, "Housing Plan", Array("Housing Plan", Right(URL, 15)))

Housing_Load_2019Plan = fPAX
Call opNAV(IE, "quit")
End Function

Sub X_Test_PAX()
Dim TestParticipant As Variant
Dim Salesforce As String
Dim HousingLead As Variant

Salesforce = "cs45"

'For j = 1 To 10

    HousingLead = PAX_FakeHousingTest(Salesforce) 'Create a new (fake) housing lead

   ' For i = 1 To 8
        TestParticipant = PAX_Create_Fake() 'Create a fake PAX
        
        TestParticipant = PAX_Application_Creator(TestParticipant, Salesforce) 'Create an application based on PAX info
        
        TestParticipant = PageInfo_RR(TestParticipant, "Engagement", PAX_Application_Sync(TestParticipant, Salesforce)) 'Sync an application (and return the engagement)
        
        TestParticipant = Housing_Load_2019Plan(HousingLead, TestParticipant, Salesforce) 'Create and fill out PAX Housing Plan
        
    'Next i
'Next j


End Sub
Sub SFDC_Record_Deleter()
Dim IE As Object
Dim dButton As Object
Dim AllElements As Object
Dim ClickValue As String
Dim URL As String
Dim TextStart As Double


URL = "https://cs45.salesforce.com/0018A000008msu1"

Call opNAV(IE, "nav", URL)
IE.Visible = True

Set AllElements = IE.document.getelementsbytagname("input")

For Each Entry In AllElements
    If Entry.Value = "Delete" Then
        Set dButton = Entry
    End If
Next Entry

'Debug.Print dButton.Class

ClickValue = dButton.onclick

TextStart = InStr(1, ClickValue, "navigateToUrl('", vbTextCompare)
TextStart = TextStart + 15
ClickValue = Mid(ClickValue, TextStart, Len(ClickValue) + 1 - TextStart)
ClickValue = left(ClickValue, Len(ClickValue) - 23)

Debug.Print "new onclick value= " & ClickValue

dButton.onclick = ClickValue
dButton.Click
End Sub

Private Function NewReportCollector(ReportID As String, Optional Salesforce As String = "na68") As Variant
Dim IE As Object

Dim tObj As Object
Dim rTable As Object
Dim RowList As Object
Dim tdList As Object

Dim CurrentTDs As Collection
Dim CurrentTRs As Collection
Dim Headers As Variant


Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & ReportID)

Set tObj = IE.document.getelementbyid("fchArea")
Set rTable = tObj.getelementsbytagname("table")
Set RowList = rTable(0).getelementsbytagname("tr")

'#Get Table Headers
Set tdList = RowList(0).getelementsbytagname("th")
Set CurrentTDs = New Collection
'Debug.Print "There should be " & tdList.Length & " headers"
For i = 0 To tdList.Length - 1
    Debug.Print "Header Found: " & tdList(i).getelementsbytagname("a")(0).innertext
    CurrentTDs.Add tdList(i).getelementsbytagname("a")(0).innertext
Next i

Headers = CollectionConverter(CurrentTDs)

Set CurrentTRs = New Collection
For R = 1 To RowList.Length - 2
    Set tdList = RowList(R).getelementsbytagname("td")
    Set CurrentTDs = New Collection
    For i = 0 To tdList.Length - 1
        If InStr(1, tdList(i).innerhtml, "</a>", vbTextCompare) > 0 Then
            Set tObj = tdList(i).getelementsbytagname("a")(0)
            CurrentTDs.Add Array(Headers(i), "", Array(tObj.innertext, Right(tObj.HREF, 15)))
        Else
            CurrentTDs.Add Array(Headers(i), "", Array(tdList(i).innertext, ""))
        End If
    Next i
    CurrentTRs.Add Array(CurrentTDs(1)(2)(0), CurrentTDs(1)(2)(1), CollectionConverter(CurrentTDs))
    'CurrentTRs.Add CollectionConverter(CurrentTDs)
Next R

'Debug.Print PageInfoF(CurrentTRs(2), "Match ID")(0)


Debug.Print IE.document.getelementsbyclassname("bPageTitle")(0).getelementsbytagname("h1")(0).innertext
NewReportCollector = Array(IE.document.getelementsbyclassname("bPageTitle")(0).getelementsbytagname("h1")(0).innertext, ReportID, CollectionConverter(CurrentTRs))

Call opNAV(IE, "quit")
End Function
Private Sub Auto_EndMatchEarly(ReportID As String)
Dim FieldList As New Collection

FieldList.Add Array("00N30000008RERi", "Ended Early")
Call Batch_Updater("Set Match stage to Ended Early", NewReportCollector(ReportID), "Match: Match Name", FieldList)

End Sub
Private Function Batch_Updater(ReportFunction As String, Report As Variant, RecordField As String, Updates As Collection, Optional Salesforce As String = "na68")
Dim IE As Object
Dim CurrentObject As Variant
Dim rLog As New Collection

If UBound(Report(2)) > 2 Then
    For i = 0 To UBound(Report(2)) - 2
        CurrentObject = PageInfoF(Report(2)(i), RecordField)
        Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & CurrentObject(1) & "/e")
        rLog.Add Array(AnchorMaker(CurrentObject), PushUpdates2Page(IE, Updates))
    Next i
        Call opNAV(IE, "quit")
    
    If Salesforce = "na68" Then 'log results
        'Call Batch_Updater_Logger("Report: " & AnchorMaker(Report) & "<br/><br/>" & HC_Roster_Print_Table(ReportFunction, Array(RecordField, "Result"), CollectionConverter(rLog)), ReportFunction)
        Call Emailv3SOS("AutoUpdate: " & ReportFunction & Format(Now(), "mm/dd/yyyy nn:ss"), "Report: " & AnchorMaker(Report) & "<br/><br/>" & HC_Roster_Print_Table(ReportFunction, Array(RecordField, "Result"), CollectionConverter(rLog)), "0031B00002geS0l")
    End If
Else
    Debug.Print "Report did not seem to have results - " & Report(0)
End If


End Function
Private Sub Batch_Updater_Logger(ReportResults As String, ReportType As String)
Dim PAX As Variant
Dim FieldList As New Collection

PAX = PAXbasicInfo("", "", "", 4)

PAX(2, 1) = "AutoUpdate: " & ReportType & " - " & Format(Now(), "mm/dd/yyyy nn:ss")
PAX(3, 1) = ReportResults
PAX(20, 2) = "0031B00002geS0l" 'email contact
'PAX(39, 2) = "0031B00002eGZCa" 'makes it related to AutoCorrection Manager

Call Send_HTMLEmail(PAX, "NoReply", FieldList)
End Sub
Sub HC_Roster_DocuSignBlast_ReportBasedReminders(ReportID As String)
Dim Report As Variant
Dim Opportunities As New Collection

Report = NewReportCollector(ReportID)

For i = 0 To UBound(Report(2))
    'Set Opportunities = cDictionary(Opportunities, Array(Report(2)(i)(2)(0)(2)(1), Report(2)(i)))
    Set Opportunities = cDictionary(Opportunities, Array(PageInfoF(Report(2)(i), "Opportunity Name")(1), Report(2)(i)))
Next i

For i = 1 To Opportunities.count
    Debug.Print "Found:  " & PageInfoF(Opportunities(i)(0)(1), "Opportunity Name")(0) & " x" & Opportunities(i)(1)
    Call HC_Roster_BlastReminder((PageInfoF(Opportunities(i)(0)(1), "Opportunity Name")(1)))
Next i


End Sub
Sub Emergency_Hurricane()
Dim IE As Object
Dim PAXList As Collection
Dim PAX As Variant

Call opNAV(IE, "nav", "https://na68.salesforce.com/00T1B00005ax5UD")

Set PAXList = Sequencer((FetchField(IE, "tsk6_ileinner")(0)), Chr(10) & "<br>")

For i = 1 To PAXList.count
    EmergencyReachOut (PAXList(i))
Next i

End Sub
Private Sub EmergencyReachOut(EngagementID As String)
Dim PAX As Variant
Dim Link As String
Dim EmailTemplate As Variant
Dim FieldList As New Collection

PAX = PAXbasicInfo(EngagementID, EngagementID, "", 4)

Link = "https://www.surveygizmo.com/s3/4568082/Natural-Disaster-Hurricane-Florence?Name=" & PAX(4, 1)
Link = Link & "&Intrax=" & PAX(8, 1)
Link = Link & "&SEVIS=" & PAX(10, 1)
Link = Link & "&R=" & PAX(28, 1)
Link = Replace(Link, " ", "%20", 1, , vbTextCompare)
PAX(42, 0) = "LINK"
PAX(42, 1) = Link
'PAX(39, 1) = PAX(11, 2)


'PAX = FetchEmailTemplate(TemplateID)
EmailTemplate = FetchEmailTemplate("00X1B000001s5Uu")
PAX = AddTemplate(PAX, EmailTemplate)

Call Send_HTMLEmail(PAX, "IWTSupport", FieldList)
End Sub

Private Function CaseDataLoader(EngagementID As String, Defaults As Collection) As String
Dim PAX As Variant
Dim PrimaryMatch As Variant
Dim IE As Object
Dim CaseID As String
Dim CaseSettings As Collection

Set CaseSettings = Defaults


If left(EngagementID, 3) = "a0d" Then
    PAX = PAHR_CollectInfo(EngagementID, "Case")
    
    CaseSettings.Add Array("cas3_lkid", PageInfoS(PAX, "Opportunity.Primary Contact")(1))
    CaseSettings.Add Array("CF00Na000000B2eGh_lkid", EngagementID)
    
    PrimaryMatch = PageInfoF(PAX, "Primary Match")
    If left(PrimaryMatch(1), 3) = "a0R" Then
        CaseSettings.Add Array("CF00Na000000B2eGi_lkid", PrimaryMatch(1))
        CaseSettings.Add Array("CF00N1300000BOWTk_lkid", PageInfoF(PrimaryMatch, "Host Account")(1))
    End If
    
    Call opNAV(IE, "nav", "https://na68.salesforce.com/500/e?RecordType=012a0000001NbNh")
    Call PushUpdates2Page(IE, CaseSettings, True)
    
    CaseID = IE.LocationURL
        Call opNAV(IE, "quit")
    CaseID = Mid(CaseID, InStr(1, CaseID, "/500", vbTextCompare) + 1, 15)
    Debug.Print "New Case ID is: " & CaseID
Else
    Debug.Print "Not a valid Engagement ID"
    CaseID = ""
End If

CaseDataLoader = CaseID
End Function

Sub Emailv3_SurveySender(EmailTemplate As String, BaseLink As String, DataSource As String)
Dim MergeFields As Variant
Dim MergeAnswers As New Collection
Dim tValue As Variant
Dim InfoPackage As Variant
Dim Template As Variant
Dim SourceInfo As Collection
Dim IE As Object
Dim cLine As Collection

'Emailv3_SurveySender("00X1B000001s5eu","https://s-33e74c-i.sgizmo.com/s3/i-<ID>-2783555?sguid=<ID>","00T1B00005axXE2")

Call opNAV(IE, "nav", "https://na68.salesforce.com/" & DataSource)
Set SourceInfo = Sequencer((FetchField(IE, "tsk6_ileinner")(0)), Chr(10) & "<br>")
Call opNAV(IE, "quit")

Template = Emailv3_TemplateManager(EmailTemplate)
Template = PageInfo_RR(Template, "Info Box", Array("", ""))
Template = PageInfo_RR(Template, "From", "NoReply")

For i = 1 To SourceInfo.count
    Set cLine = Sequencer(SourceInfo(i), ",")
        
    If left((cLine(1)), 3) = "a0d" Then
        InfoPackage = PAHR_CollectInfo((cLine(1)), "Survey")
        InfoPackage = PageInfo_RR(InfoPackage, "Case", Array(cLine(3), cLine(3)))
        InfoPackage = PageInfo_RR(InfoPackage, "Link", Replace(BaseLink, "<ID>", (cLine(2)), 1, , vbTextCompare))
        InfoPackage = PageInfo_RR(InfoPackage, "Email", Template)
        
        InfoPackage = Emailv3_MergeAnswerSheet(InfoPackage)
        
        Call Emailv3Sender(InfoPackage, , False)
    Else
        Debug.Print "ID invalid!!!!!!!!"
    End If
Next i
    'Print_L2_HTML (InfoPackage)
End Sub

Private Sub Notifcation_Management_DSemailer(PAXList As Collection, Optional SummaryReport As String = "")
Dim Engagement As Variant
Dim tValue As Variant
Dim FieldList As Collection
Dim tRow As Collection
Dim cLink As Collection
Dim AprilList As New Collection
Dim Email As Variant

For i = 1 To PAXList.count
    Engagement = PAXList(i)
    
    'If PageInfoF(Engagement, "Needs New Notification")(0) = "True" Then
        If False Then
            tValue = PageInfoF(Engagement, "Notifications")
                Set FieldList = New Collection
                    FieldList.Add Array("Owner", "Owner")
                    FieldList.Add Array("Status", "00Na000000B2KhX")
            For n = 0 To UBound(tValue)
                Debug.Print PageInfoF(tValue(n), "Type")(0)
                If PageInfoF(tValue(n), "Type")(0) = "Parent" Then
                    Engagement = PageInfo_RR(Engagement, "Parent Notification", Retrieve_Page_Info((PageInfoF(tValue(n), "Notification Name")(1)), FieldList))
                End If
            Next n
        End If
        
        Set tRow = New Collection
        Set cLink = New Collection
            tRow.Add Engagement(1)
                    cLink.Add "https://na68.salesforce.com/a1g/e?CF00Na000000B2KhT=ENG&CF00Na000000B2KhT_lkid=" & Engagement(1) & "&retURL=" & Engagement(1)
            'tRow.Add AnchorMaker(Engagement)
            
        tValue = PageInfoF(Engagement, "Primary Match")
            tRow.Add tValue(1)
            'tRow.Add AnchorMaker(tValue)
                    cLink.Add "&CF00Na0000009s14r=Match&CF00Na0000009s14r_lkid=" & tValue(1)
                    
            'tRow.Add AnchorMaker(PageInfoF(tValue, "Host Account"))
                tString = PageInfoF(tValue, "Host Account")(0) & " has offered you a job through Intrax Work Travel. However, your position is not confirmed until you accept by signing the job offer."
            tRow.Add tString
                    cLink.Add "&00Na0000009s14p=" & tString
                    
        tValue = PageInfoF(Engagement, "Account")
            tRow.Add tValue(1)
            tRow.Add AnchorMaker(tValue)
                    cLink.Add "&CF00Na000000B2eHc=Account&CF00Na000000B2eHc_lkid=" & tValue(1)
                    
        tValue = PageInfoS(Engagement, "Opportunity.Primary Contact")
            tRow.Add tValue(1)
            'tRow.Add AnchorMaker(tValue)
                    cLink.Add "&CF00Na0000009s14q=Con&CF00Na0000009s14q_lkid=" & tValue(1)
                    
            tRow.Add PageInfoS(Engagement, "Primary Match.Docusign Link")(0)
                    cLink.Add "&00Na000000B30fi=" & CleanHTMLEmail((PageInfoS(Engagement, "Primary Match.Docusign Link")(0)))
                    
        tValue = PageInfoS(Engagement, "Parent Notification")
            tRow.Add tValue(1)
            'tRow.Add AnchorMaker(tValue)
                    cLink.Add "&CF00Na000000B30fl=Parent&CF00Na000000B30fl_lkid=" & tValue(1)
            tRow.Add PageInfoF(tValue, "Owner")(1)
            tRow.Add "Congratulations! A new Job Offer has been extended to you and requires your signature!"
            tRow.Add "Offer Extended"
            tRow.Add "Not Started"
            tRow.Add "Work Travel"
                    cLink.Add "&00Na000000B2KhX=Not Started&00Na0000009s14u=Offer Extended&00Na000000B2KhU=Work Travel"
                    cLink.Add "&00Na000000B2KhY=Congratulations! A new Job Offer has been extended to you and requires your signature!"
                    tString = Replace(Collection2String(cLink), " ", "%20", 1, , vbBinaryCompare)
            tRow.Add "<a href=""" & tString & """>CreateLink</a>"
        AprilList.Add CollectionConverter(tRow)
    'End If

Next i

If AprilList.count > 0 Then
    Set tRow = New Collection
        tRow.Add "Hello April,<br><br>Below is an artisanal hand crafted table of PAX who need to have a notificaiton batched."
        tRow.Add "<br/><br/>I believe these are the criteria being reviewed:"
        tRow.Add "<ul><li>Engagement has Parent Notification created in last 5 days</li><li>Has eligible match<ul><li>Stage=Applied</li><li>Offer Status = IP Offered</li></ul></li><li>Does not have a notification with PAX sig action URL</li></ul>"
        tRow.Add SummaryReport & "<br/>"
        tRow.Add HC_Roster_Print_Table("Docusigns!", Array("Engagement__c", "Match_c", "Body__c", "Account__c", "Account", "Contact__c", "Action_URL__c", "Parent_Notification__c", "OwnerId", "Subject__c", "Type__c", "Status__c", "Intrax_Program__C", "New Notification Link"), CollectionConverter(AprilList))
        tRow.Add "<br/><br/>"
        tRow.Add "<br/>Thanks,<br/>Andrew"
        
    Email = Emailv3c("GTA#13102 - Batch Sheet for missing DocuSign Notifications", Collection2String(tRow), "0031B00002gfWRU", "5001B000016NDrA")
    Email = Array("Engagement", "", Array(Email))
    Call Emailv3Sender(Email, , False)
    'Email = PageInfo_RR(Email, "Body", HC_Roster_Print_Table("Docusigns!", Array("Engagement ID", "Engagement", "Match ID", "Match", "Host Account", "Body", "Account ID", "Account", "Primary Contact ID", "P Contact", "Action URL", "Parent ID", "Parent Notification", "Owner ID", "Subject", "Type", "Status", "Intrax Program"), CollectionConverter(AprilList)))
Else
    Debug.Print "Did not any matches to fix"
End If



End Sub
Sub GTA13102_Missing_DocuSign_NotificationFixer_V2(Report As Variant)
Dim FieldList As Collection
Dim tValue As Variant
Dim Engagement As Variant
Dim AprilList As New Collection
Dim tRow As Collection
Dim cLink As Collection
Dim tString As String
Dim pResults As New Collection

'UBound(Report(2)) - 1
For i = 0 To UBound(Report(2)) - 1
    Engagement = DocuSign_PAX_DS_Sig_Package_V2((PageInfoF(Report(2)(i), "Engagement Name")(1)))
    
    If IsArray(Engagement) Then
        pResults.Add Array(AnchorMaker(Engagement), "Needs Notification") 'will show on batch sheet
        
        Set FieldList = New Collection
            FieldList.Add Array("Owner", "Owner")
            FieldList.Add Array("Status", "00Na000000B2KhX")
        Engagement = PageInfo_RR(Engagement, "Parent Notification", Retrieve_Page_Info((PageInfoF(Report(2)(i), "Notification Name")(1)), FieldList))
            
        AprilList.Add Engagement

    Else
        Debug.Print "Did not find anything that needs fixing"
        pResults.Add Array(AnchorMaker(PageInfoF(Report(2)(i), "Engagement Name")), Engagement) 'add engagement that was checked but didn't meet requirements
    End If
Next i

If AprilList.count > 0 Then
    tString = HC_Roster_Print_Table("List of Engagements that were checked", Array("Engagement", "result"), CollectionConverter(pResults))
    Debug.Print tString
    Call Notifcation_Management_DSemailer(AprilList, tString)
End If

Dim IE As Object
Call opNAV(IE, "nav", "https://na68.salesforce.com/5001B00001Cl0ky/e?cas15=Last Checked " & Format(Now(), "mm/dd/yyyy hh:nn"))
Call HitSave(IE)
Call opNAV(IE, "quit")

End Sub

Private Function DocuSign_PAX_DS_Sig_Package_V2(EngagementID As String) As Variant
Dim Match As Variant
Dim FieldList As Collection
Dim PAX As Variant
Dim PAXOnly As Boolean
Dim mNot As Integer
Dim Lholder As Variant
Dim Checkpoint As Boolean
Dim Target As String


PAX = PAHR_CollectInfo(EngagementID, "Survey")

Lholder = PageInfoF(PAX, "Matches")

Checkpoint = False
If IsArray(Lholder) Then
    For i = 0 To UBound(Lholder)
        Debug.Print Lholder(i)(0) & PageInfoF(Lholder(i), "Stage")(0) & PageInfoF(Lholder(i), "Offer Status")(0)
        If PageInfoF(Lholder(i), "Stage")(0) = "Applied" Then
        If PageInfoF(Lholder(i), "Offer Status")(0) = "IP Offered" Then
            PAX = PageInfo_RR(PAX, "Primary Match", Lholder(i))
            Checkpoint = True
            i = 99
        End If
        End If
    Next i
End If

If Checkpoint Then
    Target = PageInfoF(PAX, "Primary Match")(1)
    Debug.Print "Search string is: " & Target
    Lholder = PageInfoF(PAX, "Notifications")
    PAXOnly = False
        For i = 0 To UBound(Lholder)
            'Debug.Print "Notification: " & PageInfoF(Lholder(i), "Action URL")(0) & " | " & InStr(1, (PageInfoF(Lholder(i), "Action URL")(0)), Target, vbTextCompare)
            If InStr(1, (PageInfoF(Lholder(i), "Action URL")(0)), Target, vbTextCompare) > 0 Then
            If InStr(1, (PageInfoF(Lholder(i), "Action URL")(0)), "uType=Participant", vbTextCompare) > 0 Then
                PAXOnly = True
            End If
            End If
        Next i

    If PAXOnly Then
    Debug.Print "Notification Found!"
    PAX = "A matching notification was found"
    Else
        Set FieldList = New Collection
            FieldList.Add Array("Engagement", "CF00Na0000009s14h")
            FieldList.Add Array("Service Level", "00Na000000B2xTf")
            FieldList.Add Array("Position Name", "CF00N30000008REJy")
            FieldList.Add Array("Match Name", "Name")
            FieldList.Add Array("Offer Status", "00Na000000B2SUq")
            FieldList.Add Array("Sent to", "00N1B00000BLz5K")
            FieldList.Add Array("Reason Detail Other", "00N1300000BLZQq")
            FieldList.Add Array("JO Rejection Reason", "00N1B00000BLz5J")
            FieldList.Add Array("Match Date", "00N30000008RERs")
            FieldList.Add Array("Reason", "00Na000000B2Zh4")
            FieldList.Add Array("Reason Detail Other", "00N1300000BLZQq")
            FieldList.Add Array("Start Date", "00Na0000009qRci")
            FieldList.Add Array("End Date", "00Na0000009qRcs")
            FieldList.Add Array("Stage", "00N30000008RERi")
            FieldList.Add Array("Notifications", "_00Na0000009s14r")
            FieldList.Add Array("DocuSign Status", "_00Na000000B30fn")
            FieldList.Add Array("Host Account", "CF00N1300000BOCaF")
        
        Match = Retrieve_Page_Info((PageInfoF(PAX, "Primary Match")(1)), FieldList)
        Match = HC_Roster_Position_Add_Docusign(Match, False)
            Lholder = PageInfoF(Match, "Position Name")
            Lholder = Array(Lholder(0), Lholder(1), Array(Array("Host Opporunity", Match(1))))
        Match = PageInfo_RR(Match, "Position Name", Lholder)
        
        PAX = PageInfo_RR(PAX, "Needs New Notification", "True")
        PAX = PageInfo_RR(PAX, "Primary Match", Match)
    End If
Else
    Debug.Print "Engagement does not have  matching meeting requirements"
    PAX = "Did not find any eligible matches"
End If

DocuSign_PAX_DS_Sig_Package_V2 = PAX
End Function
Private Sub DocuSign_PAX_DS_SendLink(PAX As Variant)

PAX = PageInfo_RR(PAX, "Email", Emailv3_TemplateManager("00X1B000001s5xS"))
Debug.Print "Starting Merger"
PAX = Emailv3_MergeAnswerSheet(PAX)
Debug.Print "Starting Send"
Call Emailv3Sender(PAX)

End Sub

Sub ZZ_NewEmailTest()
Dim Template As Variant

Template = Emailv3c("Test Test Email Test", "Hello,<br><br>This is a test email to see if this works.", "0031B00002gfWRU", "5001B000016NDrA")
Template = Array("Engagement", "", Array(Template))
Call Emailv3Sender(Template, , True)

End Sub


Private Function Searchv3_Collator(Searches As Collection) As Variant
Dim sResults As New Collection
Dim sTypes As New Collection
Dim tempRes As Collection
Dim ColRes As New Collection
Dim tRes As Variant

For i = 1 To Searches.count
    sResults.Add Searchv3((Searches(i)(0)), Searches(i)(1))
        For j = 0 To UBound(Searches(i)(1))
            Set sTypes = cDictionary(sTypes, Array(Searches(i)(1)(j)))
        Next j
Next i


For i = 1 To sTypes.count
    Set tempRes = New Collection
    For j = 1 To sResults.count
    
        tRes = PageInfoF(sResults(j), (sTypes(i)(0)(0)))
        If IsArray(tRes) Then
            For k = 0 To UBound(tRes)
                tempRes.Add tRes(k)
            Next k
        End If
    
    Next j
    Debug.Print "Found " & tempRes.count & " results for " & sTypes(i)(0)(0)
    If tempRes.count > 0 Then
        ColRes.Add Array(sTypes(i)(0)(0), "", CollectionConverter(tempRes))
    End If
Next i

Searchv3_Collator = Array("Search Results", Searches.count, CollectionConverter(ColRes))

End Function
Private Sub pTaggerv3(PositionInfoID As String)
Dim FieldList As New Collection
Dim PosInfo As Variant
Dim tVar As Variant
Dim SearchResults As Variant

    FieldList.Add Array("Engagement", "CF00N1300000BQnuw")
    FieldList.Add Array("Status", "00N1300000BQpYx")
    FieldList.Add Array("Applicant Info", "CF00Na0000009s13r")
    FieldList.Add Array("Company Name", "00Na0000009s155")
    FieldList.Add Array("Street", "00Na0000009s159")
    FieldList.Add Array("Street 2", "00Na0000009s15A")
    FieldList.Add Array("City", "00Na0000009s152")
    FieldList.Add Array("State", "00Na0000009s158")
    FieldList.Add Array("Postal Code", "00Na0000009s157")
    FieldList.Add Array("Company Country", "00Na0000009s153")
    FieldList.Add Array("Company Phone", "00Na0000009s156")
    FieldList.Add Array("Company Website", "00Na0000009s15B")
    FieldList.Add Array("Company Description", "00Na0000009s154")
    FieldList.Add Array("EIN", "00N1300000BRdfg")
    FieldList.Add Array("Position Title", "00Na0000009s15F")
    FieldList.Add Array("Pay Rate", "00N1300000BQpYv")
    FieldList.Add Array("Pay Frequency", "00N1B00000BLwsR")
    FieldList.Add Array("Pay Rate Basis", "00N1300000BQz2k")
    FieldList.Add Array("Tipped Position", "00N1300000BQpYy")
    FieldList.Add Array("Is Primary SOA", "00N1300000BQpYt")
    FieldList.Add Array("Approximate hours of work per week", "00N1B00000BLwsP")
    FieldList.Add Array("Housing Provided By", "00N1B00000BLwsQ")
    FieldList.Add Array("Start Date", "00N1300000BQpYw")
    FieldList.Add Array("End Date", "00N1300000BQpYq")
    FieldList.Add Array("Position Description", "00Na0000009s15E")
    FieldList.Add Array("Position Category", "00Na0000009s15D")
    FieldList.Add Array("Intrax Program Category", "00N1300000BQxvm")
    FieldList.Add Array("Functional Areas Other", "00N1300000BQyft")
    FieldList.Add Array("Supervisor First Name", "00Na0000009s15H")
    FieldList.Add Array("Supervisor Last Name", "00Na0000009s15I")
    FieldList.Add Array("Supervisor Phone", "00Na0000009s15J")
    FieldList.Add Array("Supervisor Email", "00Na0000009s15G")

PosInfo = Retrieve_Page_Info(PositionInfoID, FieldList)

tVar = Array(PageInfoF(PosInfo, "Supervisor First Name")(0), PageInfoF(PosInfo, "Supervisor Last Name")(0))
    If UCase(tVar(0)) = UCase(tVar(1)) Then
        tVar = tVar(0)
    Else
        tVar = tVar(0) & " " & tVar(1)
    End If
PosInfo = PageInfo_RR(PosInfo, "Supervisor Name", Array(tVar, ""))

PosInfo = PageInfo_RR(PosInfo, "Address", APEv3_RecordFields2Address(PosInfo))

Set FieldList = New Collection

Set FieldList = New Collection
    FieldList.Add Array(CleanPhone((PageInfoF(PosInfo, "Company Phone")(0)))(0), Array("Contacts", "Accounts"))
    FieldList.Add Array(CleanPhone((PageInfoF(PosInfo, "Supervisor Phone")(0)))(0), Array("Contacts", "Accounts"))
    FieldList.Add Array(PageInfoF(PosInfo, "Supervisor Email")(0), Array("Contacts", "Accounts"))
    FieldList.Add Array(PageInfoF(PosInfo, "Supervisor Name")(0), Array("Contacts"))

SearchResults = Searchv3_Collator(FieldList)

End Sub

Sub Test_Searchv3()
Dim IE As Object
Dim tValue As Variant
Dim Sections As Object
Dim tObj As Object
Dim SearchResults As Variant
Dim Results As Collection
Dim rScraper As New Collection

SearchResults = Searchv3("501 Adams Dells", Array("Contacts", "Accounts", "Assessments", "Accommodation Sites"))

'Debug.Print InfoPrinter(SearchResults)


Set Results = New Collection

rScraper.Add Array("Accommodation Sites", "")
'rScraper.Add Array("Accounts", "Account Name")

For j = 1 To rScraper.count
    tValue = PageInfoF(SearchResults, (rScraper(j)(0)))
    If IsArray(tValue) Then
        For i = 0 To UBound(tValue)
            If rScraper(j)(1) = "" Then
                Set Results = cDictionary(Results, Array(tValue(i)(1), tValue(i)))
            Else
                Set Results = cDictionary(Results, Array(PageInfoF(tValue(i), (rScraper(j)(1)))(1), tValue(i)))
            End If
        Next i
    End If
Next j

For i = 1 To Results.count
    Debug.Print Results(i)(0)(0) & " x " & Results(i)(1)
Next i



If False Then
Call opNAV(IE, "nav", "https://na68.salesforce.com/_ui/search/ui/UnifiedSearchResults?searchType=2&sen=a0O&sen=a1p&sen=a0R&sen=a0Q&sen=a0T&sen=a0U&sen=00O&sen=a0d&sen=00T&sen=00U&sen=a4g&sen=a0c&sen=a0g&sen=a0l&sen=a20&sen=02s&sen=001&sen=003&sen=005&sen=500&sen=006&sen=a1g&sen=a3h&sen=701&sen=a1h&sen=a1l&str=kelly")

Set Sections = IE.document.getelementsbyclassname("bPageBlock brandSecondaryBrd secondaryPalette")
    For i = 0 To (Sections.Length - 1)
        Set tObj = Sections(i).getelementsbytagname("table")
        Debug.Print tObj(0).Summary
        Debug.Print Sections(i).getelementsbytagname("div")(1).ID
    Next i


tValue = Pull_Table_From_Page2(IE, "Contact_body")
Debug.Print InfoPrinter(tValue)
End If

'Debug.Print InfoPrinter(NewReportCollector("_ui/search/ui/UnifiedSearchResults?searchType=2&sen=a0O&sen=a1p&sen=a0R&sen=a0Q&sen=a0T&sen=a0U&sen=00O&sen=a0d&sen=00T&sen=00U&sen=a4g&sen=a0c&sen=a0g&sen=a0l&sen=a20&sen=02s&sen=001&sen=003&sen=005&sen=500&sen=006&sen=a1g&sen=a3h&sen=701&sen=a1h&sen=a1l&str=kelly", , "Contact_body"))

End Sub
Private Sub PAHR_ConvertLandlord2018toAccount2019(LandlordID As String)
Dim FieldList As Collection
Dim Landlord As Variant

Set FieldList = New Collection
    FieldList.Add Array("Name", "Name")
    FieldList.Add Array("Email", "00N1300000BLni0")
    FieldList.Add Array("Phone", "00N1300000BLni6")
    FieldList.Add Array("Website", "00N1300000BLni8")
    FieldList.Add Array("Blacklisted", "00N1300000BLnhy")
    FieldList.Add Array("Comments", "00N1300000BLnhz")
    FieldList.Add Array("Sites", "_00N1300000BLnhG")
    FieldList.Add Array("Assessments", "_00N1300000BLnhl")
    
Landlord = Retrieve_Page_Info(LandlordID, FieldList)

Call PAHRv3_Landlord(Landlord)


End Sub

Private Sub PAHRv3_Landlord(ByRef Landlord As Variant, Optional Salesforce As String = "na68")
Dim tVar As Variant
Dim FieldList As Collection
Dim TempList As Collection
Dim SearchResults As Variant
Dim tempResult As Variant
Dim Landlords As Collection
Dim FinalResults As New Collection

Set FieldList = New Collection
    FieldList.Add Array(PageInfoF(Landlord, "Phone")(0), Array("Contacts", "Accounts", "Landlords"))
    FieldList.Add Array(PageInfoF(Landlord, "Email")(0), Array("Contacts", "Accounts", "Landlords"))
    FieldList.Add Array(PageInfoF(Landlord, "Website")(0), Array("Contacts", "Accounts", "Landlords"))
    FieldList.Add Array(Landlord(0), Array("Contacts", "Accounts", "Landlords"))


SearchResults = Searchv3_Collator(FieldList)
'SearchResults = Searchv3((PageInfoF(Landlord, "Phone")(0)), Array("Contacts", "Accounts", "Landlords"))
Debug.Print InfoPrinter(SearchResults)

tempResult = PageInfoF(SearchResults, "Landlords")
If IsArray(tempResult) Then
    Set Landlords = New Collection
    For i = 0 To UBound(tempResult)
        Set Landlords = cDictionary(Landlords, Array(tempResult(i)(1), tempResult(i)))
    Next i
    
    Set FieldList = New Collection
    
    tempResult = MergeSort(Landlords)
    
    If left(tempResult(0)(0)(1)(0), 3) = "001" Then
        FinalResults.Add tempResult(0)(0)(1)(0)
    End If
    
    Debug.Print "results comming... " & UBound(tempResult) + 1
    Debug.Print UBound(tempResult(0))
    'Debug.Print InfoPrinter(tempResult(0))
Else
    Debug.Print "didn't recognize results"
End If

tempResult = PageInfoF(SearchResults, "Contacts")
If IsArray(tempResult) Then
    Debug.Print "FOund contacts as results"
    Set TempList = New Collection
    
    Set FieldList = New Collection
        FieldList.Add Array("Record Type", "RecordType")
        FieldList.Add Array("Status", "00N300000068N8x")
    
    For i = 0 To UBound(tempResult) 'this consolidates the contacts found so we don't look up a contact more than once
        Set TempList = cDictionary(TempList, Array(tempResult(i)(1), tempResult(i)))
    Next i
    
    Set Landlords = New Collection
    For i = 1 To TempList.count
        tVar = Retrieve_Page_Info((PageInfoF(TempList(i)(0)(1), "Account Name")(1)), FieldList) 'Contact #i, (0) ID first package, (1) record itself
        
        Debug.Print "CHecking if account page is a landlord " & PageInfoF(tVar, "Record Type")(0)
        If PageInfoF(tVar, "Record Type")(0) = "Landlord" Then
            Debug.Print "adding Key for " & TempList(i)(0)(1)(1)
            Landlords.Add Array(TempList(i)(1), TempList(i)(0)(1))
        Else
            Debug.Print "Contact found but is not related to a landlord account"
        End If
    Next i
    
    If Landlords.count > 0 Then
        Set FieldList = New Collection
        
        tempResult = MergeSort(Landlords)
        'Debug.Print tempResult(0)(0)(0)
        Debug.Print tempResult(0)(0)(1)
        FinalResults.Add tempResult(0)(0)
    Else
        Debug.Print "No landlord based contacts found"
    End If
                
Else
    Debug.Print "didn't recognize results"
End If

If FinalResults.count = 0 Then
    Call PAHRv3_CreateNewLandlord(Landlord)
    Debug.Print "New landlord contact at: " & Landlord(1)
End If

End Sub
Private Function PAHRv3_CreateNewLandlord(Landlord As Variant, Optional Salesforce As String = "na68") As Variant
Dim IE As Object
Dim FieldList As Collection
Dim AccountID As String
Dim tCol As Collection
Dim tString As String



Set FieldList = New Collection 'These are the Account Fields
    FieldList.Add Array("acc2", "(Landlord) " & Landlord(0))
    FieldList.Add Array("00N300000068N8x", "Prospect")
    FieldList.Add Array("00N300000068JZd_selected", "Work Travel")
    FieldList.Add Array("acc6", "Landlord")
    FieldList.Add Array("00N300000068R7Q", PageInfoF(Landlord, "Email")(0))
    FieldList.Add Array("acc10", PageInfoF(Landlord, "Phone")(0))
    
Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/001/e?retURL=%2F001%2Fo&RecordType=0121B000001Fuv9&ent=Account")
AccountID = PushUpdates2Page(IE, FieldList, True)
AccountID = Mid(AccountID, InStr(1, AccountID, "001", vbTextCompare), 15)
Debug.Print AccountID

Set FieldList = New Collection 'These are the Contact Fields
        Set tCol = Sequencer((Landlord(0)), " ") 'elaborate system for pulling out last name
        If tCol.count > 0 Then
            FieldList.Add Array("name_lastcon2", tCol(tCol.count))
                tCol.Remove (tCol.count)
            FieldList.Add Array("name_firstcon2", Collection2String(tCol, True, " "))
        Else
            FieldList.Add Array("name_lastcon2", Landlord(0))
        End If

    FieldList.Add Array("con4_lkid", AccountID)
    FieldList.Add Array("con5", "Landlord")
    FieldList.Add Array("con15", PageInfoF(Landlord, "Email")(0))
    FieldList.Add Array("con10", PageInfoF(Landlord, "Phone")(0))
    
Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/003/e")

Landlord(1) = RecoverPageID(PushUpdates2Page(IE, FieldList, True), "003")
Landlord = PageInfo_RR(Landlord, "Account", Array(Landlord(0), AccountID))

Call opNAV(IE, "quit")
PAHRv3_CreateNewLandlord = Landlord
End Function
Private Function PAHRv3_CreateNewSite(Address As Variant, Optional Salesforce As String = "na68") As Variant
Dim FieldList As New Collection
Dim AnswerSheet As New Collection
Dim IE As Object
Dim newSiteID As String

AnswerSheet.Add Array("00N30000009ot82", "Street")
AnswerSheet.Add Array("00N30000009ot7d", "City")
AnswerSheet.Add Array("00N30000009ot7x", "State")
AnswerSheet.Add Array("00N30000009ot7s", "Zip")
AnswerSheet.Add Array("00Na000000B2LkJ", "Type")


For i = 1 To AnswerSheet.count
    FieldList.Add Array(AnswerSheet(i)(0), PageInfoF(Address, (AnswerSheet(i)(1)))(0))
Next i

    FieldList.Add Array("Name", PageInfoF(Address, "Clarity")(0))
    FieldList.Add Array("00N30000009ot7i", "United States")
    FieldList.Add Array("00N1300000BLnh3", "Prime Site")
    
Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/a0c/e?")
newSiteID = RecoverPageID(PushUpdates2Page(IE, FieldList, True), "a0c")
    If newSiteID <> "" Then
        Address(0) = FetchField(IE, "Name_ileinner")(0)
        Address(1) = newSiteID
    Else
        Debug.Print "Error saving new site"
    End If
    
Call opNAV(IE, "quit")
PAHRv3_CreateNewSite = Address
End Function
Private Sub PAHRv3_Master(EngagementID As String)
Dim PAX As Variant
Dim HousingPlan As Variant
Dim FieldList As Collection
Dim Landlord As Variant

PAX = PAHR_CollectInfo(EngagementID, "Housing")

Debug.Print InfoPrinter(PageInfoS(PAX, "Housing Plan Assessment.PAX Address"))

HousingPlan = PageInfoF(PAX, "Housing Plan Assessment")

Set FieldList = New Collection
    FieldList.Add Array("Phone", "", CleanPhone((PageInfoS(HousingPlan, "Landlord or Property Manager Phone")(0))))
    FieldList.Add Array("Email", "", PageInfoS(HousingPlan, "Landlord or Property Manager Email"))
    FieldList.Add Array("Website", "", PageInfoS(HousingPlan, "Property Manager Website"))
    
Landlord = Array(PageInfoS(HousingPlan, "Name of Landlord or Property Manager")(0), "", CollectionConverter(FieldList))

PAX = PageInfo_RR(PAX, "Landlord", Landlord)
PAX = PageInfo_RR(PAX, "Housing Address", PageInfoS(PAX, "Housing Plan Assessment.PAX Address"))

Call PAHRv3_Creator(PAX)
'Call PAHRv3_Landlord(PAX)

End Sub
Private Sub PAHRv3_CreateNewOpportunity(ByRef Package As Variant, Optional Salesforce As String = "na68")
Dim FieldList As Collection
Dim IE As Object
Dim OpportunityID As String
Dim OppName As String

Set FieldList = New Collection
    OppName = PageInfoF(Package, "Season")(0) & " " & PageInfoF(Package, "Year")(0)
    FieldList.Add Array("opp3", OppName)
    FieldList.Add Array("opp4_lkid", (PageInfoS(Package, "Landlord.Account")(1)))
    FieldList.Add Array("CF00Na0000009rUSE_lkid", (PageInfoS(Package, "Landlord")(1)))
    FieldList.Add Array("opp11", "Prospecting")
    FieldList.Add Array("opp9", Format(DateAdd("d", 14, Now()), "mm/dd/yyyy"))
    FieldList.Add Array("00N30000008QXjl", (PageInfoF(Package, "Season")(0)))
    FieldList.Add Array("00N300000068ZDp", (PageInfoF(Package, "Year")(0)))

Call opNAV(IE, "nav", "https://na68.salesforce.com/006/e?RecordType=0121B000001FuvA&ent=Opportunity")
OpportunityID = RecoverPageID(PushUpdates2Page(IE, FieldList, True), "006")
Package = PageInfo_RR(Package, "Landlord Opp", Array(PageInfoS(Package, "Landlord.Account")(0) & ": " & OppName, OpportunityID))

Call PAHRv3_CreateNewAccomOption(Package)
Call opNAV(IE, "quit")
End Sub
Private Sub PAHRv3_CreateNewAccomOption(ByRef Package As Variant, Optional Salesforce As String = "na68")
Dim FieldList As Collection
Dim AccomOptionID As String
Dim aoName As String
Dim IE As Object

'Safety Check
Set FieldList = New Collection
    FieldList.Add Array("Landlord Opp", "006")
    FieldList.Add Array("Housing Address", "a0c")
    FieldList.Add Array("Landlord", "003")
    FieldList.Add Array("Landlord.Account", "001")
    FieldList.Add Array("Housing Plan Assessment", "a1l")
    
For i = 1 To FieldList.count
    If left(PageInfoS(Package, (FieldList(i)(0)))(1), 3) <> FieldList(i)(1) Then
        Debug.Print "Failed to match " & FieldList(i)(1) & " when checking the value of " & PageInfoS(Package, (FieldList(i)(0)))(1)
    End If
Next i
'End SafetyCheck

Set FieldList = New Collection
    aoName = left((PageInfoF(Package, "Season")(0)), 3) & Right((PageInfoF(Package, "Year")(0)), 2) & " - " & PageInfoF(Package, "Housing Address")(0)
    FieldList.Add Array("Name", aoName)
    FieldList.Add Array("CF00Na000000B2kKs_lkid", PageInfoS(Package, "Landlord.Account")(1))
    FieldList.Add Array("CF00Na000000B2kKu_lkid", PageInfoS(Package, "Housing Address")(1))
    FieldList.Add Array("CF00Na000000B2LkB_lkid", PageInfoS(Package, "Landlord Opp")(1))
    FieldList.Add Array("00N1B00000BPTO0", "Pending")

Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/a1p/e")
AccomOptionID = RecoverPageID(PushUpdates2Page(IE, FieldList, True), "a1p")

Call opNAV(IE, "quit")
Package = PageInfo_RR(Package, "Accommodation Option", Array(aoName, AccomOptionID))
End Sub
Private Function RecoverPageID(URL As String, Optional RecordType As String = "") As String
Dim RecordStart As Double

Debug.Print "Attempting to recover a " & RecordType & " from " & URL
RecordStart = InStr(1, URL, "/" & RecordType, vbTextCompare)
If RecordStart > 0 Then
    URL = Mid(URL, RecordStart + 1, 15)
Else
    URL = ""
End If

RecoverPageID = URL
End Function
Private Sub PAHRv3_CreateLink_Plan2AccomOption(ByRef Package As Variant, Optional Salesforce As String = "na68")
Dim IE As Object
Dim FieldList As New Collection

Call opNAV(IE, "nav", "https://" & Salesforce & ".salesforce.com/" & PageInfoF(Package, "Housing Plan Assessment")(1) & "/e")
    FieldList.Add Array("CF00N1300000BLbZF_lkid", PageInfoF(Package, "Accommodation Option")(1))
Call PushUpdates2Page(IE, FieldList)

Call opNAV(IE, "quit")
End Sub
Private Sub PAHRv3_CreateHousingValidationAssessment(ByRef Package As Variant, Optional Salesforce As String = "na68")
Dim IE As Object
Dim FieldList As New Collection
Dim HousingPlan As Variant

HousingPlan = PageInfoF(Package, "Housing Plan Assessment")

FieldList.Add Array("Name", left((PageInfoF(Package, "Season")(0)), 3) & Right((PageInfoF(Package, "Year")(0)), 2) & " - " & PageInfoF(Package, "Housing Address")(0))
FieldList.Add Array("CF00N1300000BLnhV_lkid", PageInfoS(Package, "Housing Address")(1))
FieldList.Add Array("00Na000000B2KgF", "Not Yet Started")
FieldList.Add Array("00N1300000BLnhq", PageInfoF(Package, "Season")(0))
FieldList.Add Array("00N1300000BLnhn", PageInfoF(Package, "Year")(0))
FieldList.Add Array("00N1300000BLnho", PageInfoF(HousingPlan, "Rent")(0))
FieldList.Add Array("00N1300000BHFNh", PageInfoF(HousingPlan, "Rent Basis")(0))
FieldList.Add Array("00N1300000BLnhd", PageInfoF(HousingPlan, "Deposit")(0))
FieldList.Add Array("00N1300000BLnha", PageInfoF(HousingPlan, "Bedrooms")(0))
FieldList.Add Array("00N1300000BRX90", PageInfoF(HousingPlan, "Bedroom Privacy Description")(0))
FieldList.Add Array("00N1300000BLnhZ", PageInfoF(HousingPlan, "Bathrooms")(0))
FieldList.Add Array("00N1300000BLnhr", PageInfoF(HousingPlan, "Utilities Paid by Residents")(0))
FieldList.Add Array("CF00Na000000B2vpP_lkid", PageInfoF(Package, "Landlord Opp")(1))

Call opNAV(IE, "nav", "https://na68.salesforce.com/a1l/e?RecordType=01213000001WIqF&ent=01Ia0000002Ky1A")
Package = PageInfo_RR(Package, "Housing Validation Assessment", Array("Housing Validation Assessment Name", RecoverPageID(PushUpdates2Page(IE, FieldList), "a1l")))

Call opNAV(IE, "quit")
End Sub
Private Function PAHRv3_Creator(ByRef Package As Variant)
Dim Landlord As Variant
Dim Address As Variant

Package = PageInfo_RR(Package, "Housing Address", PAHRv3_CreateNewSite(PageInfoF(Package, "Housing Address")))
Package = PageInfo_RR(Package, "Landlord", PAHRv3_CreateNewLandlord(PageInfoF(Package, "Landlord")))
Call PAHRv3_CreateNewOpportunity(Package)
Call PAHRv3_CreateNewAccomOption(Package)
Call PAHRv3_CreateHousingValidationAssessment(Package)

Debug.Print InfoPrinter(Package)

End Function
